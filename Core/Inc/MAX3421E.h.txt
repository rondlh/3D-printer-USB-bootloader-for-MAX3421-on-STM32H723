#ifndef MAX3421E
#define MAX3421E

#include "main.h"
#include "stm32h7xx_hal.h"

void MAX_Init(void);
void MAX_Process(void);

// Macros
#define P_SETBIT  (reg, val) Pwreg(reg, (Prreg(reg) | val));
#define P_CLEARBIT(reg, val) Pwreg(reg, (Prreg(reg) & ~val));
#define P_STALL_EP0 Pwreg(rEPSTALLS, 0x23);	// Set all 3 EP0 stall bits, data stage IN/OUT and status stage

#define CS_ON()

//(MAX_CS_GPIO_Port->BSRR = (uint32_t)MAX_CS_Pin << 16) // Chip Select   (Reset CS bit)
#define CS_OFF()
//(MAX_CS_GPIO_Port->BSRR = MAX_CS_Pin)                 // Chip deselect (Set CS bit)

// MAX3421E Registers in PERIPHERAL mode
// Pre-shifted left 3 places to account for the 3420/21 command byte format:
// rrrrr0wa where r=register number, w=direction write, a=ackstat (ignored in host mode)
#define MAX_WRITE_REGISTER   0x02

#define SE0     0
#define SE1     1
#define FSHOST  2
#define LSHOST  3

#define MODE_FS_HOST    (bmDPPULLDN | bmDMPULLDN | bmHOST | bmSOFKAENAB)
#define MODE_LS_HOST    (bmDPPULLDN | bmDMPULLDN | bmHOST | bmLOWSPEED | bmSOFKAENAB)

//USB peripheral mode (host = 0) commands
#define rEP0FIFO 	(0 << 3) // FIFO EP0
#define rEP1OUTFIFO (1 << 3) // FIFO EP1 OUT
#define rEP2INFIFO 	(2 << 3) // FIFO EP2 IN
#define rEP3INFIFO  (3 << 3) // FIFO EP3 IN
#define rSUDFIFO   	(4 << 3) // Setup Data FIFO
#define rEP0BC		(5 << 3) // EP0 Byte Count
#define rEP1OUTBC	(6 << 3) // EP1 out Byte Count
#define rEP2INBC	(7 << 3) // EP2 in Byte Count
#define rEP3INBC	(8 << 3) // EP3 in Byte Count

#define rEPSTALLS   (9 << 3)
#define bmACKSTAT       0x40
#define bmSTLSTAT       0x20
#define bmSTLEP3IN      0x10
#define bmSTLEP2IN      0x08
#define bmSTLEP1OUT     0x04
#define bmSTLEP0OUT     0x02
#define bmSTLEP0IN      0x01

#define rCLRTOGS   (10 << 3)
#define bmEP3DISAB      0x80
#define bmEP2DISAB      0x40
#define bmEP1DISAB      0x20
#define bmCTGEP3IN      0x10
#define bmCTGEP2IN      0x08
#define bmCTGEP1OUT     0x04

#define rEPIRQ     (11 << 3)
#define bmSUDAVIRQ      0x20
#define bmIN3BAVIRQ     0x10
#define bmIN2BAVIRQ     0x08
#define bmOUT1DAVIRQ    0x04
#define bmOUT0DAVIRQ    0x02
#define bmIN0BAVIRQ     0x01

#define rEPIEN     (12 << 3)
#define bmSUDAVIE       0x20
#define bmIN3BAVIE      0x10
#define bmIN2BAVIE      0x08
#define bmOUT1DAVIE     0x04
#define bmOUT0DAVIE     0x02
#define bmIN0BAVIE      0x01
   
#define rUSBIRQ    (13 << 3)
#define bmURESDNIRQ     0x80
#define bmVBUSIRQ       0x40 // VBUS interrupt
#define bmNOVBUSIRQ     0x20
#define bmSUSPIRQ       0x10
#define bmURESIRQ       0x08
#define bmBUSACTIRQ     0x04
#define bmRWUDNIRQ      0x02
#define bmOSCOKIRQ      0x01 // Oscillator OK interrupt

#define rUSBIEN    (14 << 3)
#define bmURESDNIE      0x80
#define bmVBUSIE        0x40 // Serial Interface Engine
#define bmNOVBUSIE      0x20
#define bmSUSPIE        0x10
#define bmURESIE        0x08
#define bmBUSACTIE      0x04
#define bmRWUDNIE       0x02
#define bmOSCOKIE       0x01

#define rUSBCTL    (15 << 3)
#define bmHOSCSTEN      0x80
#define bmVBGATE        0x40
#define bmCHIPRES       0x20 // Chip reset
#define bmPWRDOWN       0x10 // Power down
#define bmCONNECT       0x08
#define bmSIGRWU        0x04
// Bit 1-0 are 0

#define rCPUCTL    (16 << 3)
#define bmIE            0x01 // interrupt enable
#define bmPUSLEWID1     0x80 // interrupt pulse width
#define bmPULSEWID0     0x40 // interrupt pulse width
// PULSEWID1 PULSEWID0 interrupt pulse width
//     0         0     10.6us
//     0         1     5.3us
//     1         0     2.6us
//     1         1     1.3us

#define rPINCTL    (17 << 3) // Pin control
#define bmEP3INAK       0x80 // 3420 or 3421 peripheral mode only
#define bmEP2INAK       0x40 // 3420 or 3421 peripheral mode only
#define bmEP1INAK	    0x20 // 3420 or 3421 peripheral mode only
#define bmFDUPSPI       0x10 // Half(0) or full duplex(1) mode
#define bmINTLEVEL      0x08 // Push-pull(0) or open-drain(1) output. (Use external pull-up for open-drain)
#define bmPOSINT        0x04
#define bmGPXB          0x02 // Pin selection
#define	bmGPXA          0x01 // Pin selection
// GPX pin selections, lowest 2 bits of rPINCTL
#define GPX_OPERATE	    0x00 // Default
#define GPX_VBDET       0x01 // Vbus_detect
#define GPX_BUSACT	    0x02 // BUSACT / INIRQ(if SEPIRQ = 1)
#define GPX_SOF		    0x03 // Start of frame

#define rRevision  (18 << 3)
#define rFNADDR    (19 << 3)

#define rIOPINS1   (20 << 3) // GPIO
#define rGPIO      (20 << 3) // For MAX3420E code
// ---------bits------------
#define bmGPOUT0        0x01
#define bmGPOUT1        0x02
#define bmGPOUT2        0x04
#define bmGPOUT3        0x08
#define bmGPIN0         0x10
#define bmGPIN1         0x20
#define bmGPIN2         0x40
#define bmGPIN3         0x80

#define rIOPINS2   (21 << 3) // GPIO
#define bmGPOUT4        0x01
#define bmGPOUT5        0x02
#define bmGPOUT6        0x04
#define bmGPOUT7        0x08
#define bmGPIN4         0x10
#define bmGPIN5         0x20
#define bmGPIN6         0x40
#define bmGPIN7         0x80

#define rGPINIRQ   (22 << 3) // GPIO interrupt
#define bmGPINIRQ0      0x01
#define bmGPINIRQ1      0x02
#define bmGPINIRQ2      0x04
#define bmGPINIRQ3      0x08
#define bmGPINIRQ4      0x10
#define bmGPINIRQ5      0x20
#define bmGPINIRQ6      0x40
#define bmGPINIRQ7      0x80

#define rGPINIEN   (23 << 3) // GPIO interrupt
#define bmGPINIEN0      0x01
#define bmGPINIEN1      0x02
#define bmGPINIEN2      0x04
#define bmGPINIEN3      0x08
#define bmGPINIEN4      0x10
#define bmGPINIEN5      0x20
#define bmGPINIEN6      0x40
#define bmGPINIEN7      0x80

#define rGPINPOL   (24 << 3)
#define bmGPINPOL0      0x01
#define bmGPINPOL1      0x02
#define bmGPINPOL2      0x04
#define bmGPINPOL3      0x08
#define bmGPINPOL4      0x10
#define bmGPINPOL5      0x20
#define bmGPINPOL6      0x40
#define bmGPINPOL7      0x80
// No 25-26 in device mode

#define rMODE      (27 << 3)
#define bmHOST          0x01 // Device / host mode
#define bmLOWSPEED      0x02
#define bmHUBPRE        0x04
#define bmSOFKAENAB     0x08
#define bmSEPIRQ        0x10
#define bmDELAYISO      0x20
#define bmDMPULLDN      0x40 // D- pull down
#define bmDPPULLDN      0x80 // D+ pull down

// ===========================================
// ===== MAX3421E Registers in HOST mode =====
// ===========================================
#define rRCVFIFO    (1 << 3) // Receive FIFO
#define rSNDFIFO    (2 << 3) // Send FIFO
// rSUDFIFO defined above    // Setup Data FIFO (Always 8 bytes)
#define rRCVBC      (6 << 3) // Receive Byte Count
#define rSNDBC      (7 << 3) // Send Byte Count
// rUSBIRQ     defined above
// rUSBIEN     defined above
// rUSBCTL     defined above
// rCPUCTL     defined above
// rPINCTL     defined above
// rRevision   defined above
// rIOPINS1    defined above
// rIOPINS2    defined above
// rGPINIRQ    defined above
// rGPINIEN    defined above
// rGPINPOL    defined above
#define rHIRQ      (25 << 3) // Host interrupts register (Read Clear)
#define bmBUSEVENTIRQ   0x01 // indicates BUS Reset Done or BUS Resume
#define bmRWUIRQ        0x02
#define bmRCVDAVIRQ     0x04 // Receive Data Available interrupt
#define bmSNDBAVIRQ     0x08 // Send Buffer Available interrupt
#define bmSUSDNIRQ      0x10
#define bmCONDETIRQ     0x20 // Connect/de-connect interrupt
#define bmFRAMEIRQ      0x40 // Frame detect interrupt
#define bmHXFRDNIRQ     0x80

#define rHIEN      (26 << 3) // Host interrupt enable register
#define bmBUSEVENTIE    0x01
#define bmRWUIE         0x02
#define bmRCVDAVIE      0x04
#define bmSNDBAVIE      0x08
#define bmSUSDNIE       0x10
#define bmCONDETIE      0x20 // Connection detection interrupt enable
#define bmFRAMEIE       0x40 // Frame detect interrupt enable
#define bmHXFRDNIE      0x80

// rMODE defined above
#define rPERADDR   (28 << 3)

#define rHCTL      (29 << 3) // Host control
#define bmBUSRST        0x01 // Bus reset
#define bmFRMRST        0x02 // Frame Reset
#define bmSAMPLEBUS     0x04 // Sample Bus
#define bmSIGRSM        0x08
#define bmRCVTOG0       0x10
#define bmRCVTOG1       0x20
#define bmSNDTOG0       0x40
#define bmSNDTOG1       0x80

#define rHXFR      (30 << 3) // Host transfer register
// Host XFR token values for writing the HXFR register
// OR this bit field with the endpoint number in bits 3:0
#define tokSETUP        0x10  // HS=0, ISO=0, OUTNIN=0, SETUP=1 SETUP
#define tokIN           0x00  // HS=0, ISO=0, OUTNIN=0, SETUP=0 BULK-IN
#define tokOUT          0x20  // HS=0, ISO=0, OUTNIN=1, SETUP=0 BULK-OUT
#define tokINHS         0x80  // HS=1, ISO=0, OUTNIN=0, SETUP=0 HS-IN
#define tokOUTHS        0xA0  // HS=1, ISO=0, OUTNIN=1, SETUP=0 HS-OUT
#define tokISOIN        0x40  // HS=0, ISO=1, OUTNIN=0, SETUP=0 ISO-IN
#define tokISOOUT       0x60  // HS=0, ISO=1, OUTNIN=1, SETUP=0 ISO-OUT

#define rHRSL      (31 << 3) // Host
#define bmRCVTOGRD      0x10
#define bmSNDTOGRD      0x20
#define bmKSTATUS       0x40 // Low-speed device
#define bmJSTATUS       0x80 // Full-speed device
#define bmSE0           0x00 // SE0 - disconnect state
#define bmSE1           0xC0 // SE1 - illegal state

// Host error result codes, the 4 LSB's in the HRSL register.
#define hrSUCCESS       0x00
#define hrBUSY          0x01
#define hrBADREQ        0x02
#define hrUNDEF         0x03
#define hrNAK           0x04
#define hrSTALL         0x05
#define hrTOGERR        0x06
#define hrWRONGPID      0x07
#define hrBADBC         0x08
#define hrPIDERR        0x09
#define hrPKTERR        0x0A
#define hrCRCERR        0x0B
#define hrKERR          0x0C
#define hrJERR          0x0D
#define hrTIMEOUT       0x0E
#define hrBABBLE        0x0F

#endif
