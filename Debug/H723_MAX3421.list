
H723_MAX3421.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010bdc  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  08010ea8  08010ea8  00011ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801175c  0801175c  0001275c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011764  08011764  00012764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011768  08011768  00012768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000024  24000000  0801176c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001dfc  24000028  08011790  00013028  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001e24  08011790  00013e24  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013024  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026ba8  00000000  00000000  00013052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004753  00000000  00000000  00039bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c38  00000000  00000000  0003e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001709  00000000  00000000  0003ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036a09  00000000  00000000  00041691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023d08  00000000  00000000  0007809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f138  00000000  00000000  0009bda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001faeda  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007b6c  00000000  00000000  001faf20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  00202a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000028 	.word	0x24000028
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08010e90 	.word	0x08010e90

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400002c 	.word	0x2400002c
 8000308:	08010e90 	.word	0x08010e90

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b988 	b.w	8000634 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	468e      	mov	lr, r1
 8000344:	4604      	mov	r4, r0
 8000346:	4688      	mov	r8, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d962      	bls.n	8000418 <__udivmoddi4+0xdc>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	b14e      	cbz	r6, 800036c <__udivmoddi4+0x30>
 8000358:	f1c6 0320 	rsb	r3, r6, #32
 800035c:	fa01 f806 	lsl.w	r8, r1, r6
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	40b7      	lsls	r7, r6
 8000366:	ea43 0808 	orr.w	r8, r3, r8
 800036a:	40b4      	lsls	r4, r6
 800036c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fbb8 f1fe 	udiv	r1, r8, lr
 8000378:	0c23      	lsrs	r3, r4, #16
 800037a:	fb0e 8811 	mls	r8, lr, r1, r8
 800037e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000382:	fb01 f20c 	mul.w	r2, r1, ip
 8000386:	429a      	cmp	r2, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x62>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000390:	f080 80ea 	bcs.w	8000568 <__udivmoddi4+0x22c>
 8000394:	429a      	cmp	r2, r3
 8000396:	f240 80e7 	bls.w	8000568 <__udivmoddi4+0x22c>
 800039a:	3902      	subs	r1, #2
 800039c:	443b      	add	r3, r7
 800039e:	1a9a      	subs	r2, r3, r2
 80003a0:	b2a3      	uxth	r3, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003ae:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b2:	459c      	cmp	ip, r3
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0x8e>
 80003b6:	18fb      	adds	r3, r7, r3
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	f080 80d6 	bcs.w	800056c <__udivmoddi4+0x230>
 80003c0:	459c      	cmp	ip, r3
 80003c2:	f240 80d3 	bls.w	800056c <__udivmoddi4+0x230>
 80003c6:	443b      	add	r3, r7
 80003c8:	3802      	subs	r0, #2
 80003ca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ce:	eba3 030c 	sub.w	r3, r3, ip
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11d      	cbz	r5, 80003de <__udivmoddi4+0xa2>
 80003d6:	40f3      	lsrs	r3, r6
 80003d8:	2200      	movs	r2, #0
 80003da:	e9c5 3200 	strd	r3, r2, [r5]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d905      	bls.n	80003f2 <__udivmoddi4+0xb6>
 80003e6:	b10d      	cbz	r5, 80003ec <__udivmoddi4+0xb0>
 80003e8:	e9c5 0100 	strd	r0, r1, [r5]
 80003ec:	2100      	movs	r1, #0
 80003ee:	4608      	mov	r0, r1
 80003f0:	e7f5      	b.n	80003de <__udivmoddi4+0xa2>
 80003f2:	fab3 f183 	clz	r1, r3
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d146      	bne.n	8000488 <__udivmoddi4+0x14c>
 80003fa:	4573      	cmp	r3, lr
 80003fc:	d302      	bcc.n	8000404 <__udivmoddi4+0xc8>
 80003fe:	4282      	cmp	r2, r0
 8000400:	f200 8105 	bhi.w	800060e <__udivmoddi4+0x2d2>
 8000404:	1a84      	subs	r4, r0, r2
 8000406:	eb6e 0203 	sbc.w	r2, lr, r3
 800040a:	2001      	movs	r0, #1
 800040c:	4690      	mov	r8, r2
 800040e:	2d00      	cmp	r5, #0
 8000410:	d0e5      	beq.n	80003de <__udivmoddi4+0xa2>
 8000412:	e9c5 4800 	strd	r4, r8, [r5]
 8000416:	e7e2      	b.n	80003de <__udivmoddi4+0xa2>
 8000418:	2a00      	cmp	r2, #0
 800041a:	f000 8090 	beq.w	800053e <__udivmoddi4+0x202>
 800041e:	fab2 f682 	clz	r6, r2
 8000422:	2e00      	cmp	r6, #0
 8000424:	f040 80a4 	bne.w	8000570 <__udivmoddi4+0x234>
 8000428:	1a8a      	subs	r2, r1, r2
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000430:	b280      	uxth	r0, r0
 8000432:	b2bc      	uxth	r4, r7
 8000434:	2101      	movs	r1, #1
 8000436:	fbb2 fcfe 	udiv	ip, r2, lr
 800043a:	fb0e 221c 	mls	r2, lr, ip, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb04 f20c 	mul.w	r2, r4, ip
 8000446:	429a      	cmp	r2, r3
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x11e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x11c>
 8000452:	429a      	cmp	r2, r3
 8000454:	f200 80e0 	bhi.w	8000618 <__udivmoddi4+0x2dc>
 8000458:	46c4      	mov	ip, r8
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000460:	fb0e 3312 	mls	r3, lr, r2, r3
 8000464:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000468:	fb02 f404 	mul.w	r4, r2, r4
 800046c:	429c      	cmp	r4, r3
 800046e:	d907      	bls.n	8000480 <__udivmoddi4+0x144>
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	f102 30ff 	add.w	r0, r2, #4294967295
 8000476:	d202      	bcs.n	800047e <__udivmoddi4+0x142>
 8000478:	429c      	cmp	r4, r3
 800047a:	f200 80ca 	bhi.w	8000612 <__udivmoddi4+0x2d6>
 800047e:	4602      	mov	r2, r0
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000486:	e7a5      	b.n	80003d4 <__udivmoddi4+0x98>
 8000488:	f1c1 0620 	rsb	r6, r1, #32
 800048c:	408b      	lsls	r3, r1
 800048e:	fa22 f706 	lsr.w	r7, r2, r6
 8000492:	431f      	orrs	r7, r3
 8000494:	fa0e f401 	lsl.w	r4, lr, r1
 8000498:	fa20 f306 	lsr.w	r3, r0, r6
 800049c:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a4:	4323      	orrs	r3, r4
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	fa1f fc87 	uxth.w	ip, r7
 80004ae:	fbbe f0f9 	udiv	r0, lr, r9
 80004b2:	0c1c      	lsrs	r4, r3, #16
 80004b4:	fb09 ee10 	mls	lr, r9, r0, lr
 80004b8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004bc:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	fa02 f201 	lsl.w	r2, r2, r1
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1a0>
 80004c8:	193c      	adds	r4, r7, r4
 80004ca:	f100 3aff 	add.w	sl, r0, #4294967295
 80004ce:	f080 809c 	bcs.w	800060a <__udivmoddi4+0x2ce>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	f240 8099 	bls.w	800060a <__udivmoddi4+0x2ce>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	eba4 040e 	sub.w	r4, r4, lr
 80004e0:	fa1f fe83 	uxth.w	lr, r3
 80004e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004e8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f0:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x1ce>
 80004f8:	193c      	adds	r4, r7, r4
 80004fa:	f103 3eff 	add.w	lr, r3, #4294967295
 80004fe:	f080 8082 	bcs.w	8000606 <__udivmoddi4+0x2ca>
 8000502:	45a4      	cmp	ip, r4
 8000504:	d97f      	bls.n	8000606 <__udivmoddi4+0x2ca>
 8000506:	3b02      	subs	r3, #2
 8000508:	443c      	add	r4, r7
 800050a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	fba0 ec02 	umull	lr, ip, r0, r2
 8000516:	4564      	cmp	r4, ip
 8000518:	4673      	mov	r3, lr
 800051a:	46e1      	mov	r9, ip
 800051c:	d362      	bcc.n	80005e4 <__udivmoddi4+0x2a8>
 800051e:	d05f      	beq.n	80005e0 <__udivmoddi4+0x2a4>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x1fe>
 8000522:	ebb8 0203 	subs.w	r2, r8, r3
 8000526:	eb64 0409 	sbc.w	r4, r4, r9
 800052a:	fa04 f606 	lsl.w	r6, r4, r6
 800052e:	fa22 f301 	lsr.w	r3, r2, r1
 8000532:	431e      	orrs	r6, r3
 8000534:	40cc      	lsrs	r4, r1
 8000536:	e9c5 6400 	strd	r6, r4, [r5]
 800053a:	2100      	movs	r1, #0
 800053c:	e74f      	b.n	80003de <__udivmoddi4+0xa2>
 800053e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000542:	0c01      	lsrs	r1, r0, #16
 8000544:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000548:	b280      	uxth	r0, r0
 800054a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800054e:	463b      	mov	r3, r7
 8000550:	4638      	mov	r0, r7
 8000552:	463c      	mov	r4, r7
 8000554:	46b8      	mov	r8, r7
 8000556:	46be      	mov	lr, r7
 8000558:	2620      	movs	r6, #32
 800055a:	fbb1 f1f7 	udiv	r1, r1, r7
 800055e:	eba2 0208 	sub.w	r2, r2, r8
 8000562:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000566:	e766      	b.n	8000436 <__udivmoddi4+0xfa>
 8000568:	4601      	mov	r1, r0
 800056a:	e718      	b.n	800039e <__udivmoddi4+0x62>
 800056c:	4610      	mov	r0, r2
 800056e:	e72c      	b.n	80003ca <__udivmoddi4+0x8e>
 8000570:	f1c6 0220 	rsb	r2, r6, #32
 8000574:	fa2e f302 	lsr.w	r3, lr, r2
 8000578:	40b7      	lsls	r7, r6
 800057a:	40b1      	lsls	r1, r6
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000584:	430a      	orrs	r2, r1
 8000586:	fbb3 f8fe 	udiv	r8, r3, lr
 800058a:	b2bc      	uxth	r4, r7
 800058c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000590:	0c11      	lsrs	r1, r2, #16
 8000592:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000596:	fb08 f904 	mul.w	r9, r8, r4
 800059a:	40b0      	lsls	r0, r6
 800059c:	4589      	cmp	r9, r1
 800059e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a2:	b280      	uxth	r0, r0
 80005a4:	d93e      	bls.n	8000624 <__udivmoddi4+0x2e8>
 80005a6:	1879      	adds	r1, r7, r1
 80005a8:	f108 3cff 	add.w	ip, r8, #4294967295
 80005ac:	d201      	bcs.n	80005b2 <__udivmoddi4+0x276>
 80005ae:	4589      	cmp	r9, r1
 80005b0:	d81f      	bhi.n	80005f2 <__udivmoddi4+0x2b6>
 80005b2:	eba1 0109 	sub.w	r1, r1, r9
 80005b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ba:	fb09 f804 	mul.w	r8, r9, r4
 80005be:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c2:	b292      	uxth	r2, r2
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	4542      	cmp	r2, r8
 80005ca:	d229      	bcs.n	8000620 <__udivmoddi4+0x2e4>
 80005cc:	18ba      	adds	r2, r7, r2
 80005ce:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d2:	d2c4      	bcs.n	800055e <__udivmoddi4+0x222>
 80005d4:	4542      	cmp	r2, r8
 80005d6:	d2c2      	bcs.n	800055e <__udivmoddi4+0x222>
 80005d8:	f1a9 0102 	sub.w	r1, r9, #2
 80005dc:	443a      	add	r2, r7
 80005de:	e7be      	b.n	800055e <__udivmoddi4+0x222>
 80005e0:	45f0      	cmp	r8, lr
 80005e2:	d29d      	bcs.n	8000520 <__udivmoddi4+0x1e4>
 80005e4:	ebbe 0302 	subs.w	r3, lr, r2
 80005e8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005ec:	3801      	subs	r0, #1
 80005ee:	46e1      	mov	r9, ip
 80005f0:	e796      	b.n	8000520 <__udivmoddi4+0x1e4>
 80005f2:	eba7 0909 	sub.w	r9, r7, r9
 80005f6:	4449      	add	r1, r9
 80005f8:	f1a8 0c02 	sub.w	ip, r8, #2
 80005fc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000600:	fb09 f804 	mul.w	r8, r9, r4
 8000604:	e7db      	b.n	80005be <__udivmoddi4+0x282>
 8000606:	4673      	mov	r3, lr
 8000608:	e77f      	b.n	800050a <__udivmoddi4+0x1ce>
 800060a:	4650      	mov	r0, sl
 800060c:	e766      	b.n	80004dc <__udivmoddi4+0x1a0>
 800060e:	4608      	mov	r0, r1
 8000610:	e6fd      	b.n	800040e <__udivmoddi4+0xd2>
 8000612:	443b      	add	r3, r7
 8000614:	3a02      	subs	r2, #2
 8000616:	e733      	b.n	8000480 <__udivmoddi4+0x144>
 8000618:	f1ac 0c02 	sub.w	ip, ip, #2
 800061c:	443b      	add	r3, r7
 800061e:	e71c      	b.n	800045a <__udivmoddi4+0x11e>
 8000620:	4649      	mov	r1, r9
 8000622:	e79c      	b.n	800055e <__udivmoddi4+0x222>
 8000624:	eba1 0109 	sub.w	r1, r1, r9
 8000628:	46c4      	mov	ip, r8
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	e7c4      	b.n	80005be <__udivmoddi4+0x282>

08000634 <__aeabi_idiv0>:
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <crc32b>:
/* USER CODE BEGIN 0 */

// Calculate CRC32 of a block of data
#define CRC32_START 0xFFFFFFFF  // Start value for the CRC32 calculation
uint32_t crc32b(uint32_t crc, uint8_t *data, uint32_t size)
{
 8000638:	b480      	push	{r7}
 800063a:	b087      	sub	sp, #28
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < size; i++)
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e01d      	b.n	8000686 <crc32b+0x4e>
	{
		crc = crc ^ data[i];
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	4413      	add	r3, r2
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4053      	eors	r3, r2
 8000658:	60fb      	str	r3, [r7, #12]
		for (int j = 8; j; j--)
 800065a:	2308      	movs	r3, #8
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	e00c      	b.n	800067a <crc32b+0x42>
			crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	085a      	lsrs	r2, r3, #1
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	4259      	negs	r1, r3
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <crc32b+0x68>)
 800066e:	400b      	ands	r3, r1
 8000670:	4053      	eors	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
		for (int j = 8; j; j--)
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	3b01      	subs	r3, #1
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ef      	bne.n	8000660 <crc32b+0x28>
	for (int i = 0; i < size; i++)
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	3301      	adds	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d8dd      	bhi.n	800064a <crc32b+0x12>
	}
	return ~crc;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	43db      	mvns	r3, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	371c      	adds	r7, #28
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	edb88320 	.word	0xedb88320

080006a4 <uart_printf>:
	    FILL_ZERO = 1, BASE_8 = 4 + 2, BASE_10 = 8,
	    BASE_16 = 8 + 4 + 2, PUT_PLUS = 16, PUT_MINUS = 32
	};

	void uart_printf(const char * fmt, ...)
	{
 80006a4:	b40f      	push	{r0, r1, r2, r3}
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b0d2      	sub	sp, #328	@ 0x148
 80006aa:	af00      	add	r7, sp, #0
		va_list va;
	    va_start(va, fmt);
 80006ac:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80006b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	    char debug_msg[255]; // Message buffer
	    char * buf = debug_msg;
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	    char c;
	    unsigned int num;
	    while ((c = *(fmt++)))
 80006bc:	e134      	b.n	8000928 <uart_printf+0x284>
	    {
	    	int width = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	    	if (c == '%')
 80006c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80006c8:	2b25      	cmp	r3, #37	@ 0x25
 80006ca:	f040 8125 	bne.w	8000918 <uart_printf+0x274>
	        {
	            int base = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	            int s_int = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	        MORE_FORMAT:
	            c = *(fmt++); // Skip '%', check parameter
 80006da:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	            switch (c)
 80006ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80006ee:	2b78      	cmp	r3, #120	@ 0x78
 80006f0:	f300 811a 	bgt.w	8000928 <uart_printf+0x284>
 80006f4:	2b62      	cmp	r3, #98	@ 0x62
 80006f6:	da09      	bge.n	800070c <uart_printf+0x68>
 80006f8:	2b25      	cmp	r3, #37	@ 0x25
 80006fa:	d04b      	beq.n	8000794 <uart_printf+0xf0>
 80006fc:	2b25      	cmp	r3, #37	@ 0x25
 80006fe:	f2c0 8113 	blt.w	8000928 <uart_printf+0x284>
 8000702:	3b30      	subs	r3, #48	@ 0x30
 8000704:	2b09      	cmp	r3, #9
 8000706:	f200 810f 	bhi.w	8000928 <uart_printf+0x284>
 800070a:	e035      	b.n	8000778 <uart_printf+0xd4>
 800070c:	3b62      	subs	r3, #98	@ 0x62
 800070e:	2b16      	cmp	r3, #22
 8000710:	f200 810a 	bhi.w	8000928 <uart_printf+0x284>
 8000714:	a201      	add	r2, pc, #4	@ (adr r2, 800071c <uart_printf+0x78>)
 8000716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071a:	bf00      	nop
 800071c:	08000809 	.word	0x08000809
 8000720:	080007a5 	.word	0x080007a5
 8000724:	080007c1 	.word	0x080007c1
 8000728:	08000929 	.word	0x08000929
 800072c:	08000929 	.word	0x08000929
 8000730:	08000929 	.word	0x08000929
 8000734:	08000929 	.word	0x08000929
 8000738:	080007c1 	.word	0x080007c1
 800073c:	08000929 	.word	0x08000929
 8000740:	08000929 	.word	0x08000929
 8000744:	08000929 	.word	0x08000929
 8000748:	08000929 	.word	0x08000929
 800074c:	08000929 	.word	0x08000929
 8000750:	08000929 	.word	0x08000929
 8000754:	08000929 	.word	0x08000929
 8000758:	08000929 	.word	0x08000929
 800075c:	08000929 	.word	0x08000929
 8000760:	080008e3 	.word	0x080008e3
 8000764:	08000929 	.word	0x08000929
 8000768:	080007ff 	.word	0x080007ff
 800076c:	08000929 	.word	0x08000929
 8000770:	08000929 	.word	0x08000929
 8000774:	080007f5 	.word	0x080007f5
	            {
	                case '0'...'9': // Width indicators
	                  width = (width * 10) + c - '0';
 8000778:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800077c:	4613      	mov	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	461a      	mov	r2, r3
 8000786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800078a:	4413      	add	r3, r2
 800078c:	3b30      	subs	r3, #48	@ 0x30
 800078e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000792:	e7a2      	b.n	80006da <uart_printf+0x36>
	                goto MORE_FORMAT;

	                case '%': // "%%" prints "%"
	                    *(buf++) = '%';
 8000794:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 800079e:	2225      	movs	r2, #37	@ 0x25
 80007a0:	701a      	strb	r2, [r3, #0]
	                break;
 80007a2:	e0c1      	b.n	8000928 <uart_printf+0x284>

	                case 'c': // Character
	                    *(buf++) = va_arg(va, int);
 80007a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80007a8:	1d1a      	adds	r2, r3, #4
 80007aa:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80007ae:	6819      	ldr	r1, [r3, #0]
 80007b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80007ba:	b2ca      	uxtb	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]
	                break;
 80007be:	e0b3      	b.n	8000928 <uart_printf+0x284>

	                case 'd': // Signed integer, base 10
	                case 'i': base = 10;
 80007c0:	230a      	movs	r3, #10
 80007c2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	                    s_int = va_arg(va, int);
 80007c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80007ca:	1d1a      	adds	r2, r3, #4
 80007cc:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	                    if (s_int < 0)
 80007d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80007da:	2b00      	cmp	r3, #0
 80007dc:	da05      	bge.n	80007ea <uart_printf+0x146>
	                       num = -s_int;
 80007de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80007e2:	425b      	negs	r3, r3
 80007e4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	                    else
	                      num = s_int;
	                  goto ATOI;
 80007e8:	e016      	b.n	8000818 <uart_printf+0x174>
	                      num = s_int;
 80007ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80007ee:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	                  goto ATOI;
 80007f2:	e011      	b.n	8000818 <uart_printf+0x174>
	                case 'x':      // Hexadecimal, base 16
	                    base += 6; // 2 + 6 + 8 is base 16
 80007f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80007f8:	3306      	adds	r3, #6
 80007fa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	                case 'u':      // Unsigned integer, base 10
	        	        base += 8; // 2 + 8 is base 10
 80007fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000802:	3308      	adds	r3, #8
 8000804:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	                case 'b':      // Binary, base 2
	        	        num = va_arg(va, unsigned int);
 8000808:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800080c:	1d1a      	adds	r2, r3, #4
 800080e:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	                  ATOI:
	                    char tmp[32]; // 32bit
	                    char *q = tmp;
 8000818:	463b      	mov	r3, r7
 800081a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	                    do
	                    {
	                        int rem = '0' + (num % base);
 800081e:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000822:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000826:	fbb3 f1f2 	udiv	r1, r3, r2
 800082a:	fb01 f202 	mul.w	r2, r1, r2
 800082e:	1a9b      	subs	r3, r3, r2
 8000830:	3330      	adds	r3, #48	@ 0x30
 8000832:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	                        if (rem > '9')
 8000836:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800083a:	2b39      	cmp	r3, #57	@ 0x39
 800083c:	dd04      	ble.n	8000848 <uart_printf+0x1a4>
	                          rem += 7; // Map to 'ABCDEF'
 800083e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000842:	3307      	adds	r3, #7
 8000844:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	                        *(q++) = rem;
 8000848:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 8000852:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	701a      	strb	r2, [r3, #0]
	                    } while ((num /= base));
 800085a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800085e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800086a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1d5      	bne.n	800081e <uart_printf+0x17a>

	                    if (s_int < 0)
 8000872:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000876:	2b00      	cmp	r3, #0
 8000878:	da06      	bge.n	8000888 <uart_printf+0x1e4>
	                      *(q++) = '-';
 800087a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 8000884:	222d      	movs	r2, #45	@ 0x2d
 8000886:	701a      	strb	r2, [r3, #0]

	                    width -= q - tmp;
 8000888:	463b      	mov	r3, r7
 800088a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	                    while (width-- > 0)
 800089a:	e006      	b.n	80008aa <uart_printf+0x206>
	                      *(buf++) = ' ';
 800089c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80008a6:	2220      	movs	r2, #32
 80008a8:	701a      	strb	r2, [r3, #0]
	                    while (width-- > 0)
 80008aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80008ae:	1e5a      	subs	r2, r3, #1
 80008b0:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dcf1      	bgt.n	800089c <uart_printf+0x1f8>

	                    while (tmp < q) // Reverse data order, "123" --> "321"
 80008b8:	e00d      	b.n	80008d6 <uart_printf+0x232>
	                      *(buf++) = *(--q);
 80008ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80008be:	3b01      	subs	r3, #1
 80008c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80008c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80008ce:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80008d2:	7812      	ldrb	r2, [r2, #0]
 80008d4:	701a      	strb	r2, [r3, #0]
	                    while (tmp < q) // Reverse data order, "123" --> "321"
 80008d6:	463b      	mov	r3, r7
 80008d8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80008dc:	429a      	cmp	r2, r3
 80008de:	d8ec      	bhi.n	80008ba <uart_printf+0x216>
	                break;
 80008e0:	e022      	b.n	8000928 <uart_printf+0x284>

	                case 's': // String
	                {
	                    const char *p = va_arg(va, const char *);
 80008e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80008e6:	1d1a      	adds	r2, r3, #4
 80008e8:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	                    while (*p)
 80008f2:	e00b      	b.n	800090c <uart_printf+0x268>
	                        *(buf++) = *(p++);
 80008f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80008f8:	1c53      	adds	r3, r2, #1
 80008fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80008fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000902:	1c59      	adds	r1, r3, #1
 8000904:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	701a      	strb	r2, [r3, #0]
	                    while (*p)
 800090c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1ee      	bne.n	80008f4 <uart_printf+0x250>
 8000916:	e007      	b.n	8000928 <uart_printf+0x284>
	                }
	            }
	        }
	        else
	            *(buf++) = c; // Copy literal characters
 8000918:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8000922:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8000926:	701a      	strb	r2, [r3, #0]
	    while ((c = *(fmt++)))
 8000928:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8000938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800093c:	2b00      	cmp	r3, #0
 800093e:	f47f aebe 	bne.w	80006be <uart_printf+0x1a>
	    }
	    *buf = '\0'; // Terminate string
 8000942:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]

	    va_end(va);

	    HAL_UART_Transmit(&DEBUG_USART_HANDLE, (uint8_t *)debug_msg, buf - debug_msg, HAL_MAX_DELAY);
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	b29a      	uxth	r2, r3
 8000956:	f107 0120 	add.w	r1, r7, #32
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
 800095e:	4808      	ldr	r0, [pc, #32]	@ (8000980 <uart_printf+0x2dc>)
 8000960:	f005 fb34 	bl	8005fcc <HAL_UART_Transmit>

	    #ifdef PROGRESS_LED_PIN
			HAL_GPIO_TogglePin(PROGRESS_LED_PORT, PROGRESS_LED_PIN);
 8000964:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000968:	4806      	ldr	r0, [pc, #24]	@ (8000984 <uart_printf+0x2e0>)
 800096a:	f001 ffb2 	bl	80028d2 <HAL_GPIO_TogglePin>
		#endif
	}
 800096e:	bf00      	nop
 8000970:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8000974:	46bd      	mov	sp, r7
 8000976:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800097a:	b004      	add	sp, #16
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	240000f0 	.word	0x240000f0
 8000984:	58020000 	.word	0x58020000

08000988 <compareFlashToFile>:

#endif

  // Return value: 0=equal, 1=different, 2=error
  uint32_t compareFlashToFile(void)
  {
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0
	uint32_t i = 0, j;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
	uint32_t crc32 = ~CRC32_START; // Invert here, will be undone at crc32b
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
	int difference_found = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
	int different = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
    unsigned int bytesRead;
	int result = f_lseek(&fwFile, 0); // Not strictly needed
 800099e:	f04f 0200 	mov.w	r2, #0
 80009a2:	f04f 0300 	mov.w	r3, #0
 80009a6:	4834      	ldr	r0, [pc, #208]	@ (8000a78 <compareFlashToFile+0xf0>)
 80009a8:	f00b f930 	bl	800bc0c <f_lseek>
 80009ac:	4603      	mov	r3, r0
 80009ae:	60bb      	str	r3, [r7, #8]

	while ((i < fileSize) && !result)
 80009b0:	e03e      	b.n	8000a30 <compareFlashToFile+0xa8>
	{
		result = f_read(&fwFile, appBuffer, FILE_BUFFER_SIZE, &bytesRead);
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009b8:	4930      	ldr	r1, [pc, #192]	@ (8000a7c <compareFlashToFile+0xf4>)
 80009ba:	482f      	ldr	r0, [pc, #188]	@ (8000a78 <compareFlashToFile+0xf0>)
 80009bc:	f00a fe38 	bl	800b630 <f_read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	60bb      	str	r3, [r7, #8]
		crc32 = crc32b(~crc32, appBuffer, bytesRead);
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	492c      	ldr	r1, [pc, #176]	@ (8000a7c <compareFlashToFile+0xf4>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe33 	bl	8000638 <crc32b>
 80009d2:	6178      	str	r0, [r7, #20]
		j = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
		while ((j < bytesRead) && !result)
 80009d8:	e011      	b.n	80009fe <compareFlashToFile+0x76>
		{
			if (*(__IO char*)(FLASH_USER_START_ADDR + i + j) != appBuffer[j])
 80009da:	69fa      	ldr	r2, [r7, #28]
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	441a      	add	r2, r3
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <compareFlashToFile+0xf8>)
 80009e2:	4413      	add	r3, r2
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4924      	ldr	r1, [pc, #144]	@ (8000a7c <compareFlashToFile+0xf4>)
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	440b      	add	r3, r1
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d001      	beq.n	80009f8 <compareFlashToFile+0x70>
				difference_found = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
			j++;
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	3301      	adds	r3, #1
 80009fc:	61bb      	str	r3, [r7, #24]
		while ((j < bytesRead) && !result)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d202      	bcs.n	8000a0c <compareFlashToFile+0x84>
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0e6      	beq.n	80009da <compareFlashToFile+0x52>
		}

		if (difference_found)
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d007      	beq.n	8000a22 <compareFlashToFile+0x9a>
		{
			uart_printf("*");
 8000a12:	481c      	ldr	r0, [pc, #112]	@ (8000a84 <compareFlashToFile+0xfc>)
 8000a14:	f7ff fe46 	bl	80006a4 <uart_printf>
			different = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
			difference_found = 0; // Reset block different status
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	e002      	b.n	8000a28 <compareFlashToFile+0xa0>
		}
		else
			uart_printf("=");
 8000a22:	4819      	ldr	r0, [pc, #100]	@ (8000a88 <compareFlashToFile+0x100>)
 8000a24:	f7ff fe3e 	bl	80006a4 <uart_printf>

		i += bytesRead;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	61fb      	str	r3, [r7, #28]
	while ((i < fileSize) && !result)
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <compareFlashToFile+0x104>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	69fa      	ldr	r2, [r7, #28]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d202      	bcs.n	8000a40 <compareFlashToFile+0xb8>
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0b8      	beq.n	80009b2 <compareFlashToFile+0x2a>
	}

	if (result)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d005      	beq.n	8000a52 <compareFlashToFile+0xca>
	{
	    uart_printf(" Error\r\nFile read error: %d\r\n", result);
 8000a46:	68b9      	ldr	r1, [r7, #8]
 8000a48:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <compareFlashToFile+0x108>)
 8000a4a:	f7ff fe2b 	bl	80006a4 <uart_printf>
		return 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	e00e      	b.n	8000a70 <compareFlashToFile+0xe8>
	}
	else
	if (different)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <compareFlashToFile+0xd8>
		uart_printf("* Different\r\nFlash contents differs, update is required\r\n");
 8000a58:	480e      	ldr	r0, [pc, #56]	@ (8000a94 <compareFlashToFile+0x10c>)
 8000a5a:	f7ff fe23 	bl	80006a4 <uart_printf>
 8000a5e:	e006      	b.n	8000a6e <compareFlashToFile+0xe6>
	else
	{
		uart_printf(" Equal \r\nFlash contents is the same, update is not required\r\n");
 8000a60:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <compareFlashToFile+0x110>)
 8000a62:	f7ff fe1f 	bl	80006a4 <uart_printf>
		// Actual checksum is the inverse of the returned number
		uart_printf("Flash CRC32: 0x%x\r\n", crc32);
 8000a66:	6979      	ldr	r1, [r7, #20]
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <compareFlashToFile+0x114>)
 8000a6a:	f7ff fe1b 	bl	80006a4 <uart_printf>
	}

	return different; // 0=equal, 1=different, 2=file read error
 8000a6e:	68fb      	ldr	r3, [r7, #12]
  }
 8000a70:	4618      	mov	r0, r3
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	240003e0 	.word	0x240003e0
 8000a7c:	2400064c 	.word	0x2400064c
 8000a80:	08020000 	.word	0x08020000
 8000a84:	08010ea8 	.word	0x08010ea8
 8000a88:	08010eac 	.word	0x08010eac
 8000a8c:	24000644 	.word	0x24000644
 8000a90:	08010eb0 	.word	0x08010eb0
 8000a94:	08010ed0 	.word	0x08010ed0
 8000a98:	08010f0c 	.word	0x08010f0c
 8000a9c:	08010f4c 	.word	0x08010f4c

08000aa0 <CopyFileToFlashMemory>:

  // Return value: 0=OK, 1=failed/error
  int CopyFileToFlashMemory(void)
  {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
    // STM32H7xx FLASH SECTORS 0-7 all are 128 KBytes (FLASH_SECTOR_SIZE)

  	// Erase required sectors to fit the user application
  	uint32_t erasedSize = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  	uint32_t sector = FLASH_USER_START_SECTOR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]

  	HAL_FLASH_Unlock();
 8000aae:	f001 fc83 	bl	80023b8 <HAL_FLASH_Unlock>
  	FRESULT result = f_lseek(&fwFile, 0);
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	f04f 0300 	mov.w	r3, #0
 8000aba:	484d      	ldr	r0, [pc, #308]	@ (8000bf0 <CopyFileToFlashMemory+0x150>)
 8000abc:	f00b f8a6 	bl	800bc0c <f_lseek>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	75fb      	strb	r3, [r7, #23]

  	while ((erasedSize < fileSize) && !result)
 8000ac4:	e00f      	b.n	8000ae6 <CopyFileToFlashMemory+0x46>
  	{
  	    uart_printf("Erasing 128KB flash sector %d\r\n", sector);
 8000ac6:	69b9      	ldr	r1, [r7, #24]
 8000ac8:	484a      	ldr	r0, [pc, #296]	@ (8000bf4 <CopyFileToFlashMemory+0x154>)
 8000aca:	f7ff fdeb 	bl	80006a4 <uart_printf>

  		FLASH_Erase_Sector(sector, FLASH_BANK_1, FLASH_VOLTAGE_RANGE_3);
 8000ace:	2220      	movs	r2, #32
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	69b8      	ldr	r0, [r7, #24]
 8000ad4:	f001 fd00 	bl	80024d8 <FLASH_Erase_Sector>

  		erasedSize += FLASH_SECTOR_SIZE;
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8000ade:	61fb      	str	r3, [r7, #28]
  		sector++;
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  	while ((erasedSize < fileSize) && !result)
 8000ae6:	4b44      	ldr	r3, [pc, #272]	@ (8000bf8 <CopyFileToFlashMemory+0x158>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d202      	bcs.n	8000af6 <CopyFileToFlashMemory+0x56>
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0e7      	beq.n	8000ac6 <CopyFileToFlashMemory+0x26>
  	}

  	uart_printf("Flashing user application to 0x0%x\r\n", FLASH_USER_START_ADDR);
 8000af6:	4941      	ldr	r1, [pc, #260]	@ (8000bfc <CopyFileToFlashMemory+0x15c>)
 8000af8:	4841      	ldr	r0, [pc, #260]	@ (8000c00 <CopyFileToFlashMemory+0x160>)
 8000afa:	f7ff fdd3 	bl	80006a4 <uart_printf>

  	uint32_t byteCounter = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  	uint32_t i;
  	uint32_t file_crc32 = ~CRC32_START; // Invert here, will be undone in crc32b
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
    unsigned int bytesRead;

  	while ((byteCounter < fileSize) && !result)
 8000b06:	e041      	b.n	8000b8c <CopyFileToFlashMemory+0xec>
  	{
  		// f_read will always return a full buffer, except at the end of the file
  		result = f_read(&fwFile, appBuffer, FILE_BUFFER_SIZE, &bytesRead);
 8000b08:	463b      	mov	r3, r7
 8000b0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b0e:	493d      	ldr	r1, [pc, #244]	@ (8000c04 <CopyFileToFlashMemory+0x164>)
 8000b10:	4837      	ldr	r0, [pc, #220]	@ (8000bf0 <CopyFileToFlashMemory+0x150>)
 8000b12:	f00a fd8d 	bl	800b630 <f_read>
 8000b16:	4603      	mov	r3, r0
 8000b18:	75fb      	strb	r3, [r7, #23]
  		file_crc32 = crc32b(~file_crc32, appBuffer, bytesRead);
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	4938      	ldr	r1, [pc, #224]	@ (8000c04 <CopyFileToFlashMemory+0x164>)
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fd88 	bl	8000638 <crc32b>
 8000b28:	60b8      	str	r0, [r7, #8]

  		if (bytesRead < FILE_BUFFER_SIZE) // Add some "erased flash" bytes to the buffer at the end of the file
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b30:	d20a      	bcs.n	8000b48 <CopyFileToFlashMemory+0xa8>
  			memset(appBuffer + bytesRead, 0xFF, (FILE_BUFFER_SIZE - bytesRead) % FLASHWORD);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	4a33      	ldr	r2, [pc, #204]	@ (8000c04 <CopyFileToFlashMemory+0x164>)
 8000b36:	1898      	adds	r0, r3, r2
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	425b      	negs	r3, r3
 8000b3c:	f003 031f 	and.w	r3, r3, #31
 8000b40:	461a      	mov	r2, r3
 8000b42:	21ff      	movs	r1, #255	@ 0xff
 8000b44:	f010 f95d 	bl	8010e02 <memset>

  		// Write FLASHWORDs to flash memory
  		i = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  		while ((i < bytesRead) && !result)
 8000b4c:	e010      	b.n	8000b70 <CopyFileToFlashMemory+0xd0>
  		{
  			result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_USER_START_ADDR + byteCounter + i, (volatile uint32_t)(appBuffer + i));
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	441a      	add	r2, r3
 8000b54:	4b29      	ldr	r3, [pc, #164]	@ (8000bfc <CopyFileToFlashMemory+0x15c>)
 8000b56:	4413      	add	r3, r2
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	492a      	ldr	r1, [pc, #168]	@ (8000c04 <CopyFileToFlashMemory+0x164>)
 8000b5c:	440a      	add	r2, r1
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	f001 fbb9 	bl	80022d8 <HAL_FLASH_Program>
 8000b66:	4603      	mov	r3, r0
 8000b68:	75fb      	strb	r3, [r7, #23]
  			i += FLASHWORD;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3320      	adds	r3, #32
 8000b6e:	60fb      	str	r3, [r7, #12]
  		while ((i < bytesRead) && !result)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d202      	bcs.n	8000b7e <CopyFileToFlashMemory+0xde>
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0e7      	beq.n	8000b4e <CopyFileToFlashMemory+0xae>
  		}
  		byteCounter += bytesRead;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4413      	add	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
  		uart_printf("=");
 8000b86:	4820      	ldr	r0, [pc, #128]	@ (8000c08 <CopyFileToFlashMemory+0x168>)
 8000b88:	f7ff fd8c 	bl	80006a4 <uart_printf>
  	while ((byteCounter < fileSize) && !result)
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <CopyFileToFlashMemory+0x158>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d202      	bcs.n	8000b9c <CopyFileToFlashMemory+0xfc>
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d0b5      	beq.n	8000b08 <CopyFileToFlashMemory+0x68>
  	}

  	HAL_FLASH_Lock();
 8000b9c:	f001 fc2e 	bl	80023fc <HAL_FLASH_Lock>


  	if (!result) // All went OK, verify flash contents
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d11a      	bne.n	8000bdc <CopyFileToFlashMemory+0x13c>
  	{
  		uint32_t flash_crc32 = crc32b(CRC32_START, (uint8_t*)FLASH_USER_START_ADDR, fileSize);
 8000ba6:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <CopyFileToFlashMemory+0x158>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	4913      	ldr	r1, [pc, #76]	@ (8000bfc <CopyFileToFlashMemory+0x15c>)
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb2:	f7ff fd41 	bl	8000638 <crc32b>
 8000bb6:	6078      	str	r0, [r7, #4]
        if (file_crc32 != flash_crc32)
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d005      	beq.n	8000bcc <CopyFileToFlashMemory+0x12c>
        {
  			uart_printf("* Verify failed\r\n");
 8000bc0:	4812      	ldr	r0, [pc, #72]	@ (8000c0c <CopyFileToFlashMemory+0x16c>)
 8000bc2:	f7ff fd6f 	bl	80006a4 <uart_printf>
            result = 1; // Signal error
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	75fb      	strb	r3, [r7, #23]
 8000bca:	e002      	b.n	8000bd2 <CopyFileToFlashMemory+0x132>
        }
  		else
  			uart_printf(" Verify OK\r\n");
 8000bcc:	4810      	ldr	r0, [pc, #64]	@ (8000c10 <CopyFileToFlashMemory+0x170>)
 8000bce:	f7ff fd69 	bl	80006a4 <uart_printf>

  		uart_printf("Flash CRC32: 0x%x\r\n", flash_crc32);
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	480f      	ldr	r0, [pc, #60]	@ (8000c14 <CopyFileToFlashMemory+0x174>)
 8000bd6:	f7ff fd65 	bl	80006a4 <uart_printf>
 8000bda:	e004      	b.n	8000be6 <CopyFileToFlashMemory+0x146>
  	}
  	else
  	  uart_printf(" Failed: %d\r\n", result);
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	4619      	mov	r1, r3
 8000be0:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <CopyFileToFlashMemory+0x178>)
 8000be2:	f7ff fd5f 	bl	80006a4 <uart_printf>

  	return result;
 8000be6:	7dfb      	ldrb	r3, [r7, #23]
  }
 8000be8:	4618      	mov	r0, r3
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	240003e0 	.word	0x240003e0
 8000bf4:	08010f60 	.word	0x08010f60
 8000bf8:	24000644 	.word	0x24000644
 8000bfc:	08020000 	.word	0x08020000
 8000c00:	08010f80 	.word	0x08010f80
 8000c04:	2400064c 	.word	0x2400064c
 8000c08:	08010eac 	.word	0x08010eac
 8000c0c:	08010fa8 	.word	0x08010fa8
 8000c10:	08010fbc 	.word	0x08010fbc
 8000c14:	08010f4c 	.word	0x08010f4c
 8000c18:	08010fcc 	.word	0x08010fcc

08000c1c <tuh_max3421_int_api>:
// TinyUSB SPI API for MAX3421 USB 2.0 HOST
// -----------------------------------------------------------------
// API to enable/disable MAX3421 INTR pin interrupt
// Continuously called when SPI traffic occurs
void tuh_max3421_int_api(uint8_t rhport, bool enabled)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	460a      	mov	r2, r1
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71bb      	strb	r3, [r7, #6]
  (void) rhport; // Not used

  if (enabled)
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d008      	beq.n	8000c44 <tuh_max3421_int_api+0x28>
  {
    // Configure MAX3421 interrupt line, pin PE13
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0); // Set interrupt priority
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2028      	movs	r0, #40	@ 0x28
 8000c38:	f001 faa0 	bl	800217c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);         // Enable EXT interrupt
 8000c3c:	2028      	movs	r0, #40	@ 0x28
 8000c3e:	f001 fab7 	bl	80021b0 <HAL_NVIC_EnableIRQ>
  }
  else
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);        // Disable EXT interrupt
}
 8000c42:	e002      	b.n	8000c4a <tuh_max3421_int_api+0x2e>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);        // Disable EXT interrupt
 8000c44:	2028      	movs	r0, #40	@ 0x28
 8000c46:	f001 fac1 	bl	80021cc <HAL_NVIC_DisableIRQ>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <tuh_max3421_spi_cs_api>:

// TinyUSB API to control MAX3421 SPI CS
// Note: Hardware NSS doesn't work with the MAX3421 for some reason
void tuh_max3421_spi_cs_api(uint8_t rhport, bool active)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	4613      	mov	r3, r2
 8000c62:	71bb      	strb	r3, [r7, #6]
  (void) rhport; // Not used
  HAL_GPIO_WritePin(MAX3421_CS_GPIO_Port, MAX3421_CS_Pin, active ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	f083 0301 	eor.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c72:	4803      	ldr	r0, [pc, #12]	@ (8000c80 <tuh_max3421_spi_cs_api+0x2c>)
 8000c74:	f001 fe14 	bl	80028a0 <HAL_GPIO_WritePin>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	58020400 	.word	0x58020400

08000c84 <HAL_SPI_TransmitReceive_fast>:

// This is a stripped down version of:
// HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout);
void HAL_SPI_TransmitReceive_fast(const uint8_t *pTxData, uint8_t *pRxData, uint16_t count)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	@ 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	80fb      	strh	r3, [r7, #6]
  uint16_t rx_count = count;
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	83fb      	strh	r3, [r7, #30]
  uint16_t tx_count = count;
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	83bb      	strh	r3, [r7, #28]
  static volatile uint8_t dummy;

  volatile uint8_t *TXDR = (uint8_t*) &(SPI_HANDLE.Instance->TXDR);
 8000c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3320      	adds	r3, #32
 8000ca0:	61bb      	str	r3, [r7, #24]
  volatile uint8_t *RXDR = (uint8_t*) &(SPI_HANDLE.Instance->RXDR);
 8000ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3330      	adds	r3, #48	@ 0x30
 8000ca8:	617b      	str	r3, [r7, #20]
  volatile uint32_t *SR = &(SPI_HANDLE.Instance->SR);
 8000caa:	4b39      	ldr	r3, [pc, #228]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	3314      	adds	r3, #20
 8000cb0:	613b      	str	r3, [r7, #16]

  // Set the number of data at current transfer
  MODIFY_REG(SPI_HANDLE.Instance->CR2, SPI_CR2_TSIZE, count);
 8000cb2:	4b37      	ldr	r3, [pc, #220]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	4b36      	ldr	r3, [pc, #216]	@ (8000d94 <HAL_SPI_TransmitReceive_fast+0x110>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	88f9      	ldrh	r1, [r7, #6]
 8000cbe:	4a34      	ldr	r2, [pc, #208]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000cc0:	6812      	ldr	r2, [r2, #0]
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(&SPI_HANDLE);
 8000cc6:	4b32      	ldr	r3, [pc, #200]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b30      	ldr	r3, [pc, #192]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f042 0201 	orr.w	r2, r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
  SET_BIT(SPI_HANDLE.Instance->CR1, SPI_CR1_CSTART);
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000ce4:	601a      	str	r2, [r3, #0]

  while (tx_count || rx_count)
 8000ce6:	e034      	b.n	8000d52 <HAL_SPI_TransmitReceive_fast+0xce>
  {
  	if (tx_count && (*SR & SPI_FLAG_TXE))
 8000ce8:	8bbb      	ldrh	r3, [r7, #28]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d015      	beq.n	8000d1a <HAL_SPI_TransmitReceive_fast+0x96>
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00f      	beq.n	8000d1a <HAL_SPI_TransmitReceive_fast+0x96>
  	{
  		if (pTxData)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d006      	beq.n	8000d0e <HAL_SPI_TransmitReceive_fast+0x8a>
  			*TXDR = *pTxData++;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60fa      	str	r2, [r7, #12]
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	e002      	b.n	8000d14 <HAL_SPI_TransmitReceive_fast+0x90>
  		else
  			*TXDR = 0xFF;
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	22ff      	movs	r2, #255	@ 0xff
 8000d12:	701a      	strb	r2, [r3, #0]
  		tx_count--;
 8000d14:	8bbb      	ldrh	r3, [r7, #28]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	83bb      	strh	r3, [r7, #28]
  	}

  	if (rx_count && (*SR & SPI_FLAG_RXNE))
 8000d1a:	8bfb      	ldrh	r3, [r7, #30]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d018      	beq.n	8000d52 <HAL_SPI_TransmitReceive_fast+0xce>
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d012      	beq.n	8000d52 <HAL_SPI_TransmitReceive_fast+0xce>
  	{
  		if (pRxData)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d007      	beq.n	8000d42 <HAL_SPI_TransmitReceive_fast+0xbe>
  		  *pRxData++ = *RXDR;
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	60ba      	str	r2, [r7, #8]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	7812      	ldrb	r2, [r2, #0]
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	701a      	strb	r2, [r3, #0]
 8000d40:	e004      	b.n	8000d4c <HAL_SPI_TransmitReceive_fast+0xc8>
  		else
  		  dummy = *RXDR;
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <HAL_SPI_TransmitReceive_fast+0x114>)
 8000d4a:	701a      	strb	r2, [r3, #0]
  		rx_count--;
 8000d4c:	8bfb      	ldrh	r3, [r7, #30]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	83fb      	strh	r3, [r7, #30]
  while (tx_count || rx_count)
 8000d52:	8bbb      	ldrh	r3, [r7, #28]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1c7      	bne.n	8000ce8 <HAL_SPI_TransmitReceive_fast+0x64>
 8000d58:	8bfb      	ldrh	r3, [r7, #30]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1c4      	bne.n	8000ce8 <HAL_SPI_TransmitReceive_fast+0x64>
  	}
  }

  // Call standard close procedure with error check
  __HAL_SPI_CLEAR_TXTFFLAG(&SPI_HANDLE);
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	699a      	ldr	r2, [r3, #24]
 8000d64:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f042 0210 	orr.w	r2, r2, #16
 8000d6c:	619a      	str	r2, [r3, #24]
  __HAL_SPI_DISABLE(&SPI_HANDLE);
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_SPI_TransmitReceive_fast+0x10c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0201 	bic.w	r2, r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]

  UNUSED(dummy);
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_SPI_TransmitReceive_fast+0x114>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
}
 8000d82:	bf00      	nop
 8000d84:	3724      	adds	r7, #36	@ 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	24000068 	.word	0x24000068
 8000d94:	ffff0000 	.word	0xffff0000
 8000d98:	2400164c 	.word	0x2400164c

08000d9c <tuh_max3421_spi_xfer_api>:

// TinyUSB API to transfer data with MAX3421 SPI
// Either tx_buf or rx_buf can be NULL, which means transfer is write or read only
bool tuh_max3421_spi_xfer_api(uint8_t rhport, uint8_t * tx_buf, uint8_t* rx_buf, size_t xfer_bytes)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
  (void) rhport; // Unused

#ifdef FAST_SPI // Faster SPI implementation
  HAL_SPI_TransmitReceive_fast(tx_buf, rx_buf, xfer_bytes);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	68b8      	ldr	r0, [r7, #8]
 8000db6:	f7ff ff65 	bl	8000c84 <HAL_SPI_TransmitReceive_fast>
  // Send and receive
  HAL_SPI_TransmitReceive(&SPI_HANDLE, tx_buf, rx_buf, xfer_bytes, 1000);

#endif // FAST_SPI

  return true;
 8000dba:	2301      	movs	r3, #1

}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <tusb_time_millis_api>:

// TinyUSB API to get time in milliseconds
uint32_t tusb_time_millis_api(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000dc8:	f001 f8b6 	bl	8001f38 <HAL_GetTick>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <inquiry_complete_cb>:

// TinyUSB Callback implementation
static bool inquiry_complete_cb(uint8_t dev_addr, tuh_msc_complete_data_t const * cb_data)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	@ 0x30
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const* cbw = cb_data->cbw;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  msc_csw_t const* csw = cb_data->csw;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	623b      	str	r3, [r7, #32]

  if (csw->status != 0)
 8000dec:	6a3b      	ldr	r3, [r7, #32]
 8000dee:	7b1b      	ldrb	r3, [r3, #12]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d004      	beq.n	8000dfe <inquiry_complete_cb+0x2a>
  {
    uart_printf("Inquiry failed\r\n");
 8000df4:	487f      	ldr	r0, [pc, #508]	@ (8000ff4 <inquiry_complete_cb+0x220>)
 8000df6:	f7ff fc55 	bl	80006a4 <uart_printf>
    return false;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e0f5      	b.n	8000fea <inquiry_complete_cb+0x216>
  }

  // Get capacity of device
  uint32_t const block_count = tuh_msc_get_block_count(dev_addr, cbw->lun);
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e00:	7b5a      	ldrb	r2, [r3, #13]
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f00b fd2c 	bl	800c864 <tuh_msc_get_block_count>
 8000e0c:	61f8      	str	r0, [r7, #28]
  uint32_t const block_size  = tuh_msc_get_block_size (dev_addr, cbw->lun);
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e10:	7b5a      	ldrb	r2, [r3, #13]
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f00b fd46 	bl	800c8a8 <tuh_msc_get_block_size>
 8000e1c:	61b8      	str	r0, [r7, #24]

  uart_printf("Time: %ums  Disk size: %d MB (%d blocks of %d bytes)\r\n", HAL_GetTick(), block_count / ((1024 * 1024) / block_size), block_count, block_size);
 8000e1e:	f001 f88b 	bl	8001f38 <HAL_GetTick>
 8000e22:	4601      	mov	r1, r0
 8000e24:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	486f      	ldr	r0, [pc, #444]	@ (8000ff8 <inquiry_complete_cb+0x224>)
 8000e3c:	f7ff fc32 	bl	80006a4 <uart_printf>

  result = f_mount(&FatFs, "", 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	496e      	ldr	r1, [pc, #440]	@ (8000ffc <inquiry_complete_cb+0x228>)
 8000e44:	486e      	ldr	r0, [pc, #440]	@ (8001000 <inquiry_complete_cb+0x22c>)
 8000e46:	f00a f94b 	bl	800b0e0 <f_mount>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001004 <inquiry_complete_cb+0x230>)
 8000e50:	701a      	strb	r2, [r3, #0]
  if (result)
 8000e52:	4b6c      	ldr	r3, [pc, #432]	@ (8001004 <inquiry_complete_cb+0x230>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00e      	beq.n	8000e78 <inquiry_complete_cb+0xa4>
  {
  	if (result == 3)
 8000e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001004 <inquiry_complete_cb+0x230>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d103      	bne.n	8000e6a <inquiry_complete_cb+0x96>
  	   	uart_printf("No medium mounted, status: 3\r\n");
 8000e62:	4869      	ldr	r0, [pc, #420]	@ (8001008 <inquiry_complete_cb+0x234>)
 8000e64:	f7ff fc1e 	bl	80006a4 <uart_printf>
  	else
  	   	uart_printf("ERROR: USB mounting failed, not FAT/exFAT formatted? Error: %d\r\n", result);

  	goto USER_APP;
 8000e68:	e07f      	b.n	8000f6a <inquiry_complete_cb+0x196>
  	   	uart_printf("ERROR: USB mounting failed, not FAT/exFAT formatted? Error: %d\r\n", result);
 8000e6a:	4b66      	ldr	r3, [pc, #408]	@ (8001004 <inquiry_complete_cb+0x230>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4866      	ldr	r0, [pc, #408]	@ (800100c <inquiry_complete_cb+0x238>)
 8000e72:	f7ff fc17 	bl	80006a4 <uart_printf>
  	goto USER_APP;
 8000e76:	e078      	b.n	8000f6a <inquiry_complete_cb+0x196>
  }

  uart_printf(FIRMWARE_FILENAME);
 8000e78:	4865      	ldr	r0, [pc, #404]	@ (8001010 <inquiry_complete_cb+0x23c>)
 8000e7a:	f7ff fc13 	bl	80006a4 <uart_printf>
  if (f_open(&fwFile, FIRMWARE_FILENAME, FA_READ))
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4963      	ldr	r1, [pc, #396]	@ (8001010 <inquiry_complete_cb+0x23c>)
 8000e82:	4864      	ldr	r0, [pc, #400]	@ (8001014 <inquiry_complete_cb+0x240>)
 8000e84:	f00a f976 	bl	800b174 <f_open>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <inquiry_complete_cb+0xc2>
  {
      uart_printf(" not found\r\n");
 8000e8e:	4862      	ldr	r0, [pc, #392]	@ (8001018 <inquiry_complete_cb+0x244>)
 8000e90:	f7ff fc08 	bl	80006a4 <uart_printf>
      goto USER_APP;
 8000e94:	e069      	b.n	8000f6a <inquiry_complete_cb+0x196>
  }
  uart_printf(" opened successfully\r\n");
 8000e96:	4861      	ldr	r0, [pc, #388]	@ (800101c <inquiry_complete_cb+0x248>)
 8000e98:	f7ff fc04 	bl	80006a4 <uart_printf>

  fileSize = f_size(&fwFile);
 8000e9c:	4b5d      	ldr	r3, [pc, #372]	@ (8001014 <inquiry_complete_cb+0x240>)
 8000e9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000ea2:	4b5f      	ldr	r3, [pc, #380]	@ (8001020 <inquiry_complete_cb+0x24c>)
 8000ea4:	601a      	str	r2, [r3, #0]

  // Get device flash size from memory (in KBytes)
  __IO uint16_t flashSize = *(uint32_t*)(FLASHSIZE_BASE);
 8000ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8001024 <inquiry_complete_cb+0x250>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	81fb      	strh	r3, [r7, #14]
  uart_printf("Total flash memory size: %dKB\r\n", flashSize);
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	485c      	ldr	r0, [pc, #368]	@ (8001028 <inquiry_complete_cb+0x254>)
 8000eb6:	f7ff fbf5 	bl	80006a4 <uart_printf>

  uint32_t freeFlash = (flashSize << 10) - FLASH_BOOTLOADER_SIZE;
 8000eba:	89fb      	ldrh	r3, [r7, #14]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	029b      	lsls	r3, r3, #10
 8000ec0:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
 8000ec4:	617b      	str	r3, [r7, #20]
  uart_printf("Free flash space: %dKB\r\n", freeFlash >> 10);
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	0a9b      	lsrs	r3, r3, #10
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4857      	ldr	r0, [pc, #348]	@ (800102c <inquiry_complete_cb+0x258>)
 8000ece:	f7ff fbe9 	bl	80006a4 <uart_printf>

  uart_printf("Firmware size: %dKB\r\n", fileSize >> 10);
 8000ed2:	4b53      	ldr	r3, [pc, #332]	@ (8001020 <inquiry_complete_cb+0x24c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	0a9b      	lsrs	r3, r3, #10
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4855      	ldr	r0, [pc, #340]	@ (8001030 <inquiry_complete_cb+0x25c>)
 8000edc:	f7ff fbe2 	bl	80006a4 <uart_printf>

  if (fileSize > freeFlash)
 8000ee0:	4b4f      	ldr	r3, [pc, #316]	@ (8001020 <inquiry_complete_cb+0x24c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d206      	bcs.n	8000ef8 <inquiry_complete_cb+0x124>
  {
      uart_printf("ERROR: Insufficient free flash space, aborting\r\n");
 8000eea:	4852      	ldr	r0, [pc, #328]	@ (8001034 <inquiry_complete_cb+0x260>)
 8000eec:	f7ff fbda 	bl	80006a4 <uart_printf>
      f_close(&fwFile); // Not strictly needed, comment out to save some flash
 8000ef0:	4848      	ldr	r0, [pc, #288]	@ (8001014 <inquiry_complete_cb+0x240>)
 8000ef2:	f00a fe6b 	bl	800bbcc <f_close>
      goto USER_APP;
 8000ef6:	e038      	b.n	8000f6a <inquiry_complete_cb+0x196>
  }

  #ifdef COMPARE_BEFORE_FLASH

  	  uart_printf("Comparing update to flash contents\r\n");
 8000ef8:	484f      	ldr	r0, [pc, #316]	@ (8001038 <inquiry_complete_cb+0x264>)
 8000efa:	f7ff fbd3 	bl	80006a4 <uart_printf>

  	  result = compareFlashToFile(); // Return value: 0=equal, 1=different, 2=error
 8000efe:	f7ff fd43 	bl	8000988 <compareFlashToFile>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b3f      	ldr	r3, [pc, #252]	@ (8001004 <inquiry_complete_cb+0x230>)
 8000f08:	701a      	strb	r2, [r3, #0]

  	  if (result > 1) // File read error
 8000f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001004 <inquiry_complete_cb+0x230>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d828      	bhi.n	8000f64 <inquiry_complete_cb+0x190>
  		  goto USER_APP;

  	  if (result == 1) // Flash is different, update required
 8000f12:	4b3c      	ldr	r3, [pc, #240]	@ (8001004 <inquiry_complete_cb+0x230>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d105      	bne.n	8000f26 <inquiry_complete_cb+0x152>
  		  result = CopyFileToFlashMemory(); // Return value: 0=OK, 1=failed/error
 8000f1a:	f7ff fdc1 	bl	8000aa0 <CopyFileToFlashMemory>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b38      	ldr	r3, [pc, #224]	@ (8001004 <inquiry_complete_cb+0x230>)
 8000f24:	701a      	strb	r2, [r3, #0]

      result = CopyFileToFlashMemory(); // Return value: 0=OK, 1=failed/error

  #endif

  f_close(&fwFile); // Must close file before renaming
 8000f26:	483b      	ldr	r0, [pc, #236]	@ (8001014 <inquiry_complete_cb+0x240>)
 8000f28:	f00a fe50 	bl	800bbcc <f_close>

  #ifdef FIRMWARE_RENAME

  if (!result) // Only rename/delete if file was flashed successfully
 8000f2c:	4b35      	ldr	r3, [pc, #212]	@ (8001004 <inquiry_complete_cb+0x230>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d119      	bne.n	8000f68 <inquiry_complete_cb+0x194>
  {
	  f_unlink(FIRMWARE_RENAME); // Delete the old firmware (if present)
 8000f34:	4841      	ldr	r0, [pc, #260]	@ (800103c <inquiry_complete_cb+0x268>)
 8000f36:	f00b f8f8 	bl	800c12a <f_unlink>

	  if (f_rename(FIRMWARE_FILENAME, FIRMWARE_RENAME) != FR_OK)
 8000f3a:	4940      	ldr	r1, [pc, #256]	@ (800103c <inquiry_complete_cb+0x268>)
 8000f3c:	4834      	ldr	r0, [pc, #208]	@ (8001010 <inquiry_complete_cb+0x23c>)
 8000f3e:	f00b f9bc 	bl	800c2ba <f_rename>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <inquiry_complete_cb+0x182>
	  {
          uart_printf("ERROR: Failed to rename firmware file to ");
 8000f48:	483d      	ldr	r0, [pc, #244]	@ (8001040 <inquiry_complete_cb+0x26c>)
 8000f4a:	f7ff fbab 	bl	80006a4 <uart_printf>
          result = 1; // Signal error
 8000f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001004 <inquiry_complete_cb+0x230>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	e002      	b.n	8000f5c <inquiry_complete_cb+0x188>
	  }
      else
          uart_printf("Renaming file to ");
 8000f56:	483b      	ldr	r0, [pc, #236]	@ (8001044 <inquiry_complete_cb+0x270>)
 8000f58:	f7ff fba4 	bl	80006a4 <uart_printf>

      uart_printf(FIRMWARE_RENAME "\r\n");
 8000f5c:	483a      	ldr	r0, [pc, #232]	@ (8001048 <inquiry_complete_cb+0x274>)
 8000f5e:	f7ff fba1 	bl	80006a4 <uart_printf>
 8000f62:	e002      	b.n	8000f6a <inquiry_complete_cb+0x196>
  		  goto USER_APP;
 8000f64:	bf00      	nop
 8000f66:	e000      	b.n	8000f6a <inquiry_complete_cb+0x196>
  }

  #endif

  USER_APP:
 8000f68:	bf00      	nop

    set_magic_key(0); // IMPORTANT, KEEP HERE
 8000f6a:	4b38      	ldr	r3, [pc, #224]	@ (800104c <inquiry_complete_cb+0x278>)
 8000f6c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000f70:	461a      	mov	r2, r3
 8000f72:	2300      	movs	r3, #0
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b35      	ldr	r3, [pc, #212]	@ (800104c <inquiry_complete_cb+0x278>)
 8000f78:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2300      	movs	r3, #0
 8000f80:	6013      	str	r3, [r2, #0]

    f_mount(NULL, "", 0); // Unmount USB, not strictly needed, comment out to save some flash
 8000f82:	2200      	movs	r2, #0
 8000f84:	491d      	ldr	r1, [pc, #116]	@ (8000ffc <inquiry_complete_cb+0x228>)
 8000f86:	2000      	movs	r0, #0
 8000f88:	f00a f8aa 	bl	800b0e0 <f_mount>

    if (*(__IO uint32_t*)FLASH_USER_START_ADDR != 0xFFFFFFFF) // Check if flash is empty
 8000f8c:	4b30      	ldr	r3, [pc, #192]	@ (8001050 <inquiry_complete_cb+0x27c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d01b      	beq.n	8000fce <inquiry_complete_cb+0x1fa>
    {
        uart_printf("Starting user application at 0x0%x\r\n", FLASH_USER_START_ADDR);
 8000f96:	492e      	ldr	r1, [pc, #184]	@ (8001050 <inquiry_complete_cb+0x27c>)
 8000f98:	482e      	ldr	r0, [pc, #184]	@ (8001054 <inquiry_complete_cb+0x280>)
 8000f9a:	f7ff fb83 	bl	80006a4 <uart_printf>
        HAL_Delay(25);
 8000f9e:	2019      	movs	r0, #25
 8000fa0:	f000 ffd6 	bl	8001f50 <HAL_Delay>

      	tuh_max3421_int_api(0, false);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff fe38 	bl	8000c1c <tuh_max3421_int_api>
        HAL_RCC_DeInit(); // Set the clock to the default state
 8000fac:	f001 fd0a 	bl	80029c4 <HAL_RCC_DeInit>
        HAL_DeInit();
 8000fb0:	f000 ff46 	bl	8001e40 <HAL_DeInit>

        uint32_t *vtor = (void*)FLASH_USER_START_ADDR;
 8000fb4:	4b26      	ldr	r3, [pc, #152]	@ (8001050 <inquiry_complete_cb+0x27c>)
 8000fb6:	613b      	str	r3, [r7, #16]
        SCB->VTOR = (uint32_t)vtor;
 8000fb8:	4a27      	ldr	r2, [pc, #156]	@ (8001058 <inquiry_complete_cb+0x284>)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	6093      	str	r3, [r2, #8]

        // Make the jump
        asm volatile("MSR msp,%0\nbx %1" : : "r"(vtor[0]), "r"(vtor[1]));
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	3204      	adds	r2, #4
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	f383 8808 	msr	MSP, r3
 8000fcc:	4710      	bx	r2
    }

    uart_printf("No user application found, done!\r\n");
 8000fce:	4823      	ldr	r0, [pc, #140]	@ (800105c <inquiry_complete_cb+0x288>)
 8000fd0:	f7ff fb68 	bl	80006a4 <uart_printf>

    while (1)
    { // Start slow LED flash
        #ifdef PROGRESS_LED_PIN
            HAL_GPIO_TogglePin(PROGRESS_LED_PORT, PROGRESS_LED_PIN);
 8000fd4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd8:	4821      	ldr	r0, [pc, #132]	@ (8001060 <inquiry_complete_cb+0x28c>)
 8000fda:	f001 fc7a 	bl	80028d2 <HAL_GPIO_TogglePin>
            HAL_Delay(1500);
 8000fde:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000fe2:	f000 ffb5 	bl	8001f50 <HAL_Delay>
            HAL_GPIO_TogglePin(PROGRESS_LED_PORT, PROGRESS_LED_PIN);
 8000fe6:	bf00      	nop
 8000fe8:	e7f4      	b.n	8000fd4 <inquiry_complete_cb+0x200>
        #endif
    };

  return true;
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3728      	adds	r7, #40	@ 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	08010fdc 	.word	0x08010fdc
 8000ff8:	08010ff0 	.word	0x08010ff0
 8000ffc:	08011028 	.word	0x08011028
 8001000:	24000188 	.word	0x24000188
 8001004:	24000640 	.word	0x24000640
 8001008:	0801102c 	.word	0x0801102c
 800100c:	0801104c 	.word	0x0801104c
 8001010:	08011090 	.word	0x08011090
 8001014:	240003e0 	.word	0x240003e0
 8001018:	080110a0 	.word	0x080110a0
 800101c:	080110b0 	.word	0x080110b0
 8001020:	24000644 	.word	0x24000644
 8001024:	1ff1e880 	.word	0x1ff1e880
 8001028:	080110c8 	.word	0x080110c8
 800102c:	080110e8 	.word	0x080110e8
 8001030:	08011104 	.word	0x08011104
 8001034:	0801111c 	.word	0x0801111c
 8001038:	08011150 	.word	0x08011150
 800103c:	08011178 	.word	0x08011178
 8001040:	08011188 	.word	0x08011188
 8001044:	080111b4 	.word	0x080111b4
 8001048:	080111c8 	.word	0x080111c8
 800104c:	58004000 	.word	0x58004000
 8001050:	08020000 	.word	0x08020000
 8001054:	080111d8 	.word	0x080111d8
 8001058:	e000ed00 	.word	0xe000ed00
 800105c:	08011200 	.word	0x08011200
 8001060:	58020000 	.word	0x58020000

08001064 <tuh_msc_mount_cb>:

void tuh_msc_mount_cb(uint8_t dev_addr)
{ // Device mounted
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  uint8_t const lun = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
  tuh_msc_inquiry(dev_addr, lun, &scsi_resp.inquiry, inquiry_complete_cb, 0);
 8001072:	7bf9      	ldrb	r1, [r7, #15]
 8001074:	79f8      	ldrb	r0, [r7, #7]
 8001076:	2300      	movs	r3, #0
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <tuh_msc_mount_cb+0x28>)
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <tuh_msc_mount_cb+0x2c>)
 800107e:	f00b fd49 	bl	800cb14 <tuh_msc_inquiry>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	08000dd5 	.word	0x08000dd5
 8001090:	24000044 	.word	0x24000044

08001094 <wait_for_disk_io>:

//--------------------------------------------------------------------+
// DiskIO Implementation
//--------------------------------------------------------------------+
static void wait_for_disk_io(BYTE pdrv)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  while(_disk_busy)
 800109e:	e005      	b.n	80010ac <wait_for_disk_io+0x18>
void tuh_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tuh_task(void) {
  tuh_task_ext(UINT32_MAX, false);
 80010a0:	2100      	movs	r1, #0
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	f00c fd41 	bl	800db2c <tuh_task_ext>
}
 80010aa:	bf00      	nop
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <wait_for_disk_io+0x2c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f4      	bne.n	80010a0 <wait_for_disk_io+0xc>
    tuh_task();
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	24000648 	.word	0x24000648

080010c4 <disk_io_complete>:

static bool disk_io_complete(uint8_t dev_addr, tuh_msc_complete_data_t const * cb_data)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  (void) dev_addr; (void) cb_data;
  _disk_busy = false;
 80010d0:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <disk_io_complete+0x20>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
  return true;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	24000648 	.word	0x24000648

080010e8 <disk_status>:

DSTATUS disk_status (BYTE pdrv) // Physical drive number should be 0
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  uint8_t dev_addr = pdrv + 1;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
  return tuh_msc_mounted(dev_addr) ? 0 : STA_NODISK;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00b fbf6 	bl	800c8ec <tuh_msc_mounted>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <disk_status+0x22>
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <disk_status+0x24>
 800110a:	2302      	movs	r3, #2
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <disk_initialize>:

DSTATUS disk_initialize (BYTE pdrv) // Physical drive number should be 0
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  (void) pdrv;
	return 0; // nothing to do
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <disk_read>:
DRESULT disk_read (
	BYTE pdrv,		// Physical drive nmuber to identify the drive
	BYTE *buff,		// Data buffer to store read data
	LBA_t sector,	// Start sector in LBA
	UINT count)		// Number of sectors to read
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b08b      	sub	sp, #44	@ 0x2c
 8001130:	af04      	add	r7, sp, #16
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	e9c7 2300 	strd	r2, r3, [r7]
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]
	uint8_t const dev_addr = pdrv + 1;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	3301      	adds	r3, #1
 8001140:	75fb      	strb	r3, [r7, #23]
	uint8_t const lun = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	75bb      	strb	r3, [r7, #22]

	_disk_busy = true;
 8001146:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <disk_read+0x50>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
	tuh_msc_read10(dev_addr, lun, buff, sector, (uint16_t) count, disk_io_complete, 0);
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001150:	b29b      	uxth	r3, r3
 8001152:	7db9      	ldrb	r1, [r7, #22]
 8001154:	7df8      	ldrb	r0, [r7, #23]
 8001156:	2400      	movs	r4, #0
 8001158:	9402      	str	r4, [sp, #8]
 800115a:	4c09      	ldr	r4, [pc, #36]	@ (8001180 <disk_read+0x54>)
 800115c:	9401      	str	r4, [sp, #4]
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4613      	mov	r3, r2
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f00b fdaa 	bl	800ccbc <tuh_msc_read10>
	wait_for_disk_io(pdrv);
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff92 	bl	8001094 <wait_for_disk_io>

	return RES_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	371c      	adds	r7, #28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd90      	pop	{r4, r7, pc}
 800117a:	bf00      	nop
 800117c:	24000648 	.word	0x24000648
 8001180:	080010c5 	.word	0x080010c5

08001184 <disk_write>:
DRESULT disk_write (
	BYTE pdrv,        /* Physical drive number to identify the drive */
	const BYTE *buff, /* Data to be written */
	LBA_t sector,     /* Start sector in LBA */
	UINT count)       /* Number of sectors to write */
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b08b      	sub	sp, #44	@ 0x2c
 8001188:	af04      	add	r7, sp, #16
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	e9c7 2300 	strd	r2, r3, [r7]
 8001190:	4603      	mov	r3, r0
 8001192:	73fb      	strb	r3, [r7, #15]
	uint8_t const dev_addr = pdrv + 1;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	3301      	adds	r3, #1
 8001198:	75fb      	strb	r3, [r7, #23]
	uint8_t const lun = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	75bb      	strb	r3, [r7, #22]

	_disk_busy = true;
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <disk_write+0x50>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
	tuh_msc_write10(dev_addr, lun, buff, sector, (uint16_t) count, disk_io_complete, 0);
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	7db9      	ldrb	r1, [r7, #22]
 80011ac:	7df8      	ldrb	r0, [r7, #23]
 80011ae:	2400      	movs	r4, #0
 80011b0:	9402      	str	r4, [sp, #8]
 80011b2:	4c09      	ldr	r4, [pc, #36]	@ (80011d8 <disk_write+0x54>)
 80011b4:	9401      	str	r4, [sp, #4]
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f00b fde4 	bl	800cd88 <tuh_msc_write10>
	wait_for_disk_io(pdrv);
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff66 	bl	8001094 <wait_for_disk_io>

	return RES_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	24000648 	.word	0x24000648
 80011d8:	080010c5 	.word	0x080010c5

080011dc <disk_ioctl>:

DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive number (0..) */
	BYTE cmd,		/* Control code */
	void *buff)		/* Buffer to send/receive control data */
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	603a      	str	r2, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	460b      	mov	r3, r1
 80011ea:	71bb      	strb	r3, [r7, #6]
  uint8_t const dev_addr = pdrv + 1;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	3301      	adds	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
  uint8_t const lun = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73bb      	strb	r3, [r7, #14]
  switch ( cmd )
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d82b      	bhi.n	8001254 <disk_ioctl+0x78>
 80011fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001204 <disk_ioctl+0x28>)
 80011fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001202:	bf00      	nop
 8001204:	08001215 	.word	0x08001215
 8001208:	08001219 	.word	0x08001219
 800120c:	08001233 	.word	0x08001233
 8001210:	0800124b 	.word	0x0800124b
  {
    case CTRL_SYNC:
      // nothing to do since we do blocking
      return RES_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e01e      	b.n	8001256 <disk_ioctl+0x7a>

    case GET_SECTOR_COUNT:
      *((DWORD*) buff) = (WORD) tuh_msc_get_block_count(dev_addr, lun);
 8001218:	7bba      	ldrb	r2, [r7, #14]
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f00b fb20 	bl	800c864 <tuh_msc_get_block_count>
 8001224:	4603      	mov	r3, r0
 8001226:	b29b      	uxth	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	601a      	str	r2, [r3, #0]
      return RES_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e011      	b.n	8001256 <disk_ioctl+0x7a>

    case GET_SECTOR_SIZE:
      *((WORD*) buff) = (WORD) tuh_msc_get_block_size(dev_addr, lun);
 8001232:	7bba      	ldrb	r2, [r7, #14]
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f00b fb35 	bl	800c8a8 <tuh_msc_get_block_size>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	801a      	strh	r2, [r3, #0]
      return RES_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e005      	b.n	8001256 <disk_ioctl+0x7a>

    case GET_BLOCK_SIZE:
      *((DWORD*) buff) = 1;    // erase block size in units of sector size
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
      return RES_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	e000      	b.n	8001256 <disk_ioctl+0x7a>

    default:
      return RES_PARERR;
 8001254:	2304      	movs	r3, #4
  }

  return RES_OK;
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop

08001260 <MAX3421_wait_frames.0>:
  /* USER CODE BEGIN 2 */

  #define rHIRQ         (25 << 3)
  #define bmFRAMEIRQ	0x40
  bool MAX3421_wait_frames(uint32_t frames, uint32_t timeout)
  {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	f8c7 c004 	str.w	ip, [r7, #4]
	tuh_max3421_reg_write(0, rHIRQ, bmFRAMEIRQ, false); // clear the FRAME interrupt
 800126e:	2300      	movs	r3, #0
 8001270:	2240      	movs	r2, #64	@ 0x40
 8001272:	21c8      	movs	r1, #200	@ 0xc8
 8001274:	2000      	movs	r0, #0
 8001276:	f00e f95b 	bl	800f530 <tuh_max3421_reg_write>
  	uint32_t start = HAL_GetTick();
 800127a:	f000 fe5d 	bl	8001f38 <HAL_GetTick>
 800127e:	6178      	str	r0, [r7, #20]
  	while (frames && (HAL_GetTick() - start < timeout))
 8001280:	e012      	b.n	80012a8 <MAX3421_wait_frames.0+0x48>
  	{
   		if (tuh_max3421_reg_read(0, rHIRQ, false) & bmFRAMEIRQ)
 8001282:	2200      	movs	r2, #0
 8001284:	21c8      	movs	r1, #200	@ 0xc8
 8001286:	2000      	movs	r0, #0
 8001288:	f00e f91e 	bl	800f4c8 <tuh_max3421_reg_read>
 800128c:	4603      	mov	r3, r0
 800128e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d008      	beq.n	80012a8 <MAX3421_wait_frames.0+0x48>
   		{
		  tuh_max3421_reg_write(0, rHIRQ, bmFRAMEIRQ, false); // clear the FRAME interrupt
 8001296:	2300      	movs	r3, #0
 8001298:	2240      	movs	r2, #64	@ 0x40
 800129a:	21c8      	movs	r1, #200	@ 0xc8
 800129c:	2000      	movs	r0, #0
 800129e:	f00e f947 	bl	800f530 <tuh_max3421_reg_write>
		  frames--;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
  	while (frames && (HAL_GetTick() - start < timeout))
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <MAX3421_wait_frames.0+0x5e>
 80012ae:	f000 fe43 	bl	8001f38 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d8e1      	bhi.n	8001282 <MAX3421_wait_frames.0+0x22>
   		}
  	}
//    tuh_task();
    return (frames > 0);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf14      	ite	ne
 80012c4:	2301      	movne	r3, #1
 80012c6:	2300      	moveq	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
  }
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <main>:
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
int main(void)
 80012da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012de:	60bb      	str	r3, [r7, #8]
  MPU_Config();
 80012e0:	f000 fab0 	bl	8001844 <MPU_Config>
  HAL_Init();
 80012e4:	f000 fd70 	bl	8001dc8 <HAL_Init>
  SystemClock_Config();
 80012e8:	f000 f8e2 	bl	80014b0 <SystemClock_Config>
  PeriphCommonClock_Config();
 80012ec:	f000 f952 	bl	8001594 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80012f0:	f000 fa12 	bl	8001718 <MX_GPIO_Init>
  MX_SPI2_Init();
 80012f4:	f000 f96c 	bl	80015d0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80012f8:	f000 f9c0 	bl	800167c <MX_USART1_UART_Init>

  tuh_max3421_reg_read(0, (18 << 3), false); // Startup SPI dummy command, read chip revision
 80012fc:	2200      	movs	r2, #0
 80012fe:	2190      	movs	r1, #144	@ 0x90
 8001300:	2000      	movs	r0, #0
 8001302:	f00e f8e1 	bl	800f4c8 <tuh_max3421_reg_read>

  tusb_rhport_init_t host_init = { .role = TUSB_ROLE_HOST, .speed = TUSB_SPEED_AUTO };
 8001306:	4b5d      	ldr	r3, [pc, #372]	@ (800147c <main+0x1a8>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	80bb      	strh	r3, [r7, #4]
  tusb_init(BOARD_TUH_RHPORT, &host_init);
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4619      	mov	r1, r3
 8001310:	2000      	movs	r0, #0
 8001312:	f00f fb7d 	bl	8010a10 <tusb_rhport_init>

#ifdef DFU_ON_DOUBLE_RESET

	// Detect magic key
	if (*(__IO uint32_t*)DFU_MAGIC_KEY_ADDRESS == DFU_MAGIC_KEY)
 8001316:	4b5a      	ldr	r3, [pc, #360]	@ (8001480 <main+0x1ac>)
 8001318:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a59      	ldr	r2, [pc, #356]	@ (8001484 <main+0x1b0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d12a      	bne.n	800137a <main+0xa6>
	{
		set_magic_key(0);
 8001324:	4b56      	ldr	r3, [pc, #344]	@ (8001480 <main+0x1ac>)
 8001326:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800132a:	461a      	mov	r2, r3
 800132c:	2300      	movs	r3, #0
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b53      	ldr	r3, [pc, #332]	@ (8001480 <main+0x1ac>)
 8001332:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001336:	461a      	mov	r2, r3
 8001338:	2300      	movs	r3, #0
 800133a:	6013      	str	r3, [r2, #0]
		MX_GPIO_Init();
 800133c:	f000 f9ec 	bl	8001718 <MX_GPIO_Init>
		MX_USART1_UART_Init();
 8001340:	f000 f99c 	bl	800167c <MX_USART1_UART_Init>
		uart_printf("\r\nStarting DFU mode\r\n");
 8001344:	4850      	ldr	r0, [pc, #320]	@ (8001488 <main+0x1b4>)
 8001346:	f7ff f9ad 	bl	80006a4 <uart_printf>
		HAL_Delay(25);
 800134a:	2019      	movs	r0, #25
 800134c:	f000 fe00 	bl	8001f50 <HAL_Delay>

		tuh_max3421_int_api(0, false);
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff fc62 	bl	8000c1c <tuh_max3421_int_api>
		HAL_RCC_DeInit(); // Set the clock to the default state
 8001358:	f001 fb34 	bl	80029c4 <HAL_RCC_DeInit>
		HAL_DeInit();
 800135c:	f000 fd70 	bl	8001e40 <HAL_DeInit>

		uint32_t *vtor = (void*)DFU_BOOTLOADER_ADDRESS;
 8001360:	4b4a      	ldr	r3, [pc, #296]	@ (800148c <main+0x1b8>)
 8001362:	617b      	str	r3, [r7, #20]
		SCB->VTOR = (uint32_t)vtor;
 8001364:	4a4a      	ldr	r2, [pc, #296]	@ (8001490 <main+0x1bc>)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	6093      	str	r3, [r2, #8]

		// Make the jump
		asm volatile("MSR msp,%0\nbx %1" : : "r"(vtor[0]), "r"(vtor[1]));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	3204      	adds	r2, #4
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	f383 8808 	msr	MSP, r3
 8001378:	4710      	bx	r2
	}

  	// Wait for 2nd reset while DFU marker is set
	set_magic_key(DFU_MAGIC_KEY);
 800137a:	4b41      	ldr	r3, [pc, #260]	@ (8001480 <main+0x1ac>)
 800137c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001380:	461a      	mov	r2, r3
 8001382:	4b40      	ldr	r3, [pc, #256]	@ (8001484 <main+0x1b0>)
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b3e      	ldr	r3, [pc, #248]	@ (8001480 <main+0x1ac>)
 8001388:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800138c:	461a      	mov	r2, r3
 800138e:	4b3d      	ldr	r3, [pc, #244]	@ (8001484 <main+0x1b0>)
 8001390:	6013      	str	r3, [r2, #0]

#endif

  bool dontwait = MAX3421_wait_frames(250, 2500); // Number of frames (about 2ms/frame), timeout in ms
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	469c      	mov	ip, r3
 8001398:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 800139c:	20fa      	movs	r0, #250	@ 0xfa
 800139e:	f7ff ff5f 	bl	8001260 <MAX3421_wait_frames.0>
 80013a2:	4603      	mov	r3, r0
 80013a4:	74fb      	strb	r3, [r7, #19]

#ifdef DFU_ON_DOUBLE_RESET

	set_magic_key(0);
 80013a6:	4b36      	ldr	r3, [pc, #216]	@ (8001480 <main+0x1ac>)
 80013a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80013ac:	461a      	mov	r2, r3
 80013ae:	2300      	movs	r3, #0
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b33      	ldr	r3, [pc, #204]	@ (8001480 <main+0x1ac>)
 80013b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80013b8:	461a      	mov	r2, r3
 80013ba:	2300      	movs	r3, #0
 80013bc:	6013      	str	r3, [r2, #0]

#endif

	uart_printf("MAX3421 USB bootloader started\r\n");
 80013be:	4835      	ldr	r0, [pc, #212]	@ (8001494 <main+0x1c0>)
 80013c0:	f7ff f970 	bl	80006a4 <uart_printf>
  tuh_task_ext(UINT32_MAX, false);
 80013c4:	2100      	movs	r1, #0
 80013c6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ca:	f00c fbaf 	bl	800db2c <tuh_task_ext>
}
 80013ce:	bf00      	nop
  while (1)
  {
    tuh_task();

	// Timeout counter
	if (dontwait | (HAL_GetTick() > 2200)) // Usually takes 1150-2200ms
 80013d0:	7cfc      	ldrb	r4, [r7, #19]
 80013d2:	f000 fdb1 	bl	8001f38 <HAL_GetTick>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f640 0298 	movw	r2, #2200	@ 0x898
 80013dc:	4293      	cmp	r3, r2
 80013de:	bf8c      	ite	hi
 80013e0:	2301      	movhi	r3, #1
 80013e2:	2300      	movls	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	4323      	orrs	r3, r4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0eb      	beq.n	80013c4 <main+0xf0>
	{
		uart_printf("Time: %ums   Timeout...\r\n", HAL_GetTick());
 80013ec:	f000 fda4 	bl	8001f38 <HAL_GetTick>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4619      	mov	r1, r3
 80013f4:	4828      	ldr	r0, [pc, #160]	@ (8001498 <main+0x1c4>)
 80013f6:	f7ff f955 	bl	80006a4 <uart_printf>
		set_magic_key(0); // IMPORTANT, KEEP HERE
 80013fa:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <main+0x1ac>)
 80013fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001400:	461a      	mov	r2, r3
 8001402:	2300      	movs	r3, #0
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <main+0x1ac>)
 8001408:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800140c:	461a      	mov	r2, r3
 800140e:	2300      	movs	r3, #0
 8001410:	6013      	str	r3, [r2, #0]

        f_mount(NULL, "", 0); // Unmount USB, not strictly needed, comment out to save some flash
 8001412:	2200      	movs	r2, #0
 8001414:	4921      	ldr	r1, [pc, #132]	@ (800149c <main+0x1c8>)
 8001416:	2000      	movs	r0, #0
 8001418:	f009 fe62 	bl	800b0e0 <f_mount>

        if (*(__IO uint32_t*)FLASH_USER_START_ADDR != 0xFFFFFFFF) // Check if flash is empty
 800141c:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <main+0x1cc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001424:	d01b      	beq.n	800145e <main+0x18a>
        {
            uart_printf("Starting user application at 0x0%x\r\n", FLASH_USER_START_ADDR);
 8001426:	491e      	ldr	r1, [pc, #120]	@ (80014a0 <main+0x1cc>)
 8001428:	481e      	ldr	r0, [pc, #120]	@ (80014a4 <main+0x1d0>)
 800142a:	f7ff f93b 	bl	80006a4 <uart_printf>
            HAL_Delay(25);
 800142e:	2019      	movs	r0, #25
 8001430:	f000 fd8e 	bl	8001f50 <HAL_Delay>

    		tuh_max3421_int_api(0, false);
 8001434:	2100      	movs	r1, #0
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fbf0 	bl	8000c1c <tuh_max3421_int_api>
            HAL_RCC_DeInit(); // Set the clock to the default state
 800143c:	f001 fac2 	bl	80029c4 <HAL_RCC_DeInit>
            HAL_DeInit();
 8001440:	f000 fcfe 	bl	8001e40 <HAL_DeInit>

            uint32_t *vtor = (void*)FLASH_USER_START_ADDR;
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <main+0x1cc>)
 8001446:	60fb      	str	r3, [r7, #12]
            SCB->VTOR = (uint32_t)vtor;
 8001448:	4a11      	ldr	r2, [pc, #68]	@ (8001490 <main+0x1bc>)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6093      	str	r3, [r2, #8]

            // Make the jump
            asm volatile("MSR msp,%0\nbx %1" : : "r"(vtor[0]), "r"(vtor[1]));
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	3204      	adds	r2, #4
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	f383 8808 	msr	MSP, r3
 800145c:	4710      	bx	r2
        }

        uart_printf("No user application found, done!\r\n");
 800145e:	4812      	ldr	r0, [pc, #72]	@ (80014a8 <main+0x1d4>)
 8001460:	f7ff f920 	bl	80006a4 <uart_printf>

        while (1)
        { // Start slow LED flash
            #ifdef PROGRESS_LED_PIN
                HAL_GPIO_TogglePin(PROGRESS_LED_PORT, PROGRESS_LED_PIN);
 8001464:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001468:	4810      	ldr	r0, [pc, #64]	@ (80014ac <main+0x1d8>)
 800146a:	f001 fa32 	bl	80028d2 <HAL_GPIO_TogglePin>
                HAL_Delay(1500);
 800146e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001472:	f000 fd6d 	bl	8001f50 <HAL_Delay>
                HAL_GPIO_TogglePin(PROGRESS_LED_PORT, PROGRESS_LED_PIN);
 8001476:	bf00      	nop
 8001478:	e7f4      	b.n	8001464 <main+0x190>
 800147a:	bf00      	nop
 800147c:	0801127c 	.word	0x0801127c
 8001480:	58004000 	.word	0x58004000
 8001484:	ba5eba11 	.word	0xba5eba11
 8001488:	08011224 	.word	0x08011224
 800148c:	1ff09800 	.word	0x1ff09800
 8001490:	e000ed00 	.word	0xe000ed00
 8001494:	0801123c 	.word	0x0801123c
 8001498:	08011260 	.word	0x08011260
 800149c:	08011028 	.word	0x08011028
 80014a0:	08020000 	.word	0x08020000
 80014a4:	080111d8 	.word	0x080111d8
 80014a8:	08011200 	.word	0x08011200
 80014ac:	58020000 	.word	0x58020000

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b09c      	sub	sp, #112	@ 0x70
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ba:	224c      	movs	r2, #76	@ 0x4c
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f00f fc9f 	bl	8010e02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2220      	movs	r2, #32
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f00f fc99 	bl	8010e02 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014d0:	2002      	movs	r0, #2
 80014d2:	f001 fa3d 	bl	8002950 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <SystemClock_Config+0xe0>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4a2c      	ldr	r2, [pc, #176]	@ (8001590 <SystemClock_Config+0xe0>)
 80014e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014e4:	6193      	str	r3, [r2, #24]
 80014e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <SystemClock_Config+0xe0>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014f2:	bf00      	nop
 80014f4:	4b26      	ldr	r3, [pc, #152]	@ (8001590 <SystemClock_Config+0xe0>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001500:	d1f8      	bne.n	80014f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001502:	2303      	movs	r3, #3
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001506:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800150c:	2301      	movs	r3, #1
 800150e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001510:	2340      	movs	r3, #64	@ 0x40
 8001512:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001514:	2302      	movs	r3, #2
 8001516:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001518:	2302      	movs	r3, #2
 800151a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001520:	232c      	movs	r3, #44	@ 0x2c
 8001522:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001524:	2301      	movs	r3, #1
 8001526:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 11;
 8001528:	230b      	movs	r3, #11
 800152a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800152c:	2302      	movs	r3, #2
 800152e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001530:	230c      	movs	r3, #12
 8001532:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001534:	2300      	movs	r3, #0
 8001536:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001540:	4618      	mov	r0, r3
 8001542:	f001 fb69 	bl	8002c18 <HAL_RCC_OscConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800154c:	f000 f9b8 	bl	80018c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001550:	233f      	movs	r3, #63	@ 0x3f
 8001552:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001554:	2303      	movs	r3, #3
 8001556:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800155c:	2308      	movs	r3, #8
 800155e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001560:	2340      	movs	r3, #64	@ 0x40
 8001562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001564:	2340      	movs	r3, #64	@ 0x40
 8001566:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800156c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800156e:	2340      	movs	r3, #64	@ 0x40
 8001570:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2103      	movs	r1, #3
 8001576:	4618      	mov	r0, r3
 8001578:	f001 ff28 	bl	80033cc <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001582:	f000 f99d 	bl	80018c0 <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3770      	adds	r7, #112	@ 0x70
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	58024800 	.word	0x58024800

08001594 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0ae      	sub	sp, #184	@ 0xb8
 8001598:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800159a:	463b      	mov	r3, r7
 800159c:	22b8      	movs	r2, #184	@ 0xb8
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00f fc2e 	bl	8010e02 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80015a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80015b2:	2300      	movs	r3, #0
 80015b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 fad5 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 80015c4:	f000 f97c 	bl	80018c0 <Error_Handler>
  }
}
 80015c8:	bf00      	nop
 80015ca:	37b8      	adds	r7, #184	@ 0xb8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015d4:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <MX_SPI2_Init+0xa4>)
 80015d6:	4a28      	ldr	r2, [pc, #160]	@ (8001678 <MX_SPI2_Init+0xa8>)
 80015d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015da:	4b26      	ldr	r3, [pc, #152]	@ (8001674 <MX_SPI2_Init+0xa4>)
 80015dc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015e2:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <MX_SPI2_Init+0xa4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e8:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <MX_SPI2_Init+0xa4>)
 80015ea:	2207      	movs	r2, #7
 80015ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ee:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <MX_SPI2_Init+0xa4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <MX_SPI2_Init+0xa4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <MX_SPI2_Init+0xa4>)
 80015fc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001600:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <MX_SPI2_Init+0xa4>)
 8001604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001608:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800160a:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <MX_SPI2_Init+0xa4>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001610:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <MX_SPI2_Init+0xa4>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001616:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <MX_SPI2_Init+0xa4>)
 8001618:	2200      	movs	r2, #0
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800161c:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <MX_SPI2_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001622:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <MX_SPI2_Init+0xa4>)
 8001624:	2200      	movs	r2, #0
 8001626:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <MX_SPI2_Init+0xa4>)
 800162a:	2200      	movs	r2, #0
 800162c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_SPI2_Init+0xa4>)
 8001630:	2200      	movs	r2, #0
 8001632:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_SPI2_Init+0xa4>)
 8001636:	2200      	movs	r2, #0
 8001638:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_SPI2_Init+0xa4>)
 800163c:	2200      	movs	r2, #0
 800163e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_15CYCLE;
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MX_SPI2_Init+0xa4>)
 8001642:	220f      	movs	r2, #15
 8001644:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_15CYCLE;
 8001646:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <MX_SPI2_Init+0xa4>)
 8001648:	22f0      	movs	r2, #240	@ 0xf0
 800164a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MX_SPI2_Init+0xa4>)
 800164e:	2200      	movs	r2, #0
 8001650:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <MX_SPI2_Init+0xa4>)
 8001654:	2200      	movs	r2, #0
 8001656:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <MX_SPI2_Init+0xa4>)
 800165a:	2200      	movs	r2, #0
 800165c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800165e:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_SPI2_Init+0xa4>)
 8001660:	f004 f844 	bl	80056ec <HAL_SPI_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800166a:	f000 f929 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	24000068 	.word	0x24000068
 8001678:	40003800 	.word	0x40003800

0800167c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <MX_USART1_UART_Init+0x90>)
 8001682:	4a23      	ldr	r2, [pc, #140]	@ (8001710 <MX_USART1_UART_Init+0x94>)
 8001684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8001686:	4b21      	ldr	r3, [pc, #132]	@ (800170c <MX_USART1_UART_Init+0x90>)
 8001688:	4a22      	ldr	r2, [pc, #136]	@ (8001714 <MX_USART1_UART_Init+0x98>)
 800168a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168c:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <MX_USART1_UART_Init+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001692:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <MX_USART1_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001698:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <MX_USART1_UART_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800169e:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <MX_USART1_UART_Init+0x90>)
 80016a0:	220c      	movs	r2, #12
 80016a2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a4:	4b19      	ldr	r3, [pc, #100]	@ (800170c <MX_USART1_UART_Init+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <MX_USART1_UART_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <MX_USART1_UART_Init+0x90>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <MX_USART1_UART_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <MX_USART1_UART_Init+0x90>)
 80016be:	2200      	movs	r2, #0
 80016c0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c2:	4812      	ldr	r0, [pc, #72]	@ (800170c <MX_USART1_UART_Init+0x90>)
 80016c4:	f004 fc32 	bl	8005f2c <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80016ce:	f000 f8f7 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d2:	2100      	movs	r1, #0
 80016d4:	480d      	ldr	r0, [pc, #52]	@ (800170c <MX_USART1_UART_Init+0x90>)
 80016d6:	f005 fdcc 	bl	8007272 <HAL_UARTEx_SetTxFifoThreshold>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80016e0:	f000 f8ee 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e4:	2100      	movs	r1, #0
 80016e6:	4809      	ldr	r0, [pc, #36]	@ (800170c <MX_USART1_UART_Init+0x90>)
 80016e8:	f005 fe01 	bl	80072ee <HAL_UARTEx_SetRxFifoThreshold>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80016f2:	f000 f8e5 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_USART1_UART_Init+0x90>)
 80016f8:	f005 fd82 	bl	8007200 <HAL_UARTEx_DisableFifoMode>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001702:	f000 f8dd 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	240000f0 	.word	0x240000f0
 8001710:	40011000 	.word	0x40011000
 8001714:	0003d090 	.word	0x0003d090

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	@ 0x28
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172e:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <MX_GPIO_Init+0x11c>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001734:	4a3f      	ldr	r2, [pc, #252]	@ (8001834 <MX_GPIO_Init+0x11c>)
 8001736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800173a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800173e:	4b3d      	ldr	r3, [pc, #244]	@ (8001834 <MX_GPIO_Init+0x11c>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <MX_GPIO_Init+0x11c>)
 800174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001752:	4a38      	ldr	r2, [pc, #224]	@ (8001834 <MX_GPIO_Init+0x11c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800175c:	4b35      	ldr	r3, [pc, #212]	@ (8001834 <MX_GPIO_Init+0x11c>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800176a:	4b32      	ldr	r3, [pc, #200]	@ (8001834 <MX_GPIO_Init+0x11c>)
 800176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001770:	4a30      	ldr	r2, [pc, #192]	@ (8001834 <MX_GPIO_Init+0x11c>)
 8001772:	f043 0310 	orr.w	r3, r3, #16
 8001776:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800177a:	4b2e      	ldr	r3, [pc, #184]	@ (8001834 <MX_GPIO_Init+0x11c>)
 800177c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <MX_GPIO_Init+0x11c>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178e:	4a29      	ldr	r2, [pc, #164]	@ (8001834 <MX_GPIO_Init+0x11c>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001798:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <MX_GPIO_Init+0x11c>)
 800179a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2102      	movs	r1, #2
 80017aa:	4823      	ldr	r0, [pc, #140]	@ (8001838 <MX_GPIO_Init+0x120>)
 80017ac:	f001 f878 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX3421_CS_GPIO_Port, MAX3421_CS_Pin, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017b6:	4821      	ldr	r0, [pc, #132]	@ (800183c <MX_GPIO_Init+0x124>)
 80017b8:	f001 f872 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017bc:	2302      	movs	r3, #2
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4819      	ldr	r0, [pc, #100]	@ (8001838 <MX_GPIO_Init+0x120>)
 80017d4:	f000 fea4 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX3421_INTR_Pin */
  GPIO_InitStruct.Pin = MAX3421_INTR_Pin;
 80017d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017de:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAX3421_INTR_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4814      	ldr	r0, [pc, #80]	@ (8001840 <MX_GPIO_Init+0x128>)
 80017f0:	f000 fe96 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX3421_CS_Pin */
  GPIO_InitStruct.Pin = MAX3421_CS_Pin;
 80017f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAX3421_CS_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	480b      	ldr	r0, [pc, #44]	@ (800183c <MX_GPIO_Init+0x124>)
 800180e:	f000 fe87 	bl	8002520 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_CLOSE);
 8001812:	2100      	movs	r1, #0
 8001814:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8001818:	f000 fbbe 	bl	8001f98 <HAL_SYSCFG_AnalogSwitchConfig>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(MAX3421_INTR_EXTI_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	2028      	movs	r0, #40	@ 0x28
 8001822:	f000 fcab 	bl	800217c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MAX3421_INTR_EXTI_IRQn);
 8001826:	2028      	movs	r0, #40	@ 0x28
 8001828:	f000 fcc2 	bl	80021b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	@ 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	58024400 	.word	0x58024400
 8001838:	58020000 	.word	0x58020000
 800183c:	58020400 	.word	0x58020400
 8001840:	58021000 	.word	0x58021000

08001844 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800184a:	463b      	mov	r3, r7
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001856:	f000 fcc7 	bl	80021e8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800185a:	2301      	movs	r3, #1
 800185c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800185e:	2300      	movs	r3, #0
 8001860:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001866:	231f      	movs	r3, #31
 8001868:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800186a:	2387      	movs	r3, #135	@ 0x87
 800186c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800186e:	2300      	movs	r3, #0
 8001870:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001872:	2300      	movs	r3, #0
 8001874:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001876:	2301      	movs	r3, #1
 8001878:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800187a:	2301      	movs	r3, #1
 800187c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001886:	463b      	mov	r3, r7
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fce5 	bl	8002258 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800188e:	2004      	movs	r0, #4
 8001890:	f000 fcc2 	bl	8002218 <HAL_MPU_Enable>

}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80018ae:	f000 fb2f 	bl	8001f10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40001000 	.word	0x40001000

080018c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <Error_Handler+0x8>

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_MspInit+0x30>)
 80018d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018d8:	4a08      	ldr	r2, [pc, #32]	@ (80018fc <HAL_MspInit+0x30>)
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_MspInit+0x30>)
 80018e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	58024400 	.word	0x58024400

08001900 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b0b8      	sub	sp, #224	@ 0xe0
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	22b8      	movs	r2, #184	@ 0xb8
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f00f fa6e 	bl	8010e02 <memset>
  if(hspi->Instance==SPI2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a27      	ldr	r2, [pc, #156]	@ (80019c8 <HAL_SPI_MspInit+0xc8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d146      	bne.n	80019be <HAL_SPI_MspInit+0xbe>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001930:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800193c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001940:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	4618      	mov	r0, r3
 8001948:	f002 f90e 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001952:	f7ff ffb5 	bl	80018c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001956:	4b1d      	ldr	r3, [pc, #116]	@ (80019cc <HAL_SPI_MspInit+0xcc>)
 8001958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800195c:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <HAL_SPI_MspInit+0xcc>)
 800195e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001962:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001966:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <HAL_SPI_MspInit+0xcc>)
 8001968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800196c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <HAL_SPI_MspInit+0xcc>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197a:	4a14      	ldr	r2, [pc, #80]	@ (80019cc <HAL_SPI_MspInit+0xcc>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_SPI_MspInit+0xcc>)
 8001986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001992:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001996:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ac:	2305      	movs	r3, #5
 80019ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <HAL_SPI_MspInit+0xd0>)
 80019ba:	f000 fdb1 	bl	8002520 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80019be:	bf00      	nop
 80019c0:	37e0      	adds	r7, #224	@ 0xe0
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40003800 	.word	0x40003800
 80019cc:	58024400 	.word	0x58024400
 80019d0:	58020400 	.word	0x58020400

080019d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b0b8      	sub	sp, #224	@ 0xe0
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	22b8      	movs	r2, #184	@ 0xb8
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00f fa04 	bl	8010e02 <memset>
  if(huart->Instance==USART1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a27      	ldr	r2, [pc, #156]	@ (8001a9c <HAL_UART_MspInit+0xc8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d146      	bne.n	8001a92 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a04:	f04f 0201 	mov.w	r2, #1
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 f8a4 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a26:	f7ff ff4b 	bl	80018c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa0 <HAL_UART_MspInit+0xcc>)
 8001a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a30:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa0 <HAL_UART_MspInit+0xcc>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a3a:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <HAL_UART_MspInit+0xcc>)
 8001a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a48:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_UART_MspInit+0xcc>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4e:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <HAL_UART_MspInit+0xcc>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <HAL_UART_MspInit+0xcc>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a66:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a80:	2307      	movs	r3, #7
 8001a82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <HAL_UART_MspInit+0xd0>)
 8001a8e:	f000 fd47 	bl	8002520 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a92:	bf00      	nop
 8001a94:	37e0      	adds	r7, #224	@ 0xe0
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	58020000 	.word	0x58020000

08001aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b090      	sub	sp, #64	@ 0x40
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	d827      	bhi.n	8001b06 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	2036      	movs	r0, #54	@ 0x36
 8001abc:	f000 fb5e 	bl	800217c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ac0:	2036      	movs	r0, #54	@ 0x36
 8001ac2:	f000 fb75 	bl	80021b0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001ac6:	4a29      	ldr	r2, [pc, #164]	@ (8001b6c <HAL_InitTick+0xc4>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001acc:	4b28      	ldr	r3, [pc, #160]	@ (8001b70 <HAL_InitTick+0xc8>)
 8001ace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ad2:	4a27      	ldr	r2, [pc, #156]	@ (8001b70 <HAL_InitTick+0xc8>)
 8001ad4:	f043 0310 	orr.w	r3, r3, #16
 8001ad8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001adc:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_InitTick+0xc8>)
 8001ade:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aea:	f107 0210 	add.w	r2, r7, #16
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fff5 	bl	8003ae4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001afc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d106      	bne.n	8001b12 <HAL_InitTick+0x6a>
 8001b04:	e001      	b.n	8001b0a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e02b      	b.n	8001b62 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b0a:	f001 ffbf 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8001b0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001b10:	e004      	b.n	8001b1c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b12:	f001 ffbb 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8001b16:	4603      	mov	r3, r0
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b1e:	4a15      	ldr	r2, [pc, #84]	@ (8001b74 <HAL_InitTick+0xcc>)
 8001b20:	fba2 2303 	umull	r2, r3, r2, r3
 8001b24:	0c9b      	lsrs	r3, r3, #18
 8001b26:	3b01      	subs	r3, #1
 8001b28:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <HAL_InitTick+0xd0>)
 8001b2c:	4a13      	ldr	r2, [pc, #76]	@ (8001b7c <HAL_InitTick+0xd4>)
 8001b2e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <HAL_InitTick+0xd0>)
 8001b32:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b36:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b38:	4a0f      	ldr	r2, [pc, #60]	@ (8001b78 <HAL_InitTick+0xd0>)
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b3c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_InitTick+0xd0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_InitTick+0xd0>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b4a:	480b      	ldr	r0, [pc, #44]	@ (8001b78 <HAL_InitTick+0xd0>)
 8001b4c:	f003 ff0d 	bl	800596a <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d104      	bne.n	8001b60 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b56:	4808      	ldr	r0, [pc, #32]	@ (8001b78 <HAL_InitTick+0xd0>)
 8001b58:	f003 ff68 	bl	8005a2c <HAL_TIM_Base_Start_IT>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	e000      	b.n	8001b62 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3740      	adds	r7, #64	@ 0x40
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	24000008 	.word	0x24000008
 8001b70:	58024400 	.word	0x58024400
 8001b74:	431bde83 	.word	0x431bde83
 8001b78:	24001650 	.word	0x24001650
 8001b7c:	40001000 	.word	0x40001000

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <NMI_Handler+0x4>

08001b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <HardFault_Handler+0x4>

08001b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <MemManage_Handler+0x4>

08001b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//extern uint32_t interrupt;
  // IRON, READ PIN LEVEL TO CONFIRM THE PIN CAUSED THE INTERRUPT

  if (HAL_GPIO_ReadPin(MAX3421_INTR_GPIO_Port, MAX3421_INTR_Pin) == GPIO_PIN_RESET) {
 8001be4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001be8:	4807      	ldr	r0, [pc, #28]	@ (8001c08 <EXTI15_10_IRQHandler+0x28>)
 8001bea:	f000 fe41 	bl	8002870 <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d103      	bne.n	8001bfc <EXTI15_10_IRQHandler+0x1c>
	//  interrupt = 1; // Report back to main loop
	  tuh_int_handler(0, 1);
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f00e fd7e 	bl	80106f8 <hcd_int_handler>
  }

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX3421_INTR_Pin);
 8001bfc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c00:	f000 fe81 	bl	8002906 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	58021000 	.word	0x58021000

08001c0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c10:	4802      	ldr	r0, [pc, #8]	@ (8001c1c <TIM6_DAC_IRQHandler+0x10>)
 8001c12:	f003 ff91 	bl	8005b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	24001650 	.word	0x24001650

08001c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c24:	4b3e      	ldr	r3, [pc, #248]	@ (8001d20 <SystemInit+0x100>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c2a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d20 <SystemInit+0x100>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c34:	4b3b      	ldr	r3, [pc, #236]	@ (8001d24 <SystemInit+0x104>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	2b06      	cmp	r3, #6
 8001c3e:	d807      	bhi.n	8001c50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c40:	4b38      	ldr	r3, [pc, #224]	@ (8001d24 <SystemInit+0x104>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 030f 	bic.w	r3, r3, #15
 8001c48:	4a36      	ldr	r2, [pc, #216]	@ (8001d24 <SystemInit+0x104>)
 8001c4a:	f043 0307 	orr.w	r3, r3, #7
 8001c4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c50:	4b35      	ldr	r3, [pc, #212]	@ (8001d28 <SystemInit+0x108>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a34      	ldr	r2, [pc, #208]	@ (8001d28 <SystemInit+0x108>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c5c:	4b32      	ldr	r3, [pc, #200]	@ (8001d28 <SystemInit+0x108>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c62:	4b31      	ldr	r3, [pc, #196]	@ (8001d28 <SystemInit+0x108>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4930      	ldr	r1, [pc, #192]	@ (8001d28 <SystemInit+0x108>)
 8001c68:	4b30      	ldr	r3, [pc, #192]	@ (8001d2c <SystemInit+0x10c>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d24 <SystemInit+0x104>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d24 <SystemInit+0x104>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 030f 	bic.w	r3, r3, #15
 8001c82:	4a28      	ldr	r2, [pc, #160]	@ (8001d24 <SystemInit+0x104>)
 8001c84:	f043 0307 	orr.w	r3, r3, #7
 8001c88:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c8a:	4b27      	ldr	r3, [pc, #156]	@ (8001d28 <SystemInit+0x108>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c90:	4b25      	ldr	r3, [pc, #148]	@ (8001d28 <SystemInit+0x108>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c96:	4b24      	ldr	r3, [pc, #144]	@ (8001d28 <SystemInit+0x108>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c9c:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <SystemInit+0x108>)
 8001c9e:	4a24      	ldr	r2, [pc, #144]	@ (8001d30 <SystemInit+0x110>)
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ca2:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <SystemInit+0x108>)
 8001ca4:	4a23      	ldr	r2, [pc, #140]	@ (8001d34 <SystemInit+0x114>)
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d28 <SystemInit+0x108>)
 8001caa:	4a23      	ldr	r2, [pc, #140]	@ (8001d38 <SystemInit+0x118>)
 8001cac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cae:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <SystemInit+0x108>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <SystemInit+0x108>)
 8001cb6:	4a20      	ldr	r2, [pc, #128]	@ (8001d38 <SystemInit+0x118>)
 8001cb8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001cba:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <SystemInit+0x108>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <SystemInit+0x108>)
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d38 <SystemInit+0x118>)
 8001cc4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001cc6:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <SystemInit+0x108>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ccc:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <SystemInit+0x108>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a15      	ldr	r2, [pc, #84]	@ (8001d28 <SystemInit+0x108>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <SystemInit+0x108>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001cde:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <SystemInit+0x108>)
 8001ce0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d113      	bne.n	8001d14 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001cec:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <SystemInit+0x108>)
 8001cee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <SystemInit+0x108>)
 8001cf4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cf8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <SystemInit+0x11c>)
 8001cfe:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001d02:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <SystemInit+0x108>)
 8001d06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d0a:	4a07      	ldr	r2, [pc, #28]	@ (8001d28 <SystemInit+0x108>)
 8001d0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d10:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00
 8001d24:	52002000 	.word	0x52002000
 8001d28:	58024400 	.word	0x58024400
 8001d2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d30:	02020200 	.word	0x02020200
 8001d34:	01ff0000 	.word	0x01ff0000
 8001d38:	01010280 	.word	0x01010280
 8001d3c:	52004000 	.word	0x52004000

08001d40 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <ExitRun0Mode+0x2c>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4a08      	ldr	r2, [pc, #32]	@ (8001d6c <ExitRun0Mode+0x2c>)
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001d50:	bf00      	nop
 8001d52:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <ExitRun0Mode+0x2c>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f9      	beq.n	8001d52 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	58024800 	.word	0x58024800

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d70:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001dac <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001d74:	f7ff ffe4 	bl	8001d40 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d78:	f7ff ff52 	bl	8001c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7e:	490d      	ldr	r1, [pc, #52]	@ (8001db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d80:	4a0d      	ldr	r2, [pc, #52]	@ (8001db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d94:	4c0a      	ldr	r4, [pc, #40]	@ (8001dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da2:	f00f f843 	bl	8010e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da6:	f7ff fa95 	bl	80012d4 <main>
  bx  lr
 8001daa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dac:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001db0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001db4:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8001db8:	0801176c 	.word	0x0801176c
  ldr r2, =_sbss
 8001dbc:	24000028 	.word	0x24000028
  ldr r4, =_ebss
 8001dc0:	24001e24 	.word	0x24001e24

08001dc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC3_IRQHandler>
	...

08001dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f000 f9c9 	bl	8002166 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dd4:	f001 fcb0 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <HAL_Init+0x68>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	4913      	ldr	r1, [pc, #76]	@ (8001e34 <HAL_Init+0x6c>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001df2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <HAL_Init+0x68>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8001e34 <HAL_Init+0x6c>)
 8001dfc:	5cd3      	ldrb	r3, [r2, r3]
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	4a0b      	ldr	r2, [pc, #44]	@ (8001e38 <HAL_Init+0x70>)
 8001e0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e3c <HAL_Init+0x74>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e12:	200f      	movs	r0, #15
 8001e14:	f7ff fe48 	bl	8001aa8 <HAL_InitTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e002      	b.n	8001e28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e22:	f7ff fd53 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	58024400 	.word	0x58024400
 8001e34:	080112b8 	.word	0x080112b8
 8001e38:	24000004 	.word	0x24000004
 8001e3c:	24000000 	.word	0x24000000

08001e40 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
 8001e44:	4b25      	ldr	r3, [pc, #148]	@ (8001edc <HAL_DeInit+0x9c>)
 8001e46:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <HAL_DeInit+0xa0>)
 8001e48:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001e4a:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <HAL_DeInit+0x9c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
 8001e50:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <HAL_DeInit+0x9c>)
 8001e52:	4a24      	ldr	r2, [pc, #144]	@ (8001ee4 <HAL_DeInit+0xa4>)
 8001e54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001e58:	4b20      	ldr	r3, [pc, #128]	@ (8001edc <HAL_DeInit+0x9c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
 8001e60:	4b1e      	ldr	r3, [pc, #120]	@ (8001edc <HAL_DeInit+0x9c>)
 8001e62:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <HAL_DeInit+0xa8>)
 8001e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001e68:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <HAL_DeInit+0x9c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
 8001e70:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <HAL_DeInit+0x9c>)
 8001e72:	4a1e      	ldr	r2, [pc, #120]	@ (8001eec <HAL_DeInit+0xac>)
 8001e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
 8001e78:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <HAL_DeInit+0x9c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_RCC_APB3_FORCE_RESET();
 8001e80:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <HAL_DeInit+0x9c>)
 8001e82:	2208      	movs	r2, #8
 8001e84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
 8001e88:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <HAL_DeInit+0x9c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
 8001e90:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_DeInit+0x9c>)
 8001e92:	4a17      	ldr	r2, [pc, #92]	@ (8001ef0 <HAL_DeInit+0xb0>)
 8001e94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
 8001e98:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <HAL_DeInit+0x9c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <HAL_DeInit+0x9c>)
 8001ea2:	4a14      	ldr	r2, [pc, #80]	@ (8001ef4 <HAL_DeInit+0xb4>)
 8001ea4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <HAL_DeInit+0x9c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

   __HAL_RCC_APB2_FORCE_RESET();
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_DeInit+0x9c>)
 8001eb2:	4a11      	ldr	r2, [pc, #68]	@ (8001ef8 <HAL_DeInit+0xb8>)
 8001eb4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_DeInit+0x9c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  __HAL_RCC_APB4_FORCE_RESET();
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_DeInit+0x9c>)
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8001efc <HAL_DeInit+0xbc>)
 8001ec4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8001ec8:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <HAL_DeInit+0x9c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001ed0:	f000 f816 	bl	8001f00 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	58024400 	.word	0x58024400
 8001ee0:	00e95011 	.word	0x00e95011
 8001ee4:	02008023 	.word	0x02008023
 8001ee8:	00030271 	.word	0x00030271
 8001eec:	032806ff 	.word	0x032806ff
 8001ef0:	eaffc3ff 	.word	0xeaffc3ff
 8001ef4:	03000136 	.word	0x03000136
 8001ef8:	405730f3 	.word	0x405730f3
 8001efc:	0420deaa 	.word	0x0420deaa

08001f00 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_IncTick+0x20>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_IncTick+0x24>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <HAL_IncTick+0x24>)
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	2400000c 	.word	0x2400000c
 8001f34:	2400169c 	.word	0x2400169c

08001f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	@ (8001f4c <HAL_GetTick+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	2400169c 	.word	0x2400169c

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff ffee 	bl	8001f38 <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f76:	bf00      	nop
 8001f78:	f7ff ffde 	bl	8001f38 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2400000c 	.word	0x2400000c

08001f98 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001fa2:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	4904      	ldr	r1, [pc, #16]	@ (8001fc0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	58000400 	.word	0x58000400

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <__NVIC_SetPriorityGrouping+0x40>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <__NVIC_SetPriorityGrouping+0x40>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00
 8002008:	05fa0000 	.word	0x05fa0000

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4907      	ldr	r1, [pc, #28]	@ (8002060 <__NVIC_EnableIRQ+0x38>)
 8002042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000e100 	.word	0xe000e100

08002064 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800206e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002072:	2b00      	cmp	r3, #0
 8002074:	db12      	blt.n	800209c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	490a      	ldr	r1, [pc, #40]	@ (80020a8 <__NVIC_DisableIRQ+0x44>)
 800207e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2001      	movs	r0, #1
 8002086:	fa00 f202 	lsl.w	r2, r0, r2
 800208a:	3320      	adds	r3, #32
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002090:	f3bf 8f4f 	dsb	sy
}
 8002094:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002096:	f3bf 8f6f 	isb	sy
}
 800209a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	@ (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	@ (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	@ 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	@ 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ff28 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800218a:	f7ff ff3f 	bl	800200c <__NVIC_GetPriorityGrouping>
 800218e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	6978      	ldr	r0, [r7, #20]
 8002196:	f7ff ffb3 	bl	8002100 <NVIC_EncodePriority>
 800219a:	4602      	mov	r2, r0
 800219c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff82 	bl	80020ac <__NVIC_SetPriority>
}
 80021a8:	bf00      	nop
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff32 	bl	8002028 <__NVIC_EnableIRQ>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff42 	bl	8002064 <__NVIC_DisableIRQ>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021ec:	f3bf 8f5f 	dmb	sy
}
 80021f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021f2:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <HAL_MPU_Disable+0x28>)
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	4a06      	ldr	r2, [pc, #24]	@ (8002210 <HAL_MPU_Disable+0x28>)
 80021f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021fc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021fe:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <HAL_MPU_Disable+0x2c>)
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00
 8002214:	e000ed90 	.word	0xe000ed90

08002218 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002220:	4a0b      	ldr	r2, [pc, #44]	@ (8002250 <HAL_MPU_Enable+0x38>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800222a:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <HAL_MPU_Enable+0x3c>)
 800222c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222e:	4a09      	ldr	r2, [pc, #36]	@ (8002254 <HAL_MPU_Enable+0x3c>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002234:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002236:	f3bf 8f4f 	dsb	sy
}
 800223a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800223c:	f3bf 8f6f 	isb	sy
}
 8002240:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000ed90 	.word	0xe000ed90
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	785a      	ldrb	r2, [r3, #1]
 8002264:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <HAL_MPU_ConfigRegion+0x7c>)
 8002266:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002268:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <HAL_MPU_ConfigRegion+0x7c>)
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	4a19      	ldr	r2, [pc, #100]	@ (80022d4 <HAL_MPU_ConfigRegion+0x7c>)
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002274:	4a17      	ldr	r2, [pc, #92]	@ (80022d4 <HAL_MPU_ConfigRegion+0x7c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7b1b      	ldrb	r3, [r3, #12]
 8002280:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7adb      	ldrb	r3, [r3, #11]
 8002286:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002288:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7a9b      	ldrb	r3, [r3, #10]
 800228e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002290:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7b5b      	ldrb	r3, [r3, #13]
 8002296:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002298:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7b9b      	ldrb	r3, [r3, #14]
 800229e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7bdb      	ldrb	r3, [r3, #15]
 80022a6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7a5b      	ldrb	r3, [r3, #9]
 80022ae:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7a1b      	ldrb	r3, [r3, #8]
 80022b6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022b8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022c0:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022c2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022c4:	6113      	str	r3, [r2, #16]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed90 	.word	0xe000ed90

080022d8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	@ 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80022ec:	2308      	movs	r3, #8
 80022ee:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022f0:	4b2f      	ldr	r3, [pc, #188]	@ (80023b0 <HAL_FLASH_Program+0xd8>)
 80022f2:	7d1b      	ldrb	r3, [r3, #20]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_FLASH_Program+0x24>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e054      	b.n	80023a6 <HAL_FLASH_Program+0xce>
 80022fc:	4b2c      	ldr	r3, [pc, #176]	@ (80023b0 <HAL_FLASH_Program+0xd8>)
 80022fe:	2201      	movs	r2, #1
 8002300:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002308:	d316      	bcc.n	8002338 <HAL_FLASH_Program+0x60>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8002310:	d212      	bcs.n	8002338 <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8002312:	2301      	movs	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8002316:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002318:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <HAL_FLASH_Program+0xd8>)
 800231a:	2200      	movs	r2, #0
 800231c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800231e:	6979      	ldr	r1, [r7, #20]
 8002320:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002324:	f000 f882 	bl	800242c <FLASH_WaitForLastOperation>
 8002328:	4603      	mov	r3, r0
 800232a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 800232e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002332:	2b00      	cmp	r3, #0
 8002334:	d132      	bne.n	800239c <HAL_FLASH_Program+0xc4>
 8002336:	e001      	b.n	800233c <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e034      	b.n	80023a6 <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800233c:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <HAL_FLASH_Program+0xdc>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <HAL_FLASH_Program+0xdc>)
 8002342:	f043 0302 	orr.w	r3, r3, #2
 8002346:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 8002348:	f3bf 8f6f 	isb	sy
}
 800234c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800234e:	f3bf 8f4f 	dsb	sy
}
 8002352:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	3304      	adds	r3, #4
 8002360:	623b      	str	r3, [r7, #32]
        src_addr++;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	61fb      	str	r3, [r7, #28]
        row_index--;
 8002368:	7efb      	ldrb	r3, [r7, #27]
 800236a:	3b01      	subs	r3, #1
 800236c:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800236e:	7efb      	ldrb	r3, [r7, #27]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ef      	bne.n	8002354 <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
 8002374:	f3bf 8f6f 	isb	sy
}
 8002378:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800237a:	f3bf 8f4f 	dsb	sy
}
 800237e:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8002380:	6979      	ldr	r1, [r7, #20]
 8002382:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002386:	f000 f851 	bl	800242c <FLASH_WaitForLastOperation>
 800238a:	4603      	mov	r3, r0
 800238c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8002390:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <HAL_FLASH_Program+0xdc>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4a07      	ldr	r2, [pc, #28]	@ (80023b4 <HAL_FLASH_Program+0xdc>)
 8002396:	f023 0302 	bic.w	r3, r3, #2
 800239a:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800239c:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <HAL_FLASH_Program+0xd8>)
 800239e:	2200      	movs	r2, #0
 80023a0:	751a      	strb	r2, [r3, #20]

  return status;
 80023a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3728      	adds	r7, #40	@ 0x28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	240016a0 	.word	0x240016a0
 80023b4:	52002000 	.word	0x52002000

080023b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_FLASH_Unlock+0x38>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00d      	beq.n	80023e4 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80023c8:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <HAL_FLASH_Unlock+0x38>)
 80023ca:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <HAL_FLASH_Unlock+0x3c>)
 80023cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <HAL_FLASH_Unlock+0x38>)
 80023d0:	4a09      	ldr	r2, [pc, #36]	@ (80023f8 <HAL_FLASH_Unlock+0x40>)
 80023d2:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_FLASH_Unlock+0x38>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	52002000 	.word	0x52002000
 80023f4:	45670123 	.word	0x45670123
 80023f8:	cdef89ab 	.word	0xcdef89ab

080023fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <HAL_FLASH_Lock+0x2c>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4a08      	ldr	r2, [pc, #32]	@ (8002428 <HAL_FLASH_Lock+0x2c>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_FLASH_Lock+0x2c>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	52002000 	.word	0x52002000

0800242c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8002436:	2304      	movs	r3, #4
 8002438:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800243e:	f7ff fd7b 	bl	8001f38 <HAL_GetTick>
 8002442:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8002444:	e010      	b.n	8002468 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d00c      	beq.n	8002468 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800244e:	f7ff fd73 	bl	8001f38 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	d302      	bcc.n	8002464 <FLASH_WaitForLastOperation+0x38>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e02d      	b.n	80024c4 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8002468:	4b18      	ldr	r3, [pc, #96]	@ (80024cc <FLASH_WaitForLastOperation+0xa0>)
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	429a      	cmp	r2, r3
 8002474:	d0e7      	beq.n	8002446 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d104      	bne.n	8002486 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800247c:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <FLASH_WaitForLastOperation+0xa0>)
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <FLASH_WaitForLastOperation+0xa4>)
 8002482:	4013      	ands	r3, r2
 8002484:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8002490:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <FLASH_WaitForLastOperation+0xa8>)
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <FLASH_WaitForLastOperation+0xa8>)
 800249a:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800249c:	4a0b      	ldr	r2, [pc, #44]	@ (80024cc <FLASH_WaitForLastOperation+0xa0>)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00e      	b.n	80024c4 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d10a      	bne.n	80024c2 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80024ac:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <FLASH_WaitForLastOperation+0xa0>)
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b8:	d103      	bne.n	80024c2 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80024ba:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <FLASH_WaitForLastOperation+0xa0>)
 80024bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024c0:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	52002000 	.word	0x52002000
 80024d0:	17ee0000 	.word	0x17ee0000
 80024d4:	240016a0 	.word	0x240016a0

080024d8 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <FLASH_Erase_Sector+0x44>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <FLASH_Erase_Sector+0x44>)
 80024f4:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 80024f8:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <FLASH_Erase_Sector+0x44>)
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	0219      	lsls	r1, r3, #8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	430b      	orrs	r3, r1
 8002506:	4313      	orrs	r3, r2
 8002508:	4a04      	ldr	r2, [pc, #16]	@ (800251c <FLASH_Erase_Sector+0x44>)
 800250a:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800250e:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	52002000 	.word	0x52002000

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	@ 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800252e:	4b86      	ldr	r3, [pc, #536]	@ (8002748 <HAL_GPIO_Init+0x228>)
 8002530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002532:	e18c      	b.n	800284e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 817e 	beq.w	8002848 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d005      	beq.n	8002564 <HAL_GPIO_Init+0x44>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d130      	bne.n	80025c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800259a:	2201      	movs	r2, #1
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 0201 	and.w	r2, r3, #1
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d017      	beq.n	8002602 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	2203      	movs	r2, #3
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d123      	bne.n	8002656 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	08da      	lsrs	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3208      	adds	r2, #8
 8002616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	220f      	movs	r2, #15
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	08da      	lsrs	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3208      	adds	r2, #8
 8002650:	69b9      	ldr	r1, [r7, #24]
 8002652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0203 	and.w	r2, r3, #3
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80d8 	beq.w	8002848 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002698:	4b2c      	ldr	r3, [pc, #176]	@ (800274c <HAL_GPIO_Init+0x22c>)
 800269a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800269e:	4a2b      	ldr	r2, [pc, #172]	@ (800274c <HAL_GPIO_Init+0x22c>)
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026a8:	4b28      	ldr	r3, [pc, #160]	@ (800274c <HAL_GPIO_Init+0x22c>)
 80026aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b6:	4a26      	ldr	r2, [pc, #152]	@ (8002750 <HAL_GPIO_Init+0x230>)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002754 <HAL_GPIO_Init+0x234>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d04a      	beq.n	8002778 <HAL_GPIO_Init+0x258>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002758 <HAL_GPIO_Init+0x238>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d02b      	beq.n	8002742 <HAL_GPIO_Init+0x222>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a1b      	ldr	r2, [pc, #108]	@ (800275c <HAL_GPIO_Init+0x23c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d025      	beq.n	800273e <HAL_GPIO_Init+0x21e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002760 <HAL_GPIO_Init+0x240>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01f      	beq.n	800273a <HAL_GPIO_Init+0x21a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a19      	ldr	r2, [pc, #100]	@ (8002764 <HAL_GPIO_Init+0x244>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d019      	beq.n	8002736 <HAL_GPIO_Init+0x216>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a18      	ldr	r2, [pc, #96]	@ (8002768 <HAL_GPIO_Init+0x248>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_GPIO_Init+0x212>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a17      	ldr	r2, [pc, #92]	@ (800276c <HAL_GPIO_Init+0x24c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00d      	beq.n	800272e <HAL_GPIO_Init+0x20e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a16      	ldr	r2, [pc, #88]	@ (8002770 <HAL_GPIO_Init+0x250>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <HAL_GPIO_Init+0x20a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a15      	ldr	r2, [pc, #84]	@ (8002774 <HAL_GPIO_Init+0x254>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_GPIO_Init+0x206>
 8002722:	2309      	movs	r3, #9
 8002724:	e029      	b.n	800277a <HAL_GPIO_Init+0x25a>
 8002726:	230a      	movs	r3, #10
 8002728:	e027      	b.n	800277a <HAL_GPIO_Init+0x25a>
 800272a:	2307      	movs	r3, #7
 800272c:	e025      	b.n	800277a <HAL_GPIO_Init+0x25a>
 800272e:	2306      	movs	r3, #6
 8002730:	e023      	b.n	800277a <HAL_GPIO_Init+0x25a>
 8002732:	2305      	movs	r3, #5
 8002734:	e021      	b.n	800277a <HAL_GPIO_Init+0x25a>
 8002736:	2304      	movs	r3, #4
 8002738:	e01f      	b.n	800277a <HAL_GPIO_Init+0x25a>
 800273a:	2303      	movs	r3, #3
 800273c:	e01d      	b.n	800277a <HAL_GPIO_Init+0x25a>
 800273e:	2302      	movs	r3, #2
 8002740:	e01b      	b.n	800277a <HAL_GPIO_Init+0x25a>
 8002742:	2301      	movs	r3, #1
 8002744:	e019      	b.n	800277a <HAL_GPIO_Init+0x25a>
 8002746:	bf00      	nop
 8002748:	58000080 	.word	0x58000080
 800274c:	58024400 	.word	0x58024400
 8002750:	58000400 	.word	0x58000400
 8002754:	58020000 	.word	0x58020000
 8002758:	58020400 	.word	0x58020400
 800275c:	58020800 	.word	0x58020800
 8002760:	58020c00 	.word	0x58020c00
 8002764:	58021000 	.word	0x58021000
 8002768:	58021400 	.word	0x58021400
 800276c:	58021800 	.word	0x58021800
 8002770:	58021c00 	.word	0x58021c00
 8002774:	58022400 	.word	0x58022400
 8002778:	2300      	movs	r3, #0
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	f002 0203 	and.w	r2, r2, #3
 8002780:	0092      	lsls	r2, r2, #2
 8002782:	4093      	lsls	r3, r2
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278a:	4938      	ldr	r1, [pc, #224]	@ (800286c <HAL_GPIO_Init+0x34c>)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	3301      	adds	r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	f47f ae6b 	bne.w	8002534 <HAL_GPIO_Init+0x14>
  }
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	3724      	adds	r7, #36	@ 0x24
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	58000400 	.word	0x58000400

08002870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e001      	b.n	8002892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
 80028ac:	4613      	mov	r3, r2
 80028ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028b0:	787b      	ldrb	r3, [r7, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028bc:	e003      	b.n	80028c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028be:	887b      	ldrh	r3, [r7, #2]
 80028c0:	041a      	lsls	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	619a      	str	r2, [r3, #24]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028e4:	887a      	ldrh	r2, [r7, #2]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4013      	ands	r3, r2
 80028ea:	041a      	lsls	r2, r3, #16
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	887b      	ldrh	r3, [r7, #2]
 80028f2:	400b      	ands	r3, r1
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	619a      	str	r2, [r3, #24]
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002914:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002920:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	4618      	mov	r0, r3
 800292e:	f000 f804 	bl	800293a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002958:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <HAL_PWREx_ConfigSupply+0x70>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b04      	cmp	r3, #4
 8002962:	d00a      	beq.n	800297a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002964:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <HAL_PWREx_ConfigSupply+0x70>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e01f      	b.n	80029b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e01d      	b.n	80029b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800297a:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <HAL_PWREx_ConfigSupply+0x70>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f023 0207 	bic.w	r2, r3, #7
 8002982:	490f      	ldr	r1, [pc, #60]	@ (80029c0 <HAL_PWREx_ConfigSupply+0x70>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4313      	orrs	r3, r2
 8002988:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800298a:	f7ff fad5 	bl	8001f38 <HAL_GetTick>
 800298e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002990:	e009      	b.n	80029a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002992:	f7ff fad1 	bl	8001f38 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029a0:	d901      	bls.n	80029a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e007      	b.n	80029b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_PWREx_ConfigSupply+0x70>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029b2:	d1ee      	bne.n	8002992 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	58024800 	.word	0x58024800

080029c4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 80029ca:	4b89      	ldr	r3, [pc, #548]	@ (8002bf0 <HAL_RCC_DeInit+0x22c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d80f      	bhi.n	80029f6 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 80029d6:	4b86      	ldr	r3, [pc, #536]	@ (8002bf0 <HAL_RCC_DeInit+0x22c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 030f 	bic.w	r3, r3, #15
 80029de:	4a84      	ldr	r2, [pc, #528]	@ (8002bf0 <HAL_RCC_DeInit+0x22c>)
 80029e0:	f043 0307 	orr.w	r3, r3, #7
 80029e4:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 80029e6:	4b82      	ldr	r3, [pc, #520]	@ (8002bf0 <HAL_RCC_DeInit+0x22c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	2b07      	cmp	r3, #7
 80029f0:	d001      	beq.n	80029f6 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0f7      	b.n	8002be6 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80029f6:	f7ff fa9f 	bl	8001f38 <HAL_GetTick>
 80029fa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80029fc:	4b7d      	ldr	r3, [pc, #500]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a7c      	ldr	r2, [pc, #496]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7ff fa95 	bl	8001f38 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0e4      	b.n	8002be6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a1c:	4b75      	ldr	r3, [pc, #468]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8002a28:	4b72      	ldr	r3, [pc, #456]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4a71      	ldr	r2, [pc, #452]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002a2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a32:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002a34:	4b6f      	ldr	r3, [pc, #444]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8002a3a:	4b6f      	ldr	r3, [pc, #444]	@ (8002bf8 <HAL_RCC_DeInit+0x234>)
 8002a3c:	4a6f      	ldr	r2, [pc, #444]	@ (8002bfc <HAL_RCC_DeInit+0x238>)
 8002a3e:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 8002a40:	4b6f      	ldr	r3, [pc, #444]	@ (8002c00 <HAL_RCC_DeInit+0x23c>)
 8002a42:	4a6e      	ldr	r2, [pc, #440]	@ (8002bfc <HAL_RCC_DeInit+0x238>)
 8002a44:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a46:	4b6f      	ldr	r3, [pc, #444]	@ (8002c04 <HAL_RCC_DeInit+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f82c 	bl	8001aa8 <HAL_InitTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e0c5      	b.n	8002be6 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a5a:	f7ff fa6d 	bl	8001f38 <HAL_GetTick>
 8002a5e:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a62:	f7ff fa69 	bl	8001f38 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e0b6      	b.n	8002be6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002a78:	4b5e      	ldr	r3, [pc, #376]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ee      	bne.n	8002a62 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a84:	f7ff fa58 	bl	8001f38 <HAL_GetTick>
 8002a88:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 8002a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4959      	ldr	r1, [pc, #356]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002a90:	4b5d      	ldr	r3, [pc, #372]	@ (8002c08 <HAL_RCC_DeInit+0x244>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a98:	f7ff fa4e 	bl	8001f38 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	@ 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e09d      	b.n	8002be6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aaa:	4b52      	ldr	r3, [pc, #328]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ab6:	f7ff fa3f 	bl	8001f38 <HAL_GetTick>
 8002aba:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8002abc:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7ff fa35 	bl	8001f38 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e084      	b.n	8002be6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002adc:	4b45      	ldr	r3, [pc, #276]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ae8:	f7ff fa26 	bl	8001f38 <HAL_GetTick>
 8002aec:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8002aee:	4b41      	ldr	r3, [pc, #260]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a40      	ldr	r2, [pc, #256]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002af4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002af8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7ff fa1c 	bl	8001f38 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e06b      	b.n	8002be6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002b0e:	4b39      	ldr	r3, [pc, #228]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002b1a:	f7ff fa0d 	bl	8001f38 <HAL_GetTick>
 8002b1e:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8002b20:	4b34      	ldr	r3, [pc, #208]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a33      	ldr	r2, [pc, #204]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b2a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7ff fa03 	bl	8001f38 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e052      	b.n	8002be6 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8002b40:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 8002b4c:	4b29      	ldr	r3, [pc, #164]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8002b52:	4b28      	ldr	r3, [pc, #160]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 8002b58:	4b26      	ldr	r3, [pc, #152]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 8002b5e:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b60:	4a2a      	ldr	r2, [pc, #168]	@ (8002c0c <HAL_RCC_DeInit+0x248>)
 8002b62:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8002b64:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b66:	4a2a      	ldr	r2, [pc, #168]	@ (8002c10 <HAL_RCC_DeInit+0x24c>)
 8002b68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 8002b6a:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b6c:	4a29      	ldr	r2, [pc, #164]	@ (8002c14 <HAL_RCC_DeInit+0x250>)
 8002b6e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8002b70:	4b20      	ldr	r3, [pc, #128]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8002b76:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b78:	4a26      	ldr	r2, [pc, #152]	@ (8002c14 <HAL_RCC_DeInit+0x250>)
 8002b7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8002b82:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b84:	4a23      	ldr	r2, [pc, #140]	@ (8002c14 <HAL_RCC_DeInit+0x250>)
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8002b88:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002b8e:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a18      	ldr	r2, [pc, #96]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002b9a:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002ba0:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002ba8:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002baa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002bae:	4a11      	ldr	r2, [pc, #68]	@ (8002bf4 <HAL_RCC_DeInit+0x230>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb4:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <HAL_RCC_DeInit+0x22c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00f      	beq.n	8002be4 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <HAL_RCC_DeInit+0x22c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 030f 	bic.w	r3, r3, #15
 8002bcc:	4a08      	ldr	r2, [pc, #32]	@ (8002bf0 <HAL_RCC_DeInit+0x22c>)
 8002bce:	f043 0307 	orr.w	r3, r3, #7
 8002bd2:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_RCC_DeInit+0x22c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	2b07      	cmp	r3, #7
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	52002000 	.word	0x52002000
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	24000000 	.word	0x24000000
 8002bfc:	03d09000 	.word	0x03d09000
 8002c00:	24000004 	.word	0x24000004
 8002c04:	24000008 	.word	0x24000008
 8002c08:	fff6ed45 	.word	0xfff6ed45
 8002c0c:	02020200 	.word	0x02020200
 8002c10:	01ff0000 	.word	0x01ff0000
 8002c14:	01010280 	.word	0x01010280

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	@ 0x30
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e3c8      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c38:	4b88      	ldr	r3, [pc, #544]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c42:	4b86      	ldr	r3, [pc, #536]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d007      	beq.n	8002c5e <HAL_RCC_OscConfig+0x46>
 8002c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c50:	2b18      	cmp	r3, #24
 8002c52:	d110      	bne.n	8002c76 <HAL_RCC_OscConfig+0x5e>
 8002c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d10b      	bne.n	8002c76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d06c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x12c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d168      	bne.n	8002d44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e3a2      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x76>
 8002c80:	4b76      	ldr	r3, [pc, #472]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a75      	ldr	r2, [pc, #468]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e02e      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x98>
 8002c96:	4b71      	ldr	r3, [pc, #452]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a70      	ldr	r2, [pc, #448]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b6e      	ldr	r3, [pc, #440]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002ca8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01d      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xbc>
 8002cba:	4b68      	ldr	r3, [pc, #416]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a67      	ldr	r2, [pc, #412]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b65      	ldr	r3, [pc, #404]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a64      	ldr	r2, [pc, #400]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002cd4:	4b61      	ldr	r3, [pc, #388]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a60      	ldr	r2, [pc, #384]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7ff f920 	bl	8001f38 <HAL_GetTick>
 8002cf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7ff f91c 	bl	8001f38 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	@ 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e356      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d0e:	4b53      	ldr	r3, [pc, #332]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xe4>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7ff f90c 	bl	8001f38 <HAL_GetTick>
 8002d20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7ff f908 	bl	8001f38 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	@ 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e342      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d36:	4b49      	ldr	r3, [pc, #292]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x10c>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 808c 	beq.w	8002e6c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d54:	4b41      	ldr	r3, [pc, #260]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d62:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_RCC_OscConfig+0x162>
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	2b18      	cmp	r3, #24
 8002d6e:	d137      	bne.n	8002de0 <HAL_RCC_OscConfig+0x1c8>
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d132      	bne.n	8002de0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d7a:	4b38      	ldr	r3, [pc, #224]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_RCC_OscConfig+0x17a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e314      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d92:	4b32      	ldr	r3, [pc, #200]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 0219 	bic.w	r2, r3, #25
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	492f      	ldr	r1, [pc, #188]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7ff f8c8 	bl	8001f38 <HAL_GetTick>
 8002da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dac:	f7ff f8c4 	bl	8001f38 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e2fe      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dbe:	4b27      	ldr	r3, [pc, #156]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dca:	4b24      	ldr	r3, [pc, #144]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	061b      	lsls	r3, r3, #24
 8002dd8:	4920      	ldr	r1, [pc, #128]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dde:	e045      	b.n	8002e6c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d026      	beq.n	8002e36 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002de8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f023 0219 	bic.w	r2, r3, #25
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4919      	ldr	r1, [pc, #100]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7ff f89d 	bl	8001f38 <HAL_GetTick>
 8002dfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e02:	f7ff f899 	bl	8001f38 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e2d3      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e14:	4b11      	ldr	r3, [pc, #68]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	490b      	ldr	r1, [pc, #44]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
 8002e34:	e01a      	b.n	8002e6c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e36:	4b09      	ldr	r3, [pc, #36]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a08      	ldr	r2, [pc, #32]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7ff f879 	bl	8001f38 <HAL_GetTick>
 8002e46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4a:	f7ff f875 	bl	8001f38 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d903      	bls.n	8002e60 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e2af      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
 8002e5c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e60:	4b96      	ldr	r3, [pc, #600]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d06a      	beq.n	8002f4e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e78:	4b90      	ldr	r3, [pc, #576]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e80:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e82:	4b8e      	ldr	r3, [pc, #568]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e86:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d007      	beq.n	8002e9e <HAL_RCC_OscConfig+0x286>
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b18      	cmp	r3, #24
 8002e92:	d11b      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2b4>
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d116      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e9e:	4b87      	ldr	r3, [pc, #540]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x29e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	2b80      	cmp	r3, #128	@ 0x80
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e282      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002eb6:	4b81      	ldr	r3, [pc, #516]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	061b      	lsls	r3, r3, #24
 8002ec4:	497d      	ldr	r1, [pc, #500]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002eca:	e040      	b.n	8002f4e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d023      	beq.n	8002f1c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ed4:	4b79      	ldr	r3, [pc, #484]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a78      	ldr	r2, [pc, #480]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7ff f82a 	bl	8001f38 <HAL_GetTick>
 8002ee4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ee8:	f7ff f826 	bl	8001f38 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e260      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002efa:	4b70      	ldr	r3, [pc, #448]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f06:	4b6d      	ldr	r3, [pc, #436]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	061b      	lsls	r3, r3, #24
 8002f14:	4969      	ldr	r1, [pc, #420]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60cb      	str	r3, [r1, #12]
 8002f1a:	e018      	b.n	8002f4e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f1c:	4b67      	ldr	r3, [pc, #412]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a66      	ldr	r2, [pc, #408]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7ff f806 	bl	8001f38 <HAL_GetTick>
 8002f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f30:	f7ff f802 	bl	8001f38 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e23c      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f42:	4b5e      	ldr	r3, [pc, #376]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d036      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d019      	beq.n	8002f96 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b56      	ldr	r3, [pc, #344]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f66:	4a55      	ldr	r2, [pc, #340]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6e:	f7fe ffe3 	bl	8001f38 <HAL_GetTick>
 8002f72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f76:	f7fe ffdf 	bl	8001f38 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e219      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f88:	4b4c      	ldr	r3, [pc, #304]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x35e>
 8002f94:	e018      	b.n	8002fc8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f96:	4b49      	ldr	r3, [pc, #292]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f9a:	4a48      	ldr	r2, [pc, #288]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fe ffc9 	bl	8001f38 <HAL_GetTick>
 8002fa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002faa:	f7fe ffc5 	bl	8001f38 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e1ff      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f0      	bne.n	8002faa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d036      	beq.n	8003042 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d019      	beq.n	8003010 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fdc:	4b37      	ldr	r3, [pc, #220]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a36      	ldr	r2, [pc, #216]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8002fe2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fe8:	f7fe ffa6 	bl	8001f38 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff0:	f7fe ffa2 	bl	8001f38 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e1dc      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003002:	4b2e      	ldr	r3, [pc, #184]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x3d8>
 800300e:	e018      	b.n	8003042 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003010:	4b2a      	ldr	r3, [pc, #168]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a29      	ldr	r2, [pc, #164]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8003016:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800301a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800301c:	f7fe ff8c 	bl	8001f38 <HAL_GetTick>
 8003020:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003024:	f7fe ff88 	bl	8001f38 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e1c2      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003036:	4b21      	ldr	r3, [pc, #132]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 8086 	beq.w	800315c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003050:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCC_OscConfig+0x4a8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1a      	ldr	r2, [pc, #104]	@ (80030c0 <HAL_RCC_OscConfig+0x4a8>)
 8003056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800305a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800305c:	f7fe ff6c 	bl	8001f38 <HAL_GetTick>
 8003060:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003064:	f7fe ff68 	bl	8001f38 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	@ 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e1a2      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003076:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <HAL_RCC_OscConfig+0x4a8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d106      	bne.n	8003098 <HAL_RCC_OscConfig+0x480>
 800308a:	4b0c      	ldr	r3, [pc, #48]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308e:	4a0b      	ldr	r2, [pc, #44]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6713      	str	r3, [r2, #112]	@ 0x70
 8003096:	e032      	b.n	80030fe <HAL_RCC_OscConfig+0x4e6>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d111      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4ac>
 80030a0:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a4:	4a05      	ldr	r2, [pc, #20]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ac:	4b03      	ldr	r3, [pc, #12]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b0:	4a02      	ldr	r2, [pc, #8]	@ (80030bc <HAL_RCC_OscConfig+0x4a4>)
 80030b2:	f023 0304 	bic.w	r3, r3, #4
 80030b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b8:	e021      	b.n	80030fe <HAL_RCC_OscConfig+0x4e6>
 80030ba:	bf00      	nop
 80030bc:	58024400 	.word	0x58024400
 80030c0:	58024800 	.word	0x58024800
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d10c      	bne.n	80030e6 <HAL_RCC_OscConfig+0x4ce>
 80030cc:	4b83      	ldr	r3, [pc, #524]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80030ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d0:	4a82      	ldr	r2, [pc, #520]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80030d2:	f043 0304 	orr.w	r3, r3, #4
 80030d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d8:	4b80      	ldr	r3, [pc, #512]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030dc:	4a7f      	ldr	r2, [pc, #508]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e4:	e00b      	b.n	80030fe <HAL_RCC_OscConfig+0x4e6>
 80030e6:	4b7d      	ldr	r3, [pc, #500]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ea:	4a7c      	ldr	r2, [pc, #496]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f2:	4b7a      	ldr	r3, [pc, #488]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f6:	4a79      	ldr	r2, [pc, #484]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80030f8:	f023 0304 	bic.w	r3, r3, #4
 80030fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d015      	beq.n	8003132 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fe ff17 	bl	8001f38 <HAL_GetTick>
 800310a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310e:	f7fe ff13 	bl	8001f38 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e14b      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003124:	4b6d      	ldr	r3, [pc, #436]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0ee      	beq.n	800310e <HAL_RCC_OscConfig+0x4f6>
 8003130:	e014      	b.n	800315c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003132:	f7fe ff01 	bl	8001f38 <HAL_GetTick>
 8003136:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003138:	e00a      	b.n	8003150 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313a:	f7fe fefd 	bl	8001f38 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e135      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003150:	4b62      	ldr	r3, [pc, #392]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1ee      	bne.n	800313a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 812a 	beq.w	80033ba <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003166:	4b5d      	ldr	r3, [pc, #372]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800316e:	2b18      	cmp	r3, #24
 8003170:	f000 80ba 	beq.w	80032e8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	2b02      	cmp	r3, #2
 800317a:	f040 8095 	bne.w	80032a8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317e:	4b57      	ldr	r3, [pc, #348]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a56      	ldr	r2, [pc, #344]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003184:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7fe fed5 	bl	8001f38 <HAL_GetTick>
 800318e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003192:	f7fe fed1 	bl	8001f38 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e10b      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031a4:	4b4d      	ldr	r3, [pc, #308]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031b0:	4b4a      	ldr	r3, [pc, #296]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80031b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031b4:	4b4a      	ldr	r3, [pc, #296]	@ (80032e0 <HAL_RCC_OscConfig+0x6c8>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031c0:	0112      	lsls	r2, r2, #4
 80031c2:	430a      	orrs	r2, r1
 80031c4:	4945      	ldr	r1, [pc, #276]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	628b      	str	r3, [r1, #40]	@ 0x28
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	3b01      	subs	r3, #1
 80031d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d8:	3b01      	subs	r3, #1
 80031da:	025b      	lsls	r3, r3, #9
 80031dc:	b29b      	uxth	r3, r3
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e4:	3b01      	subs	r3, #1
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f2:	3b01      	subs	r3, #1
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80031fa:	4938      	ldr	r1, [pc, #224]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003200:	4b36      	ldr	r3, [pc, #216]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	4a35      	ldr	r2, [pc, #212]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003206:	f023 0301 	bic.w	r3, r3, #1
 800320a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800320c:	4b33      	ldr	r3, [pc, #204]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 800320e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003210:	4b34      	ldr	r3, [pc, #208]	@ (80032e4 <HAL_RCC_OscConfig+0x6cc>)
 8003212:	4013      	ands	r3, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003218:	00d2      	lsls	r2, r2, #3
 800321a:	4930      	ldr	r1, [pc, #192]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 800321c:	4313      	orrs	r3, r2
 800321e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003220:	4b2e      	ldr	r3, [pc, #184]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	f023 020c 	bic.w	r2, r3, #12
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	492b      	ldr	r1, [pc, #172]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 800322e:	4313      	orrs	r3, r2
 8003230:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003232:	4b2a      	ldr	r3, [pc, #168]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003236:	f023 0202 	bic.w	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	4927      	ldr	r1, [pc, #156]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003244:	4b25      	ldr	r3, [pc, #148]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003248:	4a24      	ldr	r2, [pc, #144]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003250:	4b22      	ldr	r3, [pc, #136]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003254:	4a21      	ldr	r2, [pc, #132]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800325c:	4b1f      	ldr	r3, [pc, #124]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	4a1e      	ldr	r2, [pc, #120]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003262:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003268:	4b1c      	ldr	r3, [pc, #112]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	4a1b      	ldr	r2, [pc, #108]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003274:	4b19      	ldr	r3, [pc, #100]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a18      	ldr	r2, [pc, #96]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 800327a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800327e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe fe5a 	bl	8001f38 <HAL_GetTick>
 8003284:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe fe56 	bl	8001f38 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e090      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800329a:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x670>
 80032a6:	e088      	b.n	80033ba <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a8:	4b0c      	ldr	r3, [pc, #48]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0b      	ldr	r2, [pc, #44]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80032ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe fe40 	bl	8001f38 <HAL_GetTick>
 80032b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fe fe3c 	bl	8001f38 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e076      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ce:	4b03      	ldr	r3, [pc, #12]	@ (80032dc <HAL_RCC_OscConfig+0x6c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x6a4>
 80032da:	e06e      	b.n	80033ba <HAL_RCC_OscConfig+0x7a2>
 80032dc:	58024400 	.word	0x58024400
 80032e0:	fffffc0c 	.word	0xfffffc0c
 80032e4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032e8:	4b36      	ldr	r3, [pc, #216]	@ (80033c4 <HAL_RCC_OscConfig+0x7ac>)
 80032ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032ee:	4b35      	ldr	r3, [pc, #212]	@ (80033c4 <HAL_RCC_OscConfig+0x7ac>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d031      	beq.n	8003360 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f003 0203 	and.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d12a      	bne.n	8003360 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d122      	bne.n	8003360 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d11a      	bne.n	8003360 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	0a5b      	lsrs	r3, r3, #9
 800332e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003336:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d111      	bne.n	8003360 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	0c1b      	lsrs	r3, r3, #16
 8003340:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d108      	bne.n	8003360 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	0e1b      	lsrs	r3, r3, #24
 8003352:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800335a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e02b      	b.n	80033bc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003364:	4b17      	ldr	r3, [pc, #92]	@ (80033c4 <HAL_RCC_OscConfig+0x7ac>)
 8003366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003368:	08db      	lsrs	r3, r3, #3
 800336a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800336e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	429a      	cmp	r2, r3
 8003378:	d01f      	beq.n	80033ba <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800337a:	4b12      	ldr	r3, [pc, #72]	@ (80033c4 <HAL_RCC_OscConfig+0x7ac>)
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	4a11      	ldr	r2, [pc, #68]	@ (80033c4 <HAL_RCC_OscConfig+0x7ac>)
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003386:	f7fe fdd7 	bl	8001f38 <HAL_GetTick>
 800338a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800338c:	bf00      	nop
 800338e:	f7fe fdd3 	bl	8001f38 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	4293      	cmp	r3, r2
 8003398:	d0f9      	beq.n	800338e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800339a:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <HAL_RCC_OscConfig+0x7ac>)
 800339c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800339e:	4b0a      	ldr	r3, [pc, #40]	@ (80033c8 <HAL_RCC_OscConfig+0x7b0>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80033a6:	00d2      	lsls	r2, r2, #3
 80033a8:	4906      	ldr	r1, [pc, #24]	@ (80033c4 <HAL_RCC_OscConfig+0x7ac>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80033ae:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <HAL_RCC_OscConfig+0x7ac>)
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	4a04      	ldr	r2, [pc, #16]	@ (80033c4 <HAL_RCC_OscConfig+0x7ac>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3730      	adds	r7, #48	@ 0x30
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	58024400 	.word	0x58024400
 80033c8:	ffff0007 	.word	0xffff0007

080033cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e19c      	b.n	800371a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b8a      	ldr	r3, [pc, #552]	@ (800360c <HAL_RCC_ClockConfig+0x240>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d910      	bls.n	8003410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b87      	ldr	r3, [pc, #540]	@ (800360c <HAL_RCC_ClockConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 020f 	bic.w	r2, r3, #15
 80033f6:	4985      	ldr	r1, [pc, #532]	@ (800360c <HAL_RCC_ClockConfig+0x240>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b83      	ldr	r3, [pc, #524]	@ (800360c <HAL_RCC_ClockConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e184      	b.n	800371a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d010      	beq.n	800343e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	4b7b      	ldr	r3, [pc, #492]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003428:	429a      	cmp	r2, r3
 800342a:	d908      	bls.n	800343e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800342c:	4b78      	ldr	r3, [pc, #480]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	4975      	ldr	r1, [pc, #468]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 800343a:	4313      	orrs	r3, r2
 800343c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d010      	beq.n	800346c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	4b70      	ldr	r3, [pc, #448]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003456:	429a      	cmp	r2, r3
 8003458:	d908      	bls.n	800346c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800345a:	4b6d      	ldr	r3, [pc, #436]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	496a      	ldr	r1, [pc, #424]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 8003468:	4313      	orrs	r3, r2
 800346a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b00      	cmp	r3, #0
 8003476:	d010      	beq.n	800349a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	4b64      	ldr	r3, [pc, #400]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003484:	429a      	cmp	r2, r3
 8003486:	d908      	bls.n	800349a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003488:	4b61      	ldr	r3, [pc, #388]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	495e      	ldr	r1, [pc, #376]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 8003496:	4313      	orrs	r3, r2
 8003498:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d010      	beq.n	80034c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69da      	ldr	r2, [r3, #28]
 80034aa:	4b59      	ldr	r3, [pc, #356]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d908      	bls.n	80034c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034b6:	4b56      	ldr	r3, [pc, #344]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	4953      	ldr	r1, [pc, #332]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d010      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d908      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f023 020f 	bic.w	r2, r3, #15
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4947      	ldr	r1, [pc, #284]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d055      	beq.n	80035ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003502:	4b43      	ldr	r3, [pc, #268]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	4940      	ldr	r1, [pc, #256]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 8003510:	4313      	orrs	r3, r2
 8003512:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d107      	bne.n	800352c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800351c:	4b3c      	ldr	r3, [pc, #240]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d121      	bne.n	800356c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0f6      	b.n	800371a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d107      	bne.n	8003544 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003534:	4b36      	ldr	r3, [pc, #216]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d115      	bne.n	800356c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0ea      	b.n	800371a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d107      	bne.n	800355c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800354c:	4b30      	ldr	r3, [pc, #192]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0de      	b.n	800371a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800355c:	4b2c      	ldr	r3, [pc, #176]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0d6      	b.n	800371a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800356c:	4b28      	ldr	r3, [pc, #160]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f023 0207 	bic.w	r2, r3, #7
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4925      	ldr	r1, [pc, #148]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 800357a:	4313      	orrs	r3, r2
 800357c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357e:	f7fe fcdb 	bl	8001f38 <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003584:	e00a      	b.n	800359c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003586:	f7fe fcd7 	bl	8001f38 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e0be      	b.n	800371a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359c:	4b1c      	ldr	r3, [pc, #112]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d1eb      	bne.n	8003586 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d010      	beq.n	80035dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	4b14      	ldr	r3, [pc, #80]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d208      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ca:	4b11      	ldr	r3, [pc, #68]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f023 020f 	bic.w	r2, r3, #15
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	490e      	ldr	r1, [pc, #56]	@ (8003610 <HAL_RCC_ClockConfig+0x244>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_RCC_ClockConfig+0x240>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d214      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b08      	ldr	r3, [pc, #32]	@ (800360c <HAL_RCC_ClockConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 020f 	bic.w	r2, r3, #15
 80035f2:	4906      	ldr	r1, [pc, #24]	@ (800360c <HAL_RCC_ClockConfig+0x240>)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b04      	ldr	r3, [pc, #16]	@ (800360c <HAL_RCC_ClockConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e086      	b.n	800371a <HAL_RCC_ClockConfig+0x34e>
 800360c:	52002000 	.word	0x52002000
 8003610:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d010      	beq.n	8003642 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	4b3f      	ldr	r3, [pc, #252]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800362c:	429a      	cmp	r2, r3
 800362e:	d208      	bcs.n	8003642 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003630:	4b3c      	ldr	r3, [pc, #240]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	4939      	ldr	r1, [pc, #228]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 800363e:	4313      	orrs	r3, r2
 8003640:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d010      	beq.n	8003670 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	4b34      	ldr	r3, [pc, #208]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800365a:	429a      	cmp	r2, r3
 800365c:	d208      	bcs.n	8003670 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800365e:	4b31      	ldr	r3, [pc, #196]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	492e      	ldr	r1, [pc, #184]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 800366c:	4313      	orrs	r3, r2
 800366e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	4b28      	ldr	r3, [pc, #160]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003688:	429a      	cmp	r2, r3
 800368a:	d208      	bcs.n	800369e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800368c:	4b25      	ldr	r3, [pc, #148]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	4922      	ldr	r1, [pc, #136]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 800369a:	4313      	orrs	r3, r2
 800369c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d010      	beq.n	80036cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69da      	ldr	r2, [r3, #28]
 80036ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d208      	bcs.n	80036cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	4917      	ldr	r1, [pc, #92]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036cc:	f000 f834 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b14      	ldr	r3, [pc, #80]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	4912      	ldr	r1, [pc, #72]	@ (8003728 <HAL_RCC_ClockConfig+0x35c>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
 80036e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <HAL_RCC_ClockConfig+0x358>)
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003728 <HAL_RCC_ClockConfig+0x35c>)
 80036f4:	5cd3      	ldrb	r3, [r2, r3]
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003700:	4a0a      	ldr	r2, [pc, #40]	@ (800372c <HAL_RCC_ClockConfig+0x360>)
 8003702:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003704:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <HAL_RCC_ClockConfig+0x364>)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800370a:	4b0a      	ldr	r3, [pc, #40]	@ (8003734 <HAL_RCC_ClockConfig+0x368>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe f9ca 	bl	8001aa8 <HAL_InitTick>
 8003714:	4603      	mov	r3, r0
 8003716:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	58024400 	.word	0x58024400
 8003728:	080112b8 	.word	0x080112b8
 800372c:	24000004 	.word	0x24000004
 8003730:	24000000 	.word	0x24000000
 8003734:	24000008 	.word	0x24000008

08003738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	@ 0x24
 800373c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800373e:	4bb3      	ldr	r3, [pc, #716]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003746:	2b18      	cmp	r3, #24
 8003748:	f200 8155 	bhi.w	80039f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800374c:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <HAL_RCC_GetSysClockFreq+0x1c>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	080037b9 	.word	0x080037b9
 8003758:	080039f7 	.word	0x080039f7
 800375c:	080039f7 	.word	0x080039f7
 8003760:	080039f7 	.word	0x080039f7
 8003764:	080039f7 	.word	0x080039f7
 8003768:	080039f7 	.word	0x080039f7
 800376c:	080039f7 	.word	0x080039f7
 8003770:	080039f7 	.word	0x080039f7
 8003774:	080037df 	.word	0x080037df
 8003778:	080039f7 	.word	0x080039f7
 800377c:	080039f7 	.word	0x080039f7
 8003780:	080039f7 	.word	0x080039f7
 8003784:	080039f7 	.word	0x080039f7
 8003788:	080039f7 	.word	0x080039f7
 800378c:	080039f7 	.word	0x080039f7
 8003790:	080039f7 	.word	0x080039f7
 8003794:	080037e5 	.word	0x080037e5
 8003798:	080039f7 	.word	0x080039f7
 800379c:	080039f7 	.word	0x080039f7
 80037a0:	080039f7 	.word	0x080039f7
 80037a4:	080039f7 	.word	0x080039f7
 80037a8:	080039f7 	.word	0x080039f7
 80037ac:	080039f7 	.word	0x080039f7
 80037b0:	080039f7 	.word	0x080039f7
 80037b4:	080037eb 	.word	0x080037eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037b8:	4b94      	ldr	r3, [pc, #592]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037c4:	4b91      	ldr	r3, [pc, #580]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	08db      	lsrs	r3, r3, #3
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	4a90      	ldr	r2, [pc, #576]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
 80037d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80037d6:	e111      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80037d8:	4b8d      	ldr	r3, [pc, #564]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037da:	61bb      	str	r3, [r7, #24]
      break;
 80037dc:	e10e      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80037de:	4b8d      	ldr	r3, [pc, #564]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037e0:	61bb      	str	r3, [r7, #24]
      break;
 80037e2:	e10b      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80037e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80037e6:	61bb      	str	r3, [r7, #24]
      break;
 80037e8:	e108      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037ea:	4b88      	ldr	r3, [pc, #544]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80037f4:	4b85      	ldr	r3, [pc, #532]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003800:	4b82      	ldr	r3, [pc, #520]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800380a:	4b80      	ldr	r3, [pc, #512]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800380c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800380e:	08db      	lsrs	r3, r3, #3
 8003810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80e1 	beq.w	80039f0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b02      	cmp	r3, #2
 8003832:	f000 8083 	beq.w	800393c <HAL_RCC_GetSysClockFreq+0x204>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b02      	cmp	r3, #2
 800383a:	f200 80a1 	bhi.w	8003980 <HAL_RCC_GetSysClockFreq+0x248>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x114>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d056      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800384a:	e099      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800384c:	4b6f      	ldr	r3, [pc, #444]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d02d      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003858:	4b6c      	ldr	r3, [pc, #432]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	08db      	lsrs	r3, r3, #3
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	4a6b      	ldr	r2, [pc, #428]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003882:	4b62      	ldr	r3, [pc, #392]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003892:	ed97 6a02 	vldr	s12, [r7, #8]
 8003896:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 800389a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800389e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80038b2:	e087      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003a20 <HAL_RCC_GetSysClockFreq+0x2e8>
 80038c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c6:	4b51      	ldr	r3, [pc, #324]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 80038de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038f6:	e065      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003902:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003a24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390a:	4b40      	ldr	r3, [pc, #256]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	ed97 6a02 	vldr	s12, [r7, #8]
 800391e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800393a:	e043      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003946:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003a28 <HAL_RCC_GetSysClockFreq+0x2f0>
 800394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394e:	4b2f      	ldr	r3, [pc, #188]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003962:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800397e:	e021      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003a24 <HAL_RCC_GetSysClockFreq+0x2ec>
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b1e      	ldr	r3, [pc, #120]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80039c4:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c8:	0a5b      	lsrs	r3, r3, #9
 80039ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ce:	3301      	adds	r3, #1
 80039d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	ee07 3a90 	vmov	s15, r3
 80039d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80039e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039e8:	ee17 3a90 	vmov	r3, s15
 80039ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80039ee:	e005      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61bb      	str	r3, [r7, #24]
      break;
 80039f4:	e002      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80039f6:	4b07      	ldr	r3, [pc, #28]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039f8:	61bb      	str	r3, [r7, #24]
      break;
 80039fa:	bf00      	nop
  }

  return sysclockfreq;
 80039fc:	69bb      	ldr	r3, [r7, #24]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3724      	adds	r7, #36	@ 0x24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	03d09000 	.word	0x03d09000
 8003a14:	003d0900 	.word	0x003d0900
 8003a18:	017d7840 	.word	0x017d7840
 8003a1c:	46000000 	.word	0x46000000
 8003a20:	4c742400 	.word	0x4c742400
 8003a24:	4a742400 	.word	0x4a742400
 8003a28:	4bbebc20 	.word	0x4bbebc20

08003a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a32:	f7ff fe81 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 8003a36:	4602      	mov	r2, r0
 8003a38:	4b10      	ldr	r3, [pc, #64]	@ (8003a7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	490f      	ldr	r1, [pc, #60]	@ (8003a80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a44:	5ccb      	ldrb	r3, [r1, r3]
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a50:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	4a09      	ldr	r2, [pc, #36]	@ (8003a80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a5a:	5cd3      	ldrb	r3, [r2, r3]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	fa22 f303 	lsr.w	r3, r2, r3
 8003a66:	4a07      	ldr	r2, [pc, #28]	@ (8003a84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a6a:	4a07      	ldr	r2, [pc, #28]	@ (8003a88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a70:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a72:	681b      	ldr	r3, [r3, #0]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	58024400 	.word	0x58024400
 8003a80:	080112b8 	.word	0x080112b8
 8003a84:	24000004 	.word	0x24000004
 8003a88:	24000000 	.word	0x24000000

08003a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a90:	f7ff ffcc 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b06      	ldr	r3, [pc, #24]	@ (8003ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4904      	ldr	r1, [pc, #16]	@ (8003ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	58024400 	.word	0x58024400
 8003ab4:	080112b8 	.word	0x080112b8

08003ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003abc:	f7ff ffb6 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	0a1b      	lsrs	r3, r3, #8
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4904      	ldr	r1, [pc, #16]	@ (8003ae0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	58024400 	.word	0x58024400
 8003ae0:	080112b8 	.word	0x080112b8

08003ae4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	223f      	movs	r2, #63	@ 0x3f
 8003af2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003af4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b60 <HAL_RCC_GetClockConfig+0x7c>)
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f003 0207 	and.w	r2, r3, #7
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003b00:	4b17      	ldr	r3, [pc, #92]	@ (8003b60 <HAL_RCC_GetClockConfig+0x7c>)
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003b0c:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <HAL_RCC_GetClockConfig+0x7c>)
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f003 020f 	and.w	r2, r3, #15
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003b18:	4b11      	ldr	r3, [pc, #68]	@ (8003b60 <HAL_RCC_GetClockConfig+0x7c>)
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003b24:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <HAL_RCC_GetClockConfig+0x7c>)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003b30:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <HAL_RCC_GetClockConfig+0x7c>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003b3c:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <HAL_RCC_GetClockConfig+0x7c>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b48:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <HAL_RCC_GetClockConfig+0x80>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	601a      	str	r2, [r3, #0]
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	58024400 	.word	0x58024400
 8003b64:	52002000 	.word	0x52002000

08003b68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b6c:	b0c6      	sub	sp, #280	@ 0x118
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003b8c:	2500      	movs	r5, #0
 8003b8e:	ea54 0305 	orrs.w	r3, r4, r5
 8003b92:	d049      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b9e:	d02f      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ba0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ba4:	d828      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ba6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003baa:	d01a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bb0:	d822      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bba:	d007      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bbc:	e01c      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bbe:	4bab      	ldr	r3, [pc, #684]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc2:	4aaa      	ldr	r2, [pc, #680]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bca:	e01a      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 fc25 	bl	8005424 <RCCEx_PLL2_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003be0:	e00f      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be6:	3328      	adds	r3, #40	@ 0x28
 8003be8:	2102      	movs	r1, #2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 fccc 	bl	8005588 <RCCEx_PLL3_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c0a:	4b98      	ldr	r3, [pc, #608]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c18:	4a94      	ldr	r2, [pc, #592]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003c34:	f04f 0900 	mov.w	r9, #0
 8003c38:	ea58 0309 	orrs.w	r3, r8, r9
 8003c3c:	d047      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d82a      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c48:	a201      	add	r2, pc, #4	@ (adr r2, 8003c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c65 	.word	0x08003c65
 8003c54:	08003c73 	.word	0x08003c73
 8003c58:	08003c89 	.word	0x08003c89
 8003c5c:	08003ca7 	.word	0x08003ca7
 8003c60:	08003ca7 	.word	0x08003ca7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c64:	4b81      	ldr	r3, [pc, #516]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	4a80      	ldr	r2, [pc, #512]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c70:	e01a      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c76:	3308      	adds	r3, #8
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 fbd2 	bl	8005424 <RCCEx_PLL2_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c86:	e00f      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c8c:	3328      	adds	r3, #40	@ 0x28
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 fc79 	bl	8005588 <RCCEx_PLL3_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c9c:	e004      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb0:	4b6e      	ldr	r3, [pc, #440]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb4:	f023 0107 	bic.w	r1, r3, #7
 8003cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbe:	4a6b      	ldr	r2, [pc, #428]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003cda:	f04f 0b00 	mov.w	fp, #0
 8003cde:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ce2:	d05b      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cec:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003cf0:	d03b      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003cf2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003cf6:	d834      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003cf8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cfc:	d037      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003cfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d02:	d82e      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d04:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003d08:	d033      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003d0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003d0e:	d828      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d14:	d01a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003d16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d1a:	d822      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003d20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d24:	d007      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003d26:	e01c      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d28:	4b50      	ldr	r3, [pc, #320]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	4a4f      	ldr	r2, [pc, #316]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d34:	e01e      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 fb70 	bl	8005424 <RCCEx_PLL2_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d4a:	e013      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d50:	3328      	adds	r3, #40	@ 0x28
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f001 fc17 	bl	8005588 <RCCEx_PLL3_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d68:	e004      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003d6a:	bf00      	nop
 8003d6c:	e002      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d80:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d8c:	4a37      	ldr	r2, [pc, #220]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d92:	e003      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003da8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003db2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003db6:	460b      	mov	r3, r1
 8003db8:	4313      	orrs	r3, r2
 8003dba:	d05d      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003dc4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003dc8:	d03b      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003dca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003dce:	d834      	bhi.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003dd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dd4:	d037      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003dd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dda:	d82e      	bhi.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003ddc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003de0:	d033      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003de2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003de6:	d828      	bhi.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003de8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dec:	d01a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003dee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003df2:	d822      	bhi.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dfc:	d007      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003dfe:	e01c      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e00:	4b1a      	ldr	r3, [pc, #104]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	4a19      	ldr	r2, [pc, #100]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e0c:	e01e      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e12:	3308      	adds	r3, #8
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 fb04 	bl	8005424 <RCCEx_PLL2_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e22:	e013      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e28:	3328      	adds	r3, #40	@ 0x28
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f001 fbab 	bl	8005588 <RCCEx_PLL3_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e38:	e008      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e40:	e004      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10d      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e54:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e58:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e64:	4a01      	ldr	r2, [pc, #4]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e66:	430b      	orrs	r3, r1
 8003e68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e6a:	e005      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003e84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e8e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4313      	orrs	r3, r2
 8003e96:	d03a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9e:	2b30      	cmp	r3, #48	@ 0x30
 8003ea0:	d01f      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003ea2:	2b30      	cmp	r3, #48	@ 0x30
 8003ea4:	d819      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d815      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d019      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d111      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb6:	4baa      	ldr	r3, [pc, #680]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eba:	4aa9      	ldr	r2, [pc, #676]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003ec2:	e011      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec8:	3308      	adds	r3, #8
 8003eca:	2102      	movs	r1, #2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 faa9 	bl	8005424 <RCCEx_PLL2_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003ed8:	e006      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ee0:	e002      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003ee2:	bf00      	nop
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ef0:	4b9b      	ldr	r3, [pc, #620]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003efe:	4a98      	ldr	r2, [pc, #608]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f04:	e003      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003f24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	d051      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f38:	d035      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f3e:	d82e      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003f40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f44:	d031      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003f46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f4a:	d828      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f50:	d01a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f56:	d822      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f60:	d007      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003f62:	e01c      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f64:	4b7e      	ldr	r3, [pc, #504]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	4a7d      	ldr	r2, [pc, #500]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f70:	e01c      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f76:	3308      	adds	r3, #8
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f001 fa52 	bl	8005424 <RCCEx_PLL2_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f86:	e011      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8c:	3328      	adds	r3, #40	@ 0x28
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 faf9 	bl	8005588 <RCCEx_PLL3_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f9c:	e006      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fa4:	e002      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc2:	4a67      	ldr	r2, [pc, #412]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fc8:	e003      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003fde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fe8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	d053      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ffc:	d033      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003ffe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004002:	d82c      	bhi.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004004:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004008:	d02f      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800400a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800400e:	d826      	bhi.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004010:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004014:	d02b      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004016:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800401a:	d820      	bhi.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800401c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004020:	d012      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004026:	d81a      	bhi.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d022      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004030:	d115      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004036:	3308      	adds	r3, #8
 8004038:	2101      	movs	r1, #1
 800403a:	4618      	mov	r0, r3
 800403c:	f001 f9f2 	bl	8005424 <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004046:	e015      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404c:	3328      	adds	r3, #40	@ 0x28
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fa99 	bl	8005588 <RCCEx_PLL3_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800405c:	e00a      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004064:	e006      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004066:	bf00      	nop
 8004068:	e004      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800406a:	bf00      	nop
 800406c:	e002      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800406e:	bf00      	nop
 8004070:	e000      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800407c:	4b38      	ldr	r3, [pc, #224]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408a:	4a35      	ldr	r2, [pc, #212]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800408c:	430b      	orrs	r3, r1
 800408e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004090:	e003      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004092:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004096:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800409a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80040a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80040b0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040b4:	460b      	mov	r3, r1
 80040b6:	4313      	orrs	r3, r2
 80040b8:	d058      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80040ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040c6:	d033      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80040c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040cc:	d82c      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d2:	d02f      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80040d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d8:	d826      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80040da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040de:	d02b      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80040e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040e4:	d820      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80040e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ea:	d012      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80040ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f0:	d81a      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d022      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80040f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040fa:	d115      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004100:	3308      	adds	r3, #8
 8004102:	2101      	movs	r1, #1
 8004104:	4618      	mov	r0, r3
 8004106:	f001 f98d 	bl	8005424 <RCCEx_PLL2_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004110:	e015      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004116:	3328      	adds	r3, #40	@ 0x28
 8004118:	2101      	movs	r1, #1
 800411a:	4618      	mov	r0, r3
 800411c:	f001 fa34 	bl	8005588 <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004126:	e00a      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800412e:	e006      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004130:	bf00      	nop
 8004132:	e004      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004134:	bf00      	nop
 8004136:	e002      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004138:	bf00      	nop
 800413a:	e000      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800413c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10e      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004146:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800414e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004156:	4a02      	ldr	r2, [pc, #8]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004158:	430b      	orrs	r3, r1
 800415a:	6593      	str	r3, [r2, #88]	@ 0x58
 800415c:	e006      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800415e:	bf00      	nop
 8004160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004168:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800416c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800417c:	2300      	movs	r3, #0
 800417e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004182:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004186:	460b      	mov	r3, r1
 8004188:	4313      	orrs	r3, r2
 800418a:	d037      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800418c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004196:	d00e      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800419c:	d816      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d018      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80041a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041a6:	d111      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a8:	4bc4      	ldr	r3, [pc, #784]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	4ac3      	ldr	r2, [pc, #780]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041b4:	e00f      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ba:	3308      	adds	r3, #8
 80041bc:	2101      	movs	r1, #1
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 f930 	bl	8005424 <RCCEx_PLL2_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041ca:	e004      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041d2:	e000      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80041d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041de:	4bb7      	ldr	r3, [pc, #732]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80041e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ec:	4ab3      	ldr	r2, [pc, #716]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041ee:	430b      	orrs	r3, r1
 80041f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80041f2:	e003      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004208:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800420c:	2300      	movs	r3, #0
 800420e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004212:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004216:	460b      	mov	r3, r1
 8004218:	4313      	orrs	r3, r2
 800421a:	d039      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800421c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004222:	2b03      	cmp	r3, #3
 8004224:	d81c      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004226:	a201      	add	r2, pc, #4	@ (adr r2, 800422c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	08004269 	.word	0x08004269
 8004230:	0800423d 	.word	0x0800423d
 8004234:	0800424b 	.word	0x0800424b
 8004238:	08004269 	.word	0x08004269
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423c:	4b9f      	ldr	r3, [pc, #636]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	4a9e      	ldr	r2, [pc, #632]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004248:	e00f      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800424a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424e:	3308      	adds	r3, #8
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f8e6 	bl	8005424 <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800425e:	e004      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800426a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004272:	4b92      	ldr	r3, [pc, #584]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004276:	f023 0103 	bic.w	r1, r3, #3
 800427a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004280:	4a8e      	ldr	r2, [pc, #568]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004282:	430b      	orrs	r3, r1
 8004284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004286:	e003      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800428c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800429c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042a0:	2300      	movs	r3, #0
 80042a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f000 8099 	beq.w	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b2:	4b83      	ldr	r3, [pc, #524]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a82      	ldr	r2, [pc, #520]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042be:	f7fd fe3b 	bl	8001f38 <HAL_GetTick>
 80042c2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c6:	e00b      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fd fe36 	bl	8001f38 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b64      	cmp	r3, #100	@ 0x64
 80042d6:	d903      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042de:	e005      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042e0:	4b77      	ldr	r3, [pc, #476]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0ed      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80042ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d173      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042f4:	4b71      	ldr	r3, [pc, #452]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004300:	4053      	eors	r3, r2
 8004302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004306:	2b00      	cmp	r3, #0
 8004308:	d015      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800430a:	4b6c      	ldr	r3, [pc, #432]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004312:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004316:	4b69      	ldr	r3, [pc, #420]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431a:	4a68      	ldr	r2, [pc, #416]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004320:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004322:	4b66      	ldr	r3, [pc, #408]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004326:	4a65      	ldr	r2, [pc, #404]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800432e:	4a63      	ldr	r2, [pc, #396]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004334:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800433a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800433e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004342:	d118      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fd fdf8 	bl	8001f38 <HAL_GetTick>
 8004348:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800434c:	e00d      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434e:	f7fd fdf3 	bl	8001f38 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004358:	1ad2      	subs	r2, r2, r3
 800435a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800435e:	429a      	cmp	r2, r3
 8004360:	d903      	bls.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004368:	e005      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800436a:	4b54      	ldr	r3, [pc, #336]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0eb      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004376:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800437a:	2b00      	cmp	r3, #0
 800437c:	d129      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800437e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004382:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800438a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800438e:	d10e      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004390:	4b4a      	ldr	r3, [pc, #296]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800439c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043a0:	091a      	lsrs	r2, r3, #4
 80043a2:	4b48      	ldr	r3, [pc, #288]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	4a45      	ldr	r2, [pc, #276]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6113      	str	r3, [r2, #16]
 80043ac:	e005      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x852>
 80043ae:	4b43      	ldr	r3, [pc, #268]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	4a42      	ldr	r2, [pc, #264]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80043b8:	6113      	str	r3, [r2, #16]
 80043ba:	4b40      	ldr	r3, [pc, #256]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80043be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ca:	4a3c      	ldr	r2, [pc, #240]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d0:	e008      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80043da:	e003      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f002 0301 	and.w	r3, r2, #1
 80043f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043f4:	2300      	movs	r3, #0
 80043f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80043fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80043fe:	460b      	mov	r3, r1
 8004400:	4313      	orrs	r3, r2
 8004402:	f000 808f 	beq.w	8004524 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800440a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800440c:	2b28      	cmp	r3, #40	@ 0x28
 800440e:	d871      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004410:	a201      	add	r2, pc, #4	@ (adr r2, 8004418 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	080044fd 	.word	0x080044fd
 800441c:	080044f5 	.word	0x080044f5
 8004420:	080044f5 	.word	0x080044f5
 8004424:	080044f5 	.word	0x080044f5
 8004428:	080044f5 	.word	0x080044f5
 800442c:	080044f5 	.word	0x080044f5
 8004430:	080044f5 	.word	0x080044f5
 8004434:	080044f5 	.word	0x080044f5
 8004438:	080044c9 	.word	0x080044c9
 800443c:	080044f5 	.word	0x080044f5
 8004440:	080044f5 	.word	0x080044f5
 8004444:	080044f5 	.word	0x080044f5
 8004448:	080044f5 	.word	0x080044f5
 800444c:	080044f5 	.word	0x080044f5
 8004450:	080044f5 	.word	0x080044f5
 8004454:	080044f5 	.word	0x080044f5
 8004458:	080044df 	.word	0x080044df
 800445c:	080044f5 	.word	0x080044f5
 8004460:	080044f5 	.word	0x080044f5
 8004464:	080044f5 	.word	0x080044f5
 8004468:	080044f5 	.word	0x080044f5
 800446c:	080044f5 	.word	0x080044f5
 8004470:	080044f5 	.word	0x080044f5
 8004474:	080044f5 	.word	0x080044f5
 8004478:	080044fd 	.word	0x080044fd
 800447c:	080044f5 	.word	0x080044f5
 8004480:	080044f5 	.word	0x080044f5
 8004484:	080044f5 	.word	0x080044f5
 8004488:	080044f5 	.word	0x080044f5
 800448c:	080044f5 	.word	0x080044f5
 8004490:	080044f5 	.word	0x080044f5
 8004494:	080044f5 	.word	0x080044f5
 8004498:	080044fd 	.word	0x080044fd
 800449c:	080044f5 	.word	0x080044f5
 80044a0:	080044f5 	.word	0x080044f5
 80044a4:	080044f5 	.word	0x080044f5
 80044a8:	080044f5 	.word	0x080044f5
 80044ac:	080044f5 	.word	0x080044f5
 80044b0:	080044f5 	.word	0x080044f5
 80044b4:	080044f5 	.word	0x080044f5
 80044b8:	080044fd 	.word	0x080044fd
 80044bc:	58024400 	.word	0x58024400
 80044c0:	58024800 	.word	0x58024800
 80044c4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044cc:	3308      	adds	r3, #8
 80044ce:	2101      	movs	r1, #1
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 ffa7 	bl	8005424 <RCCEx_PLL2_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044dc:	e00f      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e2:	3328      	adds	r3, #40	@ 0x28
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 f84e 	bl	8005588 <RCCEx_PLL3_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044f2:	e004      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80044fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004506:	4bbf      	ldr	r3, [pc, #764]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800450e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004512:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004514:	4abb      	ldr	r2, [pc, #748]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004516:	430b      	orrs	r3, r1
 8004518:	6553      	str	r3, [r2, #84]	@ 0x54
 800451a:	e003      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004520:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f002 0302 	and.w	r3, r2, #2
 8004530:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004534:	2300      	movs	r3, #0
 8004536:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800453a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800453e:	460b      	mov	r3, r1
 8004540:	4313      	orrs	r3, r2
 8004542:	d041      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454a:	2b05      	cmp	r3, #5
 800454c:	d824      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800454e:	a201      	add	r2, pc, #4	@ (adr r2, 8004554 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	080045a1 	.word	0x080045a1
 8004558:	0800456d 	.word	0x0800456d
 800455c:	08004583 	.word	0x08004583
 8004560:	080045a1 	.word	0x080045a1
 8004564:	080045a1 	.word	0x080045a1
 8004568:	080045a1 	.word	0x080045a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800456c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004570:	3308      	adds	r3, #8
 8004572:	2101      	movs	r1, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f000 ff55 	bl	8005424 <RCCEx_PLL2_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004580:	e00f      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004586:	3328      	adds	r3, #40	@ 0x28
 8004588:	2101      	movs	r1, #1
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fffc 	bl	8005588 <RCCEx_PLL3_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004596:	e004      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800459e:	e000      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80045a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80045aa:	4b96      	ldr	r3, [pc, #600]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ae:	f023 0107 	bic.w	r1, r3, #7
 80045b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b8:	4a92      	ldr	r2, [pc, #584]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045ba:	430b      	orrs	r3, r1
 80045bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80045be:	e003      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	f002 0304 	and.w	r3, r2, #4
 80045d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045d8:	2300      	movs	r3, #0
 80045da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045de:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045e2:	460b      	mov	r3, r1
 80045e4:	4313      	orrs	r3, r2
 80045e6:	d044      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80045e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f0:	2b05      	cmp	r3, #5
 80045f2:	d825      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80045f4:	a201      	add	r2, pc, #4	@ (adr r2, 80045fc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	08004649 	.word	0x08004649
 8004600:	08004615 	.word	0x08004615
 8004604:	0800462b 	.word	0x0800462b
 8004608:	08004649 	.word	0x08004649
 800460c:	08004649 	.word	0x08004649
 8004610:	08004649 	.word	0x08004649
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004618:	3308      	adds	r3, #8
 800461a:	2101      	movs	r1, #1
 800461c:	4618      	mov	r0, r3
 800461e:	f000 ff01 	bl	8005424 <RCCEx_PLL2_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004628:	e00f      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800462a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800462e:	3328      	adds	r3, #40	@ 0x28
 8004630:	2101      	movs	r1, #1
 8004632:	4618      	mov	r0, r3
 8004634:	f000 ffa8 	bl	8005588 <RCCEx_PLL3_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800463e:	e004      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004646:	e000      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004652:	4b6c      	ldr	r3, [pc, #432]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004656:	f023 0107 	bic.w	r1, r3, #7
 800465a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004662:	4a68      	ldr	r2, [pc, #416]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004664:	430b      	orrs	r3, r1
 8004666:	6593      	str	r3, [r2, #88]	@ 0x58
 8004668:	e003      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800466e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	f002 0320 	and.w	r3, r2, #32
 800467e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004682:	2300      	movs	r3, #0
 8004684:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004688:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800468c:	460b      	mov	r3, r1
 800468e:	4313      	orrs	r3, r2
 8004690:	d055      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800469a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800469e:	d033      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80046a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046a4:	d82c      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046aa:	d02f      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b0:	d826      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80046b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80046b6:	d02b      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80046b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80046bc:	d820      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80046be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046c2:	d012      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80046c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046c8:	d81a      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d022      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80046ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046d2:	d115      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d8:	3308      	adds	r3, #8
 80046da:	2100      	movs	r1, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fea1 	bl	8005424 <RCCEx_PLL2_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046e8:	e015      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ee:	3328      	adds	r3, #40	@ 0x28
 80046f0:	2102      	movs	r1, #2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 ff48 	bl	8005588 <RCCEx_PLL3_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046fe:	e00a      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004706:	e006      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004708:	bf00      	nop
 800470a:	e004      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800470c:	bf00      	nop
 800470e:	e002      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004710:	bf00      	nop
 8004712:	e000      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004716:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800471e:	4b39      	ldr	r3, [pc, #228]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004722:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800472a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800472e:	4a35      	ldr	r2, [pc, #212]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004730:	430b      	orrs	r3, r1
 8004732:	6553      	str	r3, [r2, #84]	@ 0x54
 8004734:	e003      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800473a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800473e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800474a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800474e:	2300      	movs	r3, #0
 8004750:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004754:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004758:	460b      	mov	r3, r1
 800475a:	4313      	orrs	r3, r2
 800475c:	d058      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800475e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004762:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004766:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800476a:	d033      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800476c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004770:	d82c      	bhi.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004776:	d02f      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477c:	d826      	bhi.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800477e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004782:	d02b      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004784:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004788:	d820      	bhi.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800478a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800478e:	d012      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004794:	d81a      	bhi.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d022      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800479a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479e:	d115      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a4:	3308      	adds	r3, #8
 80047a6:	2100      	movs	r1, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fe3b 	bl	8005424 <RCCEx_PLL2_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047b4:	e015      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ba:	3328      	adds	r3, #40	@ 0x28
 80047bc:	2102      	movs	r1, #2
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fee2 	bl	8005588 <RCCEx_PLL3_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047ca:	e00a      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047d2:	e006      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80047d4:	bf00      	nop
 80047d6:	e004      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80047d8:	bf00      	nop
 80047da:	e002      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80047dc:	bf00      	nop
 80047de:	e000      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80047e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10e      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80047f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047fa:	4a02      	ldr	r2, [pc, #8]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047fc:	430b      	orrs	r3, r1
 80047fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004800:	e006      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004802:	bf00      	nop
 8004804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800480c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800481c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004820:	2300      	movs	r3, #0
 8004822:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004826:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800482a:	460b      	mov	r3, r1
 800482c:	4313      	orrs	r3, r2
 800482e:	d055      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004834:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004838:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800483c:	d033      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800483e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004842:	d82c      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004848:	d02f      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800484a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800484e:	d826      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004850:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004854:	d02b      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004856:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800485a:	d820      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800485c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004860:	d012      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004866:	d81a      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d022      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800486c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004870:	d115      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004876:	3308      	adds	r3, #8
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fdd2 	bl	8005424 <RCCEx_PLL2_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004886:	e015      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800488c:	3328      	adds	r3, #40	@ 0x28
 800488e:	2102      	movs	r1, #2
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fe79 	bl	8005588 <RCCEx_PLL3_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800489c:	e00a      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048a4:	e006      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80048a6:	bf00      	nop
 80048a8:	e004      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80048aa:	bf00      	nop
 80048ac:	e002      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80048ae:	bf00      	nop
 80048b0:	e000      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80048b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80048bc:	4ba0      	ldr	r3, [pc, #640]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80048c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048cc:	4a9c      	ldr	r2, [pc, #624]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048ce:	430b      	orrs	r3, r1
 80048d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80048d2:	e003      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80048dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	f002 0308 	and.w	r3, r2, #8
 80048e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048ec:	2300      	movs	r3, #0
 80048ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048f2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80048f6:	460b      	mov	r3, r1
 80048f8:	4313      	orrs	r3, r2
 80048fa:	d01e      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80048fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004900:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004908:	d10c      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800490a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800490e:	3328      	adds	r3, #40	@ 0x28
 8004910:	2102      	movs	r1, #2
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fe38 	bl	8005588 <RCCEx_PLL3_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004924:	4b86      	ldr	r3, [pc, #536]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004928:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800492c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004934:	4a82      	ldr	r2, [pc, #520]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004936:	430b      	orrs	r3, r1
 8004938:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800493a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	f002 0310 	and.w	r3, r2, #16
 8004946:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800494a:	2300      	movs	r3, #0
 800494c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004950:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004954:	460b      	mov	r3, r1
 8004956:	4313      	orrs	r3, r2
 8004958:	d01e      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800495a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800495e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004966:	d10c      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800496c:	3328      	adds	r3, #40	@ 0x28
 800496e:	2102      	movs	r1, #2
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fe09 	bl	8005588 <RCCEx_PLL3_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004982:	4b6f      	ldr	r3, [pc, #444]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004986:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800498a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800498e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004992:	4a6b      	ldr	r2, [pc, #428]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004994:	430b      	orrs	r3, r1
 8004996:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80049a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049a6:	2300      	movs	r3, #0
 80049a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049aa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80049ae:	460b      	mov	r3, r1
 80049b0:	4313      	orrs	r3, r2
 80049b2:	d03e      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80049b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049c0:	d022      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80049c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049c6:	d81b      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d0:	d00b      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80049d2:	e015      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d8:	3308      	adds	r3, #8
 80049da:	2100      	movs	r1, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fd21 	bl	8005424 <RCCEx_PLL2_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049e8:	e00f      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ee:	3328      	adds	r3, #40	@ 0x28
 80049f0:	2102      	movs	r1, #2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fdc8 	bl	8005588 <RCCEx_PLL3_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049fe:	e004      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a06:	e000      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a12:	4b4b      	ldr	r3, [pc, #300]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a22:	4a47      	ldr	r2, [pc, #284]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a24:	430b      	orrs	r3, r1
 8004a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a28:	e003      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004a3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a40:	2300      	movs	r3, #0
 8004a42:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	d03b      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a5a:	d01f      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004a5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a60:	d818      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a66:	d003      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004a68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a6c:	d007      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004a6e:	e011      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a70:	4b33      	ldr	r3, [pc, #204]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a74:	4a32      	ldr	r2, [pc, #200]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a7c:	e00f      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a82:	3328      	adds	r3, #40	@ 0x28
 8004a84:	2101      	movs	r1, #1
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fd7e 	bl	8005588 <RCCEx_PLL3_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a92:	e004      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a9a:	e000      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10b      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aa6:	4b26      	ldr	r3, [pc, #152]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aaa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ab6:	4a22      	ldr	r2, [pc, #136]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6553      	str	r3, [r2, #84]	@ 0x54
 8004abc:	e003      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ac2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ad2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ad8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004adc:	460b      	mov	r3, r1
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	d034      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af0:	d007      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004af2:	e011      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af4:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	4a11      	ldr	r2, [pc, #68]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b00:	e00e      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b06:	3308      	adds	r3, #8
 8004b08:	2102      	movs	r1, #2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fc8a 	bl	8005424 <RCCEx_PLL2_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b16:	e003      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10d      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b28:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b36:	4a02      	ldr	r2, [pc, #8]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b3c:	e006      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004b3e:	bf00      	nop
 8004b40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004b58:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b5e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b62:	460b      	mov	r3, r1
 8004b64:	4313      	orrs	r3, r2
 8004b66:	d00c      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6c:	3328      	adds	r3, #40	@ 0x28
 8004b6e:	2102      	movs	r1, #2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fd09 	bl	8005588 <RCCEx_PLL3_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b90:	2300      	movs	r3, #0
 8004b92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b94:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	d036      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ba8:	d018      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bae:	d811      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb4:	d014      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bba:	d80b      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d011      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc4:	d106      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc6:	4bb7      	ldr	r3, [pc, #732]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	4ab6      	ldr	r2, [pc, #728]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004bd2:	e008      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bda:	e004      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004bdc:	bf00      	nop
 8004bde:	e002      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004be0:	bf00      	nop
 8004be2:	e000      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bee:	4bad      	ldr	r3, [pc, #692]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bfc:	4aa9      	ldr	r2, [pc, #676]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bfe:	430b      	orrs	r3, r1
 8004c00:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c02:	e003      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004c18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004c22:	460b      	mov	r3, r1
 8004c24:	4313      	orrs	r3, r2
 8004c26:	d009      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c28:	4b9e      	ldr	r3, [pc, #632]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c36:	4a9b      	ldr	r2, [pc, #620]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004c48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c4e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c52:	460b      	mov	r3, r1
 8004c54:	4313      	orrs	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c58:	4b92      	ldr	r3, [pc, #584]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c5c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c66:	4a8f      	ldr	r2, [pc, #572]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c82:	460b      	mov	r3, r1
 8004c84:	4313      	orrs	r3, r2
 8004c86:	d00e      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c88:	4b86      	ldr	r3, [pc, #536]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	4a85      	ldr	r2, [pc, #532]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c92:	6113      	str	r3, [r2, #16]
 8004c94:	4b83      	ldr	r3, [pc, #524]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c96:	6919      	ldr	r1, [r3, #16]
 8004c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ca0:	4a80      	ldr	r2, [pc, #512]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cb8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	d009      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004cc2:	4b78      	ldr	r3, [pc, #480]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	4a74      	ldr	r2, [pc, #464]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004ce2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004cec:	460b      	mov	r3, r1
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d02:	4a68      	ldr	r2, [pc, #416]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	2100      	movs	r1, #0
 8004d12:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d1a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4313      	orrs	r3, r2
 8004d22:	d011      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d28:	3308      	adds	r3, #8
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fb79 	bl	8005424 <RCCEx_PLL2_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	2100      	movs	r1, #0
 8004d52:	6239      	str	r1, [r7, #32]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d5a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4313      	orrs	r3, r2
 8004d62:	d011      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d68:	3308      	adds	r3, #8
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fb59 	bl	8005424 <RCCEx_PLL2_Config>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004d78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	2100      	movs	r1, #0
 8004d92:	61b9      	str	r1, [r7, #24]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4313      	orrs	r3, r2
 8004da2:	d011      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da8:	3308      	adds	r3, #8
 8004daa:	2102      	movs	r1, #2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fb39 	bl	8005424 <RCCEx_PLL2_Config>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004db8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	6139      	str	r1, [r7, #16]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004dde:	460b      	mov	r3, r1
 8004de0:	4313      	orrs	r3, r2
 8004de2:	d011      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de8:	3328      	adds	r3, #40	@ 0x28
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fbcb 	bl	8005588 <RCCEx_PLL3_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004df8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	2100      	movs	r1, #0
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4313      	orrs	r3, r2
 8004e22:	d011      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e28:	3328      	adds	r3, #40	@ 0x28
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fbab 	bl	8005588 <RCCEx_PLL3_Config>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	2100      	movs	r1, #0
 8004e52:	6039      	str	r1, [r7, #0]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	607b      	str	r3, [r7, #4]
 8004e5a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4313      	orrs	r3, r2
 8004e62:	d011      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e68:	3328      	adds	r3, #40	@ 0x28
 8004e6a:	2102      	movs	r1, #2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fb8b 	bl	8005588 <RCCEx_PLL3_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004e88:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	e000      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea2:	bf00      	nop
 8004ea4:	58024400 	.word	0x58024400

08004ea8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004eac:	f7fe fdbe 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b06      	ldr	r3, [pc, #24]	@ (8004ecc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4904      	ldr	r1, [pc, #16]	@ (8004ed0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ebe:	5ccb      	ldrb	r3, [r1, r3]
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	080112b8 	.word	0x080112b8

08004ed4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	@ 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004edc:	4ba1      	ldr	r3, [pc, #644]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004ee6:	4b9f      	ldr	r3, [pc, #636]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	0b1b      	lsrs	r3, r3, #12
 8004eec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ef0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ef2:	4b9c      	ldr	r3, [pc, #624]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	091b      	lsrs	r3, r3, #4
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004efe:	4b99      	ldr	r3, [pc, #612]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f02:	08db      	lsrs	r3, r3, #3
 8004f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8111 	beq.w	8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	f000 8083 	beq.w	8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	f200 80a1 	bhi.w	8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d056      	beq.n	8004fec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f3e:	e099      	b.n	8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f40:	4b88      	ldr	r3, [pc, #544]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d02d      	beq.n	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f4c:	4b85      	ldr	r3, [pc, #532]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	08db      	lsrs	r3, r3, #3
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	4a84      	ldr	r2, [pc, #528]	@ (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f76:	4b7b      	ldr	r3, [pc, #492]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004fa6:	e087      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005170 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fba:	4b6a      	ldr	r3, [pc, #424]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fea:	e065      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffe:	4b59      	ldr	r3, [pc, #356]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005012:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800502e:	e043      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800503e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005042:	4b48      	ldr	r3, [pc, #288]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005052:	ed97 6a03 	vldr	s12, [r7, #12]
 8005056:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800505a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005072:	e021      	b.n	80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005086:	4b37      	ldr	r3, [pc, #220]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005096:	ed97 6a03 	vldr	s12, [r7, #12]
 800509a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800516c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800509e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80050b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050bc:	0a5b      	lsrs	r3, r3, #9
 80050be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050de:	ee17 2a90 	vmov	r2, s15
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80050e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ea:	0c1b      	lsrs	r3, r3, #16
 80050ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f0:	ee07 3a90 	vmov	s15, r3
 80050f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005100:	edd7 6a07 	vldr	s13, [r7, #28]
 8005104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800510c:	ee17 2a90 	vmov	r2, s15
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005114:	4b13      	ldr	r3, [pc, #76]	@ (8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005118:	0e1b      	lsrs	r3, r3, #24
 800511a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800512a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800512e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800513a:	ee17 2a90 	vmov	r2, s15
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005142:	e008      	b.n	8005156 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	609a      	str	r2, [r3, #8]
}
 8005156:	bf00      	nop
 8005158:	3724      	adds	r7, #36	@ 0x24
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	58024400 	.word	0x58024400
 8005168:	03d09000 	.word	0x03d09000
 800516c:	46000000 	.word	0x46000000
 8005170:	4c742400 	.word	0x4c742400
 8005174:	4a742400 	.word	0x4a742400
 8005178:	4bbebc20 	.word	0x4bbebc20

0800517c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800517c:	b480      	push	{r7}
 800517e:	b089      	sub	sp, #36	@ 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005184:	4ba1      	ldr	r3, [pc, #644]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800518e:	4b9f      	ldr	r3, [pc, #636]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	0d1b      	lsrs	r3, r3, #20
 8005194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005198:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800519a:	4b9c      	ldr	r3, [pc, #624]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800519c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519e:	0a1b      	lsrs	r3, r3, #8
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80051a6:	4b99      	ldr	r3, [pc, #612]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051aa:	08db      	lsrs	r3, r3, #3
 80051ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	fb02 f303 	mul.w	r3, r2, r3
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8111 	beq.w	80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	f000 8083 	beq.w	80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	f200 80a1 	bhi.w	800531c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d056      	beq.n	8005294 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051e6:	e099      	b.n	800531c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e8:	4b88      	ldr	r3, [pc, #544]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d02d      	beq.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051f4:	4b85      	ldr	r3, [pc, #532]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	08db      	lsrs	r3, r3, #3
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	4a84      	ldr	r2, [pc, #528]	@ (8005410 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
 8005204:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521e:	4b7b      	ldr	r3, [pc, #492]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005232:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800524e:	e087      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005418 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800525e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005262:	4b6a      	ldr	r3, [pc, #424]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005272:	ed97 6a03 	vldr	s12, [r7, #12]
 8005276:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800527a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005292:	e065      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800541c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a6:	4b59      	ldr	r3, [pc, #356]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052d6:	e043      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ea:	4b48      	ldr	r3, [pc, #288]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80052fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800530e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800531a:	e021      	b.n	8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800541c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800532a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532e:	4b37      	ldr	r3, [pc, #220]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005342:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800535e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005360:	4b2a      	ldr	r3, [pc, #168]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	0a5b      	lsrs	r3, r3, #9
 8005366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800537a:	edd7 6a07 	vldr	s13, [r7, #28]
 800537e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005386:	ee17 2a90 	vmov	r2, s15
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800538e:	4b1f      	ldr	r3, [pc, #124]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	0c1b      	lsrs	r3, r3, #16
 8005394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b4:	ee17 2a90 	vmov	r2, s15
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80053bc:	4b13      	ldr	r3, [pc, #76]	@ (800540c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	0e1b      	lsrs	r3, r3, #24
 80053c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e2:	ee17 2a90 	vmov	r2, s15
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053ea:	e008      	b.n	80053fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
}
 80053fe:	bf00      	nop
 8005400:	3724      	adds	r7, #36	@ 0x24
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	58024400 	.word	0x58024400
 8005410:	03d09000 	.word	0x03d09000
 8005414:	46000000 	.word	0x46000000
 8005418:	4c742400 	.word	0x4c742400
 800541c:	4a742400 	.word	0x4a742400
 8005420:	4bbebc20 	.word	0x4bbebc20

08005424 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005432:	4b53      	ldr	r3, [pc, #332]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	2b03      	cmp	r3, #3
 800543c:	d101      	bne.n	8005442 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e099      	b.n	8005576 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005442:	4b4f      	ldr	r3, [pc, #316]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a4e      	ldr	r2, [pc, #312]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005448:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800544c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544e:	f7fc fd73 	bl	8001f38 <HAL_GetTick>
 8005452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005454:	e008      	b.n	8005468 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005456:	f7fc fd6f 	bl	8001f38 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e086      	b.n	8005576 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005468:	4b45      	ldr	r3, [pc, #276]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f0      	bne.n	8005456 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005474:	4b42      	ldr	r3, [pc, #264]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005478:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	031b      	lsls	r3, r3, #12
 8005482:	493f      	ldr	r1, [pc, #252]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005484:	4313      	orrs	r3, r2
 8005486:	628b      	str	r3, [r1, #40]	@ 0x28
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	3b01      	subs	r3, #1
 800548e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	3b01      	subs	r3, #1
 8005498:	025b      	lsls	r3, r3, #9
 800549a:	b29b      	uxth	r3, r3
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	041b      	lsls	r3, r3, #16
 80054a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	061b      	lsls	r3, r3, #24
 80054b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054b8:	4931      	ldr	r1, [pc, #196]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054be:	4b30      	ldr	r3, [pc, #192]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	492d      	ldr	r1, [pc, #180]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d4:	f023 0220 	bic.w	r2, r3, #32
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	4928      	ldr	r1, [pc, #160]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054e2:	4b27      	ldr	r3, [pc, #156]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e6:	4a26      	ldr	r2, [pc, #152]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054e8:	f023 0310 	bic.w	r3, r3, #16
 80054ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054ee:	4b24      	ldr	r3, [pc, #144]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054f2:	4b24      	ldr	r3, [pc, #144]	@ (8005584 <RCCEx_PLL2_Config+0x160>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	69d2      	ldr	r2, [r2, #28]
 80054fa:	00d2      	lsls	r2, r2, #3
 80054fc:	4920      	ldr	r1, [pc, #128]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005502:	4b1f      	ldr	r3, [pc, #124]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005506:	4a1e      	ldr	r2, [pc, #120]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005508:	f043 0310 	orr.w	r3, r3, #16
 800550c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005514:	4b1a      	ldr	r3, [pc, #104]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005518:	4a19      	ldr	r2, [pc, #100]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 800551a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800551e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005520:	e00f      	b.n	8005542 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d106      	bne.n	8005536 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005528:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 800552a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552c:	4a14      	ldr	r2, [pc, #80]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 800552e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005532:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005534:	e005      	b.n	8005542 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005536:	4b12      	ldr	r3, [pc, #72]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553a:	4a11      	ldr	r2, [pc, #68]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 800553c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005540:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005542:	4b0f      	ldr	r3, [pc, #60]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a0e      	ldr	r2, [pc, #56]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 8005548:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800554c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800554e:	f7fc fcf3 	bl	8001f38 <HAL_GetTick>
 8005552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005554:	e008      	b.n	8005568 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005556:	f7fc fcef 	bl	8001f38 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e006      	b.n	8005576 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005568:	4b05      	ldr	r3, [pc, #20]	@ (8005580 <RCCEx_PLL2_Config+0x15c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0f0      	beq.n	8005556 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	58024400 	.word	0x58024400
 8005584:	ffff0007 	.word	0xffff0007

08005588 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005596:	4b53      	ldr	r3, [pc, #332]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d101      	bne.n	80055a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e099      	b.n	80056da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80055a6:	4b4f      	ldr	r3, [pc, #316]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a4e      	ldr	r2, [pc, #312]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80055ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b2:	f7fc fcc1 	bl	8001f38 <HAL_GetTick>
 80055b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055b8:	e008      	b.n	80055cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055ba:	f7fc fcbd 	bl	8001f38 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e086      	b.n	80056da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055cc:	4b45      	ldr	r3, [pc, #276]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055d8:	4b42      	ldr	r3, [pc, #264]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80055da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	051b      	lsls	r3, r3, #20
 80055e6:	493f      	ldr	r1, [pc, #252]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	025b      	lsls	r3, r3, #9
 80055fe:	b29b      	uxth	r3, r3
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	3b01      	subs	r3, #1
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	3b01      	subs	r3, #1
 8005616:	061b      	lsls	r3, r3, #24
 8005618:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800561c:	4931      	ldr	r1, [pc, #196]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800561e:	4313      	orrs	r3, r2
 8005620:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005622:	4b30      	ldr	r3, [pc, #192]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005626:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	492d      	ldr	r1, [pc, #180]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005630:	4313      	orrs	r3, r2
 8005632:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005634:	4b2b      	ldr	r3, [pc, #172]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	4928      	ldr	r1, [pc, #160]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005642:	4313      	orrs	r3, r2
 8005644:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005646:	4b27      	ldr	r3, [pc, #156]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564a:	4a26      	ldr	r2, [pc, #152]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800564c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005650:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005652:	4b24      	ldr	r3, [pc, #144]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005656:	4b24      	ldr	r3, [pc, #144]	@ (80056e8 <RCCEx_PLL3_Config+0x160>)
 8005658:	4013      	ands	r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	69d2      	ldr	r2, [r2, #28]
 800565e:	00d2      	lsls	r2, r2, #3
 8005660:	4920      	ldr	r1, [pc, #128]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005662:	4313      	orrs	r3, r2
 8005664:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005666:	4b1f      	ldr	r3, [pc, #124]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566a:	4a1e      	ldr	r2, [pc, #120]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800566c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005670:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005678:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	4a19      	ldr	r2, [pc, #100]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800567e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005682:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005684:	e00f      	b.n	80056a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d106      	bne.n	800569a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800568c:	4b15      	ldr	r3, [pc, #84]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800568e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005690:	4a14      	ldr	r2, [pc, #80]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 8005692:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005696:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005698:	e005      	b.n	80056a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800569a:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 800569c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569e:	4a11      	ldr	r2, [pc, #68]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80056a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80056a6:	4b0f      	ldr	r3, [pc, #60]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a0e      	ldr	r2, [pc, #56]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80056ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b2:	f7fc fc41 	bl	8001f38 <HAL_GetTick>
 80056b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056b8:	e008      	b.n	80056cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056ba:	f7fc fc3d 	bl	8001f38 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e006      	b.n	80056da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056cc:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <RCCEx_PLL3_Config+0x15c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	58024400 	.word	0x58024400
 80056e8:	ffff0007 	.word	0xffff0007

080056ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e10f      	b.n	800591e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a87      	ldr	r2, [pc, #540]	@ (8005928 <HAL_SPI_Init+0x23c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00f      	beq.n	800572e <HAL_SPI_Init+0x42>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a86      	ldr	r2, [pc, #536]	@ (800592c <HAL_SPI_Init+0x240>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00a      	beq.n	800572e <HAL_SPI_Init+0x42>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a84      	ldr	r2, [pc, #528]	@ (8005930 <HAL_SPI_Init+0x244>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d005      	beq.n	800572e <HAL_SPI_Init+0x42>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	2b0f      	cmp	r3, #15
 8005728:	d901      	bls.n	800572e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0f7      	b.n	800591e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f900 	bl	8005934 <SPI_GetPacketSize>
 8005734:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a7b      	ldr	r2, [pc, #492]	@ (8005928 <HAL_SPI_Init+0x23c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00c      	beq.n	800575a <HAL_SPI_Init+0x6e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a79      	ldr	r2, [pc, #484]	@ (800592c <HAL_SPI_Init+0x240>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d007      	beq.n	800575a <HAL_SPI_Init+0x6e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a78      	ldr	r2, [pc, #480]	@ (8005930 <HAL_SPI_Init+0x244>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d002      	beq.n	800575a <HAL_SPI_Init+0x6e>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b08      	cmp	r3, #8
 8005758:	d811      	bhi.n	800577e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800575e:	4a72      	ldr	r2, [pc, #456]	@ (8005928 <HAL_SPI_Init+0x23c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a70      	ldr	r2, [pc, #448]	@ (800592c <HAL_SPI_Init+0x240>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_SPI_Init+0x8c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a6f      	ldr	r2, [pc, #444]	@ (8005930 <HAL_SPI_Init+0x244>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d104      	bne.n	8005782 <HAL_SPI_Init+0x96>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b10      	cmp	r3, #16
 800577c:	d901      	bls.n	8005782 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e0cd      	b.n	800591e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fc f8b2 	bl	8001900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0201 	bic.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80057be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057c8:	d119      	bne.n	80057fe <HAL_SPI_Init+0x112>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057d2:	d103      	bne.n	80057dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10c      	bne.n	80057fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80057e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057ec:	d107      	bne.n	80057fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00f      	beq.n	800582a <HAL_SPI_Init+0x13e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	2b06      	cmp	r3, #6
 8005810:	d90b      	bls.n	800582a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	e007      	b.n	800583a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005838:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69da      	ldr	r2, [r3, #28]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	431a      	orrs	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584c:	ea42 0103 	orr.w	r1, r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800589a:	ea42 0103 	orr.w	r1, r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d113      	bne.n	80058da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0201 	bic.w	r2, r2, #1
 80058e8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40013000 	.word	0x40013000
 800592c:	40003800 	.word	0x40003800
 8005930:	40003c00 	.word	0x40003c00

08005934 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	3301      	adds	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	3301      	adds	r3, #1
 800594c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	3307      	adds	r3, #7
 8005952:	08db      	lsrs	r3, r3, #3
 8005954:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	fb02 f303 	mul.w	r3, r2, r3
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b082      	sub	sp, #8
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e049      	b.n	8005a10 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f841 	bl	8005a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f000 f9f5 	bl	8005d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d001      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e05e      	b.n	8005b02 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0201 	orr.w	r2, r2, #1
 8005a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a2b      	ldr	r2, [pc, #172]	@ (8005b10 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d02c      	beq.n	8005ac0 <HAL_TIM_Base_Start_IT+0x94>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a6e:	d027      	beq.n	8005ac0 <HAL_TIM_Base_Start_IT+0x94>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a27      	ldr	r2, [pc, #156]	@ (8005b14 <HAL_TIM_Base_Start_IT+0xe8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d022      	beq.n	8005ac0 <HAL_TIM_Base_Start_IT+0x94>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a26      	ldr	r2, [pc, #152]	@ (8005b18 <HAL_TIM_Base_Start_IT+0xec>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d01d      	beq.n	8005ac0 <HAL_TIM_Base_Start_IT+0x94>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a24      	ldr	r2, [pc, #144]	@ (8005b1c <HAL_TIM_Base_Start_IT+0xf0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d018      	beq.n	8005ac0 <HAL_TIM_Base_Start_IT+0x94>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a23      	ldr	r2, [pc, #140]	@ (8005b20 <HAL_TIM_Base_Start_IT+0xf4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d013      	beq.n	8005ac0 <HAL_TIM_Base_Start_IT+0x94>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a21      	ldr	r2, [pc, #132]	@ (8005b24 <HAL_TIM_Base_Start_IT+0xf8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00e      	beq.n	8005ac0 <HAL_TIM_Base_Start_IT+0x94>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a20      	ldr	r2, [pc, #128]	@ (8005b28 <HAL_TIM_Base_Start_IT+0xfc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d009      	beq.n	8005ac0 <HAL_TIM_Base_Start_IT+0x94>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b2c <HAL_TIM_Base_Start_IT+0x100>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d004      	beq.n	8005ac0 <HAL_TIM_Base_Start_IT+0x94>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1d      	ldr	r2, [pc, #116]	@ (8005b30 <HAL_TIM_Base_Start_IT+0x104>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d115      	bne.n	8005aec <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8005b34 <HAL_TIM_Base_Start_IT+0x108>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b06      	cmp	r3, #6
 8005ad0:	d015      	beq.n	8005afe <HAL_TIM_Base_Start_IT+0xd2>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ad8:	d011      	beq.n	8005afe <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0201 	orr.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aea:	e008      	b.n	8005afe <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	e000      	b.n	8005b00 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40010000 	.word	0x40010000
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	40000c00 	.word	0x40000c00
 8005b20:	40010400 	.word	0x40010400
 8005b24:	40001800 	.word	0x40001800
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	4000e000 	.word	0x4000e000
 8005b30:	4000e400 	.word	0x4000e400
 8005b34:	00010007 	.word	0x00010007

08005b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d020      	beq.n	8005b9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01b      	beq.n	8005b9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f06f 0202 	mvn.w	r2, #2
 8005b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f8e9 	bl	8005d5a <HAL_TIM_IC_CaptureCallback>
 8005b88:	e005      	b.n	8005b96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f8db 	bl	8005d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f8ec 	bl	8005d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d020      	beq.n	8005be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01b      	beq.n	8005be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0204 	mvn.w	r2, #4
 8005bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8c3 	bl	8005d5a <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f8b5 	bl	8005d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f8c6 	bl	8005d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d020      	beq.n	8005c34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01b      	beq.n	8005c34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0208 	mvn.w	r2, #8
 8005c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2204      	movs	r2, #4
 8005c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f89d 	bl	8005d5a <HAL_TIM_IC_CaptureCallback>
 8005c20:	e005      	b.n	8005c2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f88f 	bl	8005d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f8a0 	bl	8005d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d020      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01b      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0210 	mvn.w	r2, #16
 8005c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2208      	movs	r2, #8
 8005c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f877 	bl	8005d5a <HAL_TIM_IC_CaptureCallback>
 8005c6c:	e005      	b.n	8005c7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f869 	bl	8005d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f87a 	bl	8005d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00c      	beq.n	8005ca4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d007      	beq.n	8005ca4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0201 	mvn.w	r2, #1
 8005c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fb fdfc 	bl	800189c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00c      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f919 	bl	8005f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00c      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f911 	bl	8005f18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00c      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f834 	bl	8005d82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00c      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f06f 0220 	mvn.w	r2, #32
 8005d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f8d9 	bl	8005ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a47      	ldr	r2, [pc, #284]	@ (8005ec8 <TIM_Base_SetConfig+0x130>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d013      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db6:	d00f      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a44      	ldr	r2, [pc, #272]	@ (8005ecc <TIM_Base_SetConfig+0x134>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00b      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a43      	ldr	r2, [pc, #268]	@ (8005ed0 <TIM_Base_SetConfig+0x138>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d007      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a42      	ldr	r2, [pc, #264]	@ (8005ed4 <TIM_Base_SetConfig+0x13c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d003      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a41      	ldr	r2, [pc, #260]	@ (8005ed8 <TIM_Base_SetConfig+0x140>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d108      	bne.n	8005dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a36      	ldr	r2, [pc, #216]	@ (8005ec8 <TIM_Base_SetConfig+0x130>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d027      	beq.n	8005e42 <TIM_Base_SetConfig+0xaa>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df8:	d023      	beq.n	8005e42 <TIM_Base_SetConfig+0xaa>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a33      	ldr	r2, [pc, #204]	@ (8005ecc <TIM_Base_SetConfig+0x134>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d01f      	beq.n	8005e42 <TIM_Base_SetConfig+0xaa>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a32      	ldr	r2, [pc, #200]	@ (8005ed0 <TIM_Base_SetConfig+0x138>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d01b      	beq.n	8005e42 <TIM_Base_SetConfig+0xaa>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a31      	ldr	r2, [pc, #196]	@ (8005ed4 <TIM_Base_SetConfig+0x13c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d017      	beq.n	8005e42 <TIM_Base_SetConfig+0xaa>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a30      	ldr	r2, [pc, #192]	@ (8005ed8 <TIM_Base_SetConfig+0x140>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <TIM_Base_SetConfig+0xaa>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8005edc <TIM_Base_SetConfig+0x144>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00f      	beq.n	8005e42 <TIM_Base_SetConfig+0xaa>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a2e      	ldr	r2, [pc, #184]	@ (8005ee0 <TIM_Base_SetConfig+0x148>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00b      	beq.n	8005e42 <TIM_Base_SetConfig+0xaa>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ee4 <TIM_Base_SetConfig+0x14c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d007      	beq.n	8005e42 <TIM_Base_SetConfig+0xaa>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2c      	ldr	r2, [pc, #176]	@ (8005ee8 <TIM_Base_SetConfig+0x150>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d003      	beq.n	8005e42 <TIM_Base_SetConfig+0xaa>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8005eec <TIM_Base_SetConfig+0x154>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d108      	bne.n	8005e54 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a14      	ldr	r2, [pc, #80]	@ (8005ec8 <TIM_Base_SetConfig+0x130>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00f      	beq.n	8005e9a <TIM_Base_SetConfig+0x102>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a16      	ldr	r2, [pc, #88]	@ (8005ed8 <TIM_Base_SetConfig+0x140>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_Base_SetConfig+0x102>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a15      	ldr	r2, [pc, #84]	@ (8005edc <TIM_Base_SetConfig+0x144>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_Base_SetConfig+0x102>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ee0 <TIM_Base_SetConfig+0x148>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_Base_SetConfig+0x102>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a13      	ldr	r2, [pc, #76]	@ (8005ee4 <TIM_Base_SetConfig+0x14c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d103      	bne.n	8005ea2 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f043 0204 	orr.w	r2, r3, #4
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	601a      	str	r2, [r3, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	40010400 	.word	0x40010400
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40014400 	.word	0x40014400
 8005ee4:	40014800 	.word	0x40014800
 8005ee8:	4000e000 	.word	0x4000e000
 8005eec:	4000e400 	.word	0x4000e400

08005ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e042      	b.n	8005fc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fb fd3f 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2224      	movs	r2, #36	@ 0x24
 8005f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 ff22 	bl	8006dc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f8b3 	bl	80060e8 <UART_SetConfig>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e01b      	b.n	8005fc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 ffa1 	bl	8006f04 <UART_CheckIdleState>
 8005fc2:	4603      	mov	r3, r0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	@ 0x28
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d17b      	bne.n	80060de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_UART_Transmit+0x26>
 8005fec:	88fb      	ldrh	r3, [r7, #6]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e074      	b.n	80060e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2221      	movs	r2, #33	@ 0x21
 8006002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006006:	f7fb ff97 	bl	8001f38 <HAL_GetTick>
 800600a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	88fa      	ldrh	r2, [r7, #6]
 8006018:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006024:	d108      	bne.n	8006038 <HAL_UART_Transmit+0x6c>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e003      	b.n	8006040 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800603c:	2300      	movs	r3, #0
 800603e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006040:	e030      	b.n	80060a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2200      	movs	r2, #0
 800604a:	2180      	movs	r1, #128	@ 0x80
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f001 f803 	bl	8007058 <UART_WaitOnFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e03d      	b.n	80060e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10b      	bne.n	8006082 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006078:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	3302      	adds	r3, #2
 800607e:	61bb      	str	r3, [r7, #24]
 8006080:	e007      	b.n	8006092 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	781a      	ldrb	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	3301      	adds	r3, #1
 8006090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1c8      	bne.n	8006042 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2200      	movs	r2, #0
 80060b8:	2140      	movs	r1, #64	@ 0x40
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 ffcc 	bl	8007058 <UART_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e006      	b.n	80060e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e000      	b.n	80060e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80060de:	2302      	movs	r3, #2
  }
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3720      	adds	r7, #32
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ec:	b092      	sub	sp, #72	@ 0x48
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	431a      	orrs	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	431a      	orrs	r2, r3
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	4313      	orrs	r3, r2
 800610e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4bbe      	ldr	r3, [pc, #760]	@ (8006410 <UART_SetConfig+0x328>)
 8006118:	4013      	ands	r3, r2
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006120:	430b      	orrs	r3, r1
 8006122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4ab3      	ldr	r2, [pc, #716]	@ (8006414 <UART_SetConfig+0x32c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d004      	beq.n	8006154 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006150:	4313      	orrs	r3, r2
 8006152:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	4baf      	ldr	r3, [pc, #700]	@ (8006418 <UART_SetConfig+0x330>)
 800615c:	4013      	ands	r3, r2
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006164:	430b      	orrs	r3, r1
 8006166:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616e:	f023 010f 	bic.w	r1, r3, #15
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4aa6      	ldr	r2, [pc, #664]	@ (800641c <UART_SetConfig+0x334>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d177      	bne.n	8006278 <UART_SetConfig+0x190>
 8006188:	4ba5      	ldr	r3, [pc, #660]	@ (8006420 <UART_SetConfig+0x338>)
 800618a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800618c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006190:	2b28      	cmp	r3, #40	@ 0x28
 8006192:	d86d      	bhi.n	8006270 <UART_SetConfig+0x188>
 8006194:	a201      	add	r2, pc, #4	@ (adr r2, 800619c <UART_SetConfig+0xb4>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	08006241 	.word	0x08006241
 80061a0:	08006271 	.word	0x08006271
 80061a4:	08006271 	.word	0x08006271
 80061a8:	08006271 	.word	0x08006271
 80061ac:	08006271 	.word	0x08006271
 80061b0:	08006271 	.word	0x08006271
 80061b4:	08006271 	.word	0x08006271
 80061b8:	08006271 	.word	0x08006271
 80061bc:	08006249 	.word	0x08006249
 80061c0:	08006271 	.word	0x08006271
 80061c4:	08006271 	.word	0x08006271
 80061c8:	08006271 	.word	0x08006271
 80061cc:	08006271 	.word	0x08006271
 80061d0:	08006271 	.word	0x08006271
 80061d4:	08006271 	.word	0x08006271
 80061d8:	08006271 	.word	0x08006271
 80061dc:	08006251 	.word	0x08006251
 80061e0:	08006271 	.word	0x08006271
 80061e4:	08006271 	.word	0x08006271
 80061e8:	08006271 	.word	0x08006271
 80061ec:	08006271 	.word	0x08006271
 80061f0:	08006271 	.word	0x08006271
 80061f4:	08006271 	.word	0x08006271
 80061f8:	08006271 	.word	0x08006271
 80061fc:	08006259 	.word	0x08006259
 8006200:	08006271 	.word	0x08006271
 8006204:	08006271 	.word	0x08006271
 8006208:	08006271 	.word	0x08006271
 800620c:	08006271 	.word	0x08006271
 8006210:	08006271 	.word	0x08006271
 8006214:	08006271 	.word	0x08006271
 8006218:	08006271 	.word	0x08006271
 800621c:	08006261 	.word	0x08006261
 8006220:	08006271 	.word	0x08006271
 8006224:	08006271 	.word	0x08006271
 8006228:	08006271 	.word	0x08006271
 800622c:	08006271 	.word	0x08006271
 8006230:	08006271 	.word	0x08006271
 8006234:	08006271 	.word	0x08006271
 8006238:	08006271 	.word	0x08006271
 800623c:	08006269 	.word	0x08006269
 8006240:	2301      	movs	r3, #1
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e326      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006248:	2304      	movs	r3, #4
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e322      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006250:	2308      	movs	r3, #8
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006256:	e31e      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006258:	2310      	movs	r3, #16
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625e:	e31a      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006260:	2320      	movs	r3, #32
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006266:	e316      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006268:	2340      	movs	r3, #64	@ 0x40
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626e:	e312      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006270:	2380      	movs	r3, #128	@ 0x80
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006276:	e30e      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a69      	ldr	r2, [pc, #420]	@ (8006424 <UART_SetConfig+0x33c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d130      	bne.n	80062e4 <UART_SetConfig+0x1fc>
 8006282:	4b67      	ldr	r3, [pc, #412]	@ (8006420 <UART_SetConfig+0x338>)
 8006284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	2b05      	cmp	r3, #5
 800628c:	d826      	bhi.n	80062dc <UART_SetConfig+0x1f4>
 800628e:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <UART_SetConfig+0x1ac>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062ad 	.word	0x080062ad
 8006298:	080062b5 	.word	0x080062b5
 800629c:	080062bd 	.word	0x080062bd
 80062a0:	080062c5 	.word	0x080062c5
 80062a4:	080062cd 	.word	0x080062cd
 80062a8:	080062d5 	.word	0x080062d5
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b2:	e2f0      	b.n	8006896 <UART_SetConfig+0x7ae>
 80062b4:	2304      	movs	r3, #4
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ba:	e2ec      	b.n	8006896 <UART_SetConfig+0x7ae>
 80062bc:	2308      	movs	r3, #8
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c2:	e2e8      	b.n	8006896 <UART_SetConfig+0x7ae>
 80062c4:	2310      	movs	r3, #16
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ca:	e2e4      	b.n	8006896 <UART_SetConfig+0x7ae>
 80062cc:	2320      	movs	r3, #32
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d2:	e2e0      	b.n	8006896 <UART_SetConfig+0x7ae>
 80062d4:	2340      	movs	r3, #64	@ 0x40
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062da:	e2dc      	b.n	8006896 <UART_SetConfig+0x7ae>
 80062dc:	2380      	movs	r3, #128	@ 0x80
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e2:	e2d8      	b.n	8006896 <UART_SetConfig+0x7ae>
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a4f      	ldr	r2, [pc, #316]	@ (8006428 <UART_SetConfig+0x340>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d130      	bne.n	8006350 <UART_SetConfig+0x268>
 80062ee:	4b4c      	ldr	r3, [pc, #304]	@ (8006420 <UART_SetConfig+0x338>)
 80062f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	2b05      	cmp	r3, #5
 80062f8:	d826      	bhi.n	8006348 <UART_SetConfig+0x260>
 80062fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <UART_SetConfig+0x218>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	08006319 	.word	0x08006319
 8006304:	08006321 	.word	0x08006321
 8006308:	08006329 	.word	0x08006329
 800630c:	08006331 	.word	0x08006331
 8006310:	08006339 	.word	0x08006339
 8006314:	08006341 	.word	0x08006341
 8006318:	2300      	movs	r3, #0
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631e:	e2ba      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006320:	2304      	movs	r3, #4
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006326:	e2b6      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006328:	2308      	movs	r3, #8
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632e:	e2b2      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006330:	2310      	movs	r3, #16
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006336:	e2ae      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006338:	2320      	movs	r3, #32
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633e:	e2aa      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006340:	2340      	movs	r3, #64	@ 0x40
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006346:	e2a6      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006348:	2380      	movs	r3, #128	@ 0x80
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634e:	e2a2      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a35      	ldr	r2, [pc, #212]	@ (800642c <UART_SetConfig+0x344>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d130      	bne.n	80063bc <UART_SetConfig+0x2d4>
 800635a:	4b31      	ldr	r3, [pc, #196]	@ (8006420 <UART_SetConfig+0x338>)
 800635c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	2b05      	cmp	r3, #5
 8006364:	d826      	bhi.n	80063b4 <UART_SetConfig+0x2cc>
 8006366:	a201      	add	r2, pc, #4	@ (adr r2, 800636c <UART_SetConfig+0x284>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	08006385 	.word	0x08006385
 8006370:	0800638d 	.word	0x0800638d
 8006374:	08006395 	.word	0x08006395
 8006378:	0800639d 	.word	0x0800639d
 800637c:	080063a5 	.word	0x080063a5
 8006380:	080063ad 	.word	0x080063ad
 8006384:	2300      	movs	r3, #0
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800638a:	e284      	b.n	8006896 <UART_SetConfig+0x7ae>
 800638c:	2304      	movs	r3, #4
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006392:	e280      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006394:	2308      	movs	r3, #8
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639a:	e27c      	b.n	8006896 <UART_SetConfig+0x7ae>
 800639c:	2310      	movs	r3, #16
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063a2:	e278      	b.n	8006896 <UART_SetConfig+0x7ae>
 80063a4:	2320      	movs	r3, #32
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063aa:	e274      	b.n	8006896 <UART_SetConfig+0x7ae>
 80063ac:	2340      	movs	r3, #64	@ 0x40
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b2:	e270      	b.n	8006896 <UART_SetConfig+0x7ae>
 80063b4:	2380      	movs	r3, #128	@ 0x80
 80063b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ba:	e26c      	b.n	8006896 <UART_SetConfig+0x7ae>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006430 <UART_SetConfig+0x348>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d142      	bne.n	800644c <UART_SetConfig+0x364>
 80063c6:	4b16      	ldr	r3, [pc, #88]	@ (8006420 <UART_SetConfig+0x338>)
 80063c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d838      	bhi.n	8006444 <UART_SetConfig+0x35c>
 80063d2:	a201      	add	r2, pc, #4	@ (adr r2, 80063d8 <UART_SetConfig+0x2f0>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	080063f1 	.word	0x080063f1
 80063dc:	080063f9 	.word	0x080063f9
 80063e0:	08006401 	.word	0x08006401
 80063e4:	08006409 	.word	0x08006409
 80063e8:	08006435 	.word	0x08006435
 80063ec:	0800643d 	.word	0x0800643d
 80063f0:	2300      	movs	r3, #0
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f6:	e24e      	b.n	8006896 <UART_SetConfig+0x7ae>
 80063f8:	2304      	movs	r3, #4
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fe:	e24a      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006400:	2308      	movs	r3, #8
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006406:	e246      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006408:	2310      	movs	r3, #16
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640e:	e242      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006410:	cfff69f3 	.word	0xcfff69f3
 8006414:	58000c00 	.word	0x58000c00
 8006418:	11fff4ff 	.word	0x11fff4ff
 800641c:	40011000 	.word	0x40011000
 8006420:	58024400 	.word	0x58024400
 8006424:	40004400 	.word	0x40004400
 8006428:	40004800 	.word	0x40004800
 800642c:	40004c00 	.word	0x40004c00
 8006430:	40005000 	.word	0x40005000
 8006434:	2320      	movs	r3, #32
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643a:	e22c      	b.n	8006896 <UART_SetConfig+0x7ae>
 800643c:	2340      	movs	r3, #64	@ 0x40
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006442:	e228      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006444:	2380      	movs	r3, #128	@ 0x80
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800644a:	e224      	b.n	8006896 <UART_SetConfig+0x7ae>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4ab1      	ldr	r2, [pc, #708]	@ (8006718 <UART_SetConfig+0x630>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d176      	bne.n	8006544 <UART_SetConfig+0x45c>
 8006456:	4bb1      	ldr	r3, [pc, #708]	@ (800671c <UART_SetConfig+0x634>)
 8006458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800645e:	2b28      	cmp	r3, #40	@ 0x28
 8006460:	d86c      	bhi.n	800653c <UART_SetConfig+0x454>
 8006462:	a201      	add	r2, pc, #4	@ (adr r2, 8006468 <UART_SetConfig+0x380>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	0800650d 	.word	0x0800650d
 800646c:	0800653d 	.word	0x0800653d
 8006470:	0800653d 	.word	0x0800653d
 8006474:	0800653d 	.word	0x0800653d
 8006478:	0800653d 	.word	0x0800653d
 800647c:	0800653d 	.word	0x0800653d
 8006480:	0800653d 	.word	0x0800653d
 8006484:	0800653d 	.word	0x0800653d
 8006488:	08006515 	.word	0x08006515
 800648c:	0800653d 	.word	0x0800653d
 8006490:	0800653d 	.word	0x0800653d
 8006494:	0800653d 	.word	0x0800653d
 8006498:	0800653d 	.word	0x0800653d
 800649c:	0800653d 	.word	0x0800653d
 80064a0:	0800653d 	.word	0x0800653d
 80064a4:	0800653d 	.word	0x0800653d
 80064a8:	0800651d 	.word	0x0800651d
 80064ac:	0800653d 	.word	0x0800653d
 80064b0:	0800653d 	.word	0x0800653d
 80064b4:	0800653d 	.word	0x0800653d
 80064b8:	0800653d 	.word	0x0800653d
 80064bc:	0800653d 	.word	0x0800653d
 80064c0:	0800653d 	.word	0x0800653d
 80064c4:	0800653d 	.word	0x0800653d
 80064c8:	08006525 	.word	0x08006525
 80064cc:	0800653d 	.word	0x0800653d
 80064d0:	0800653d 	.word	0x0800653d
 80064d4:	0800653d 	.word	0x0800653d
 80064d8:	0800653d 	.word	0x0800653d
 80064dc:	0800653d 	.word	0x0800653d
 80064e0:	0800653d 	.word	0x0800653d
 80064e4:	0800653d 	.word	0x0800653d
 80064e8:	0800652d 	.word	0x0800652d
 80064ec:	0800653d 	.word	0x0800653d
 80064f0:	0800653d 	.word	0x0800653d
 80064f4:	0800653d 	.word	0x0800653d
 80064f8:	0800653d 	.word	0x0800653d
 80064fc:	0800653d 	.word	0x0800653d
 8006500:	0800653d 	.word	0x0800653d
 8006504:	0800653d 	.word	0x0800653d
 8006508:	08006535 	.word	0x08006535
 800650c:	2301      	movs	r3, #1
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006512:	e1c0      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006514:	2304      	movs	r3, #4
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651a:	e1bc      	b.n	8006896 <UART_SetConfig+0x7ae>
 800651c:	2308      	movs	r3, #8
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006522:	e1b8      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006524:	2310      	movs	r3, #16
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652a:	e1b4      	b.n	8006896 <UART_SetConfig+0x7ae>
 800652c:	2320      	movs	r3, #32
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006532:	e1b0      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006534:	2340      	movs	r3, #64	@ 0x40
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653a:	e1ac      	b.n	8006896 <UART_SetConfig+0x7ae>
 800653c:	2380      	movs	r3, #128	@ 0x80
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006542:	e1a8      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a75      	ldr	r2, [pc, #468]	@ (8006720 <UART_SetConfig+0x638>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d130      	bne.n	80065b0 <UART_SetConfig+0x4c8>
 800654e:	4b73      	ldr	r3, [pc, #460]	@ (800671c <UART_SetConfig+0x634>)
 8006550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	2b05      	cmp	r3, #5
 8006558:	d826      	bhi.n	80065a8 <UART_SetConfig+0x4c0>
 800655a:	a201      	add	r2, pc, #4	@ (adr r2, 8006560 <UART_SetConfig+0x478>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006579 	.word	0x08006579
 8006564:	08006581 	.word	0x08006581
 8006568:	08006589 	.word	0x08006589
 800656c:	08006591 	.word	0x08006591
 8006570:	08006599 	.word	0x08006599
 8006574:	080065a1 	.word	0x080065a1
 8006578:	2300      	movs	r3, #0
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800657e:	e18a      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006580:	2304      	movs	r3, #4
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006586:	e186      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006588:	2308      	movs	r3, #8
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658e:	e182      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006590:	2310      	movs	r3, #16
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006596:	e17e      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006598:	2320      	movs	r3, #32
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659e:	e17a      	b.n	8006896 <UART_SetConfig+0x7ae>
 80065a0:	2340      	movs	r3, #64	@ 0x40
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a6:	e176      	b.n	8006896 <UART_SetConfig+0x7ae>
 80065a8:	2380      	movs	r3, #128	@ 0x80
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ae:	e172      	b.n	8006896 <UART_SetConfig+0x7ae>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a5b      	ldr	r2, [pc, #364]	@ (8006724 <UART_SetConfig+0x63c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d130      	bne.n	800661c <UART_SetConfig+0x534>
 80065ba:	4b58      	ldr	r3, [pc, #352]	@ (800671c <UART_SetConfig+0x634>)
 80065bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	2b05      	cmp	r3, #5
 80065c4:	d826      	bhi.n	8006614 <UART_SetConfig+0x52c>
 80065c6:	a201      	add	r2, pc, #4	@ (adr r2, 80065cc <UART_SetConfig+0x4e4>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	080065e5 	.word	0x080065e5
 80065d0:	080065ed 	.word	0x080065ed
 80065d4:	080065f5 	.word	0x080065f5
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	08006605 	.word	0x08006605
 80065e0:	0800660d 	.word	0x0800660d
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ea:	e154      	b.n	8006896 <UART_SetConfig+0x7ae>
 80065ec:	2304      	movs	r3, #4
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f2:	e150      	b.n	8006896 <UART_SetConfig+0x7ae>
 80065f4:	2308      	movs	r3, #8
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e14c      	b.n	8006896 <UART_SetConfig+0x7ae>
 80065fc:	2310      	movs	r3, #16
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006602:	e148      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006604:	2320      	movs	r3, #32
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660a:	e144      	b.n	8006896 <UART_SetConfig+0x7ae>
 800660c:	2340      	movs	r3, #64	@ 0x40
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006612:	e140      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006614:	2380      	movs	r3, #128	@ 0x80
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661a:	e13c      	b.n	8006896 <UART_SetConfig+0x7ae>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a41      	ldr	r2, [pc, #260]	@ (8006728 <UART_SetConfig+0x640>)
 8006622:	4293      	cmp	r3, r2
 8006624:	f040 8082 	bne.w	800672c <UART_SetConfig+0x644>
 8006628:	4b3c      	ldr	r3, [pc, #240]	@ (800671c <UART_SetConfig+0x634>)
 800662a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006630:	2b28      	cmp	r3, #40	@ 0x28
 8006632:	d86d      	bhi.n	8006710 <UART_SetConfig+0x628>
 8006634:	a201      	add	r2, pc, #4	@ (adr r2, 800663c <UART_SetConfig+0x554>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	080066e1 	.word	0x080066e1
 8006640:	08006711 	.word	0x08006711
 8006644:	08006711 	.word	0x08006711
 8006648:	08006711 	.word	0x08006711
 800664c:	08006711 	.word	0x08006711
 8006650:	08006711 	.word	0x08006711
 8006654:	08006711 	.word	0x08006711
 8006658:	08006711 	.word	0x08006711
 800665c:	080066e9 	.word	0x080066e9
 8006660:	08006711 	.word	0x08006711
 8006664:	08006711 	.word	0x08006711
 8006668:	08006711 	.word	0x08006711
 800666c:	08006711 	.word	0x08006711
 8006670:	08006711 	.word	0x08006711
 8006674:	08006711 	.word	0x08006711
 8006678:	08006711 	.word	0x08006711
 800667c:	080066f1 	.word	0x080066f1
 8006680:	08006711 	.word	0x08006711
 8006684:	08006711 	.word	0x08006711
 8006688:	08006711 	.word	0x08006711
 800668c:	08006711 	.word	0x08006711
 8006690:	08006711 	.word	0x08006711
 8006694:	08006711 	.word	0x08006711
 8006698:	08006711 	.word	0x08006711
 800669c:	080066f9 	.word	0x080066f9
 80066a0:	08006711 	.word	0x08006711
 80066a4:	08006711 	.word	0x08006711
 80066a8:	08006711 	.word	0x08006711
 80066ac:	08006711 	.word	0x08006711
 80066b0:	08006711 	.word	0x08006711
 80066b4:	08006711 	.word	0x08006711
 80066b8:	08006711 	.word	0x08006711
 80066bc:	08006701 	.word	0x08006701
 80066c0:	08006711 	.word	0x08006711
 80066c4:	08006711 	.word	0x08006711
 80066c8:	08006711 	.word	0x08006711
 80066cc:	08006711 	.word	0x08006711
 80066d0:	08006711 	.word	0x08006711
 80066d4:	08006711 	.word	0x08006711
 80066d8:	08006711 	.word	0x08006711
 80066dc:	08006709 	.word	0x08006709
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e6:	e0d6      	b.n	8006896 <UART_SetConfig+0x7ae>
 80066e8:	2304      	movs	r3, #4
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ee:	e0d2      	b.n	8006896 <UART_SetConfig+0x7ae>
 80066f0:	2308      	movs	r3, #8
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f6:	e0ce      	b.n	8006896 <UART_SetConfig+0x7ae>
 80066f8:	2310      	movs	r3, #16
 80066fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fe:	e0ca      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006700:	2320      	movs	r3, #32
 8006702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006706:	e0c6      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006708:	2340      	movs	r3, #64	@ 0x40
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670e:	e0c2      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006710:	2380      	movs	r3, #128	@ 0x80
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006716:	e0be      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006718:	40011400 	.word	0x40011400
 800671c:	58024400 	.word	0x58024400
 8006720:	40007800 	.word	0x40007800
 8006724:	40007c00 	.word	0x40007c00
 8006728:	40011800 	.word	0x40011800
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4aad      	ldr	r2, [pc, #692]	@ (80069e8 <UART_SetConfig+0x900>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d176      	bne.n	8006824 <UART_SetConfig+0x73c>
 8006736:	4bad      	ldr	r3, [pc, #692]	@ (80069ec <UART_SetConfig+0x904>)
 8006738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800673a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800673e:	2b28      	cmp	r3, #40	@ 0x28
 8006740:	d86c      	bhi.n	800681c <UART_SetConfig+0x734>
 8006742:	a201      	add	r2, pc, #4	@ (adr r2, 8006748 <UART_SetConfig+0x660>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	080067ed 	.word	0x080067ed
 800674c:	0800681d 	.word	0x0800681d
 8006750:	0800681d 	.word	0x0800681d
 8006754:	0800681d 	.word	0x0800681d
 8006758:	0800681d 	.word	0x0800681d
 800675c:	0800681d 	.word	0x0800681d
 8006760:	0800681d 	.word	0x0800681d
 8006764:	0800681d 	.word	0x0800681d
 8006768:	080067f5 	.word	0x080067f5
 800676c:	0800681d 	.word	0x0800681d
 8006770:	0800681d 	.word	0x0800681d
 8006774:	0800681d 	.word	0x0800681d
 8006778:	0800681d 	.word	0x0800681d
 800677c:	0800681d 	.word	0x0800681d
 8006780:	0800681d 	.word	0x0800681d
 8006784:	0800681d 	.word	0x0800681d
 8006788:	080067fd 	.word	0x080067fd
 800678c:	0800681d 	.word	0x0800681d
 8006790:	0800681d 	.word	0x0800681d
 8006794:	0800681d 	.word	0x0800681d
 8006798:	0800681d 	.word	0x0800681d
 800679c:	0800681d 	.word	0x0800681d
 80067a0:	0800681d 	.word	0x0800681d
 80067a4:	0800681d 	.word	0x0800681d
 80067a8:	08006805 	.word	0x08006805
 80067ac:	0800681d 	.word	0x0800681d
 80067b0:	0800681d 	.word	0x0800681d
 80067b4:	0800681d 	.word	0x0800681d
 80067b8:	0800681d 	.word	0x0800681d
 80067bc:	0800681d 	.word	0x0800681d
 80067c0:	0800681d 	.word	0x0800681d
 80067c4:	0800681d 	.word	0x0800681d
 80067c8:	0800680d 	.word	0x0800680d
 80067cc:	0800681d 	.word	0x0800681d
 80067d0:	0800681d 	.word	0x0800681d
 80067d4:	0800681d 	.word	0x0800681d
 80067d8:	0800681d 	.word	0x0800681d
 80067dc:	0800681d 	.word	0x0800681d
 80067e0:	0800681d 	.word	0x0800681d
 80067e4:	0800681d 	.word	0x0800681d
 80067e8:	08006815 	.word	0x08006815
 80067ec:	2301      	movs	r3, #1
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f2:	e050      	b.n	8006896 <UART_SetConfig+0x7ae>
 80067f4:	2304      	movs	r3, #4
 80067f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fa:	e04c      	b.n	8006896 <UART_SetConfig+0x7ae>
 80067fc:	2308      	movs	r3, #8
 80067fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006802:	e048      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006804:	2310      	movs	r3, #16
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680a:	e044      	b.n	8006896 <UART_SetConfig+0x7ae>
 800680c:	2320      	movs	r3, #32
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006812:	e040      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006814:	2340      	movs	r3, #64	@ 0x40
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681a:	e03c      	b.n	8006896 <UART_SetConfig+0x7ae>
 800681c:	2380      	movs	r3, #128	@ 0x80
 800681e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006822:	e038      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a71      	ldr	r2, [pc, #452]	@ (80069f0 <UART_SetConfig+0x908>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d130      	bne.n	8006890 <UART_SetConfig+0x7a8>
 800682e:	4b6f      	ldr	r3, [pc, #444]	@ (80069ec <UART_SetConfig+0x904>)
 8006830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b05      	cmp	r3, #5
 8006838:	d826      	bhi.n	8006888 <UART_SetConfig+0x7a0>
 800683a:	a201      	add	r2, pc, #4	@ (adr r2, 8006840 <UART_SetConfig+0x758>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	08006859 	.word	0x08006859
 8006844:	08006861 	.word	0x08006861
 8006848:	08006869 	.word	0x08006869
 800684c:	08006871 	.word	0x08006871
 8006850:	08006879 	.word	0x08006879
 8006854:	08006881 	.word	0x08006881
 8006858:	2302      	movs	r3, #2
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685e:	e01a      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006860:	2304      	movs	r3, #4
 8006862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006866:	e016      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006868:	2308      	movs	r3, #8
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686e:	e012      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006870:	2310      	movs	r3, #16
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006876:	e00e      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006878:	2320      	movs	r3, #32
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687e:	e00a      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006880:	2340      	movs	r3, #64	@ 0x40
 8006882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006886:	e006      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006888:	2380      	movs	r3, #128	@ 0x80
 800688a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800688e:	e002      	b.n	8006896 <UART_SetConfig+0x7ae>
 8006890:	2380      	movs	r3, #128	@ 0x80
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a55      	ldr	r2, [pc, #340]	@ (80069f0 <UART_SetConfig+0x908>)
 800689c:	4293      	cmp	r3, r2
 800689e:	f040 80f8 	bne.w	8006a92 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	dc46      	bgt.n	8006938 <UART_SetConfig+0x850>
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	db75      	blt.n	800699a <UART_SetConfig+0x8b2>
 80068ae:	3b02      	subs	r3, #2
 80068b0:	2b1e      	cmp	r3, #30
 80068b2:	d872      	bhi.n	800699a <UART_SetConfig+0x8b2>
 80068b4:	a201      	add	r2, pc, #4	@ (adr r2, 80068bc <UART_SetConfig+0x7d4>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	0800693f 	.word	0x0800693f
 80068c0:	0800699b 	.word	0x0800699b
 80068c4:	08006947 	.word	0x08006947
 80068c8:	0800699b 	.word	0x0800699b
 80068cc:	0800699b 	.word	0x0800699b
 80068d0:	0800699b 	.word	0x0800699b
 80068d4:	08006957 	.word	0x08006957
 80068d8:	0800699b 	.word	0x0800699b
 80068dc:	0800699b 	.word	0x0800699b
 80068e0:	0800699b 	.word	0x0800699b
 80068e4:	0800699b 	.word	0x0800699b
 80068e8:	0800699b 	.word	0x0800699b
 80068ec:	0800699b 	.word	0x0800699b
 80068f0:	0800699b 	.word	0x0800699b
 80068f4:	08006967 	.word	0x08006967
 80068f8:	0800699b 	.word	0x0800699b
 80068fc:	0800699b 	.word	0x0800699b
 8006900:	0800699b 	.word	0x0800699b
 8006904:	0800699b 	.word	0x0800699b
 8006908:	0800699b 	.word	0x0800699b
 800690c:	0800699b 	.word	0x0800699b
 8006910:	0800699b 	.word	0x0800699b
 8006914:	0800699b 	.word	0x0800699b
 8006918:	0800699b 	.word	0x0800699b
 800691c:	0800699b 	.word	0x0800699b
 8006920:	0800699b 	.word	0x0800699b
 8006924:	0800699b 	.word	0x0800699b
 8006928:	0800699b 	.word	0x0800699b
 800692c:	0800699b 	.word	0x0800699b
 8006930:	0800699b 	.word	0x0800699b
 8006934:	0800698d 	.word	0x0800698d
 8006938:	2b40      	cmp	r3, #64	@ 0x40
 800693a:	d02a      	beq.n	8006992 <UART_SetConfig+0x8aa>
 800693c:	e02d      	b.n	800699a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800693e:	f7fe fab3 	bl	8004ea8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006942:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006944:	e02f      	b.n	80069a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe fac2 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006954:	e027      	b.n	80069a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006956:	f107 0318 	add.w	r3, r7, #24
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe fc0e 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006964:	e01f      	b.n	80069a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006966:	4b21      	ldr	r3, [pc, #132]	@ (80069ec <UART_SetConfig+0x904>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006972:	4b1e      	ldr	r3, [pc, #120]	@ (80069ec <UART_SetConfig+0x904>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	08db      	lsrs	r3, r3, #3
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	4a1d      	ldr	r2, [pc, #116]	@ (80069f4 <UART_SetConfig+0x90c>)
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006984:	e00f      	b.n	80069a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006986:	4b1b      	ldr	r3, [pc, #108]	@ (80069f4 <UART_SetConfig+0x90c>)
 8006988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800698a:	e00c      	b.n	80069a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800698c:	4b1a      	ldr	r3, [pc, #104]	@ (80069f8 <UART_SetConfig+0x910>)
 800698e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006990:	e009      	b.n	80069a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006998:	e005      	b.n	80069a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80069a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 81ee 	beq.w	8006d8a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	4a12      	ldr	r2, [pc, #72]	@ (80069fc <UART_SetConfig+0x914>)
 80069b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80069c0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	4613      	mov	r3, r2
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	4413      	add	r3, r2
 80069cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d305      	bcc.n	80069de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069da:	429a      	cmp	r2, r3
 80069dc:	d910      	bls.n	8006a00 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80069e4:	e1d1      	b.n	8006d8a <UART_SetConfig+0xca2>
 80069e6:	bf00      	nop
 80069e8:	40011c00 	.word	0x40011c00
 80069ec:	58024400 	.word	0x58024400
 80069f0:	58000c00 	.word	0x58000c00
 80069f4:	03d09000 	.word	0x03d09000
 80069f8:	003d0900 	.word	0x003d0900
 80069fc:	080112c8 	.word	0x080112c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a02:	2200      	movs	r2, #0
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	60fa      	str	r2, [r7, #12]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0c:	4ac0      	ldr	r2, [pc, #768]	@ (8006d10 <UART_SetConfig+0xc28>)
 8006a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2200      	movs	r2, #0
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	607a      	str	r2, [r7, #4]
 8006a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a22:	f7f9 fc73 	bl	800030c <__aeabi_uldivmod>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	020b      	lsls	r3, r1, #8
 8006a38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a3c:	0202      	lsls	r2, r0, #8
 8006a3e:	6979      	ldr	r1, [r7, #20]
 8006a40:	6849      	ldr	r1, [r1, #4]
 8006a42:	0849      	lsrs	r1, r1, #1
 8006a44:	2000      	movs	r0, #0
 8006a46:	460c      	mov	r4, r1
 8006a48:	4605      	mov	r5, r0
 8006a4a:	eb12 0804 	adds.w	r8, r2, r4
 8006a4e:	eb43 0905 	adc.w	r9, r3, r5
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	469a      	mov	sl, r3
 8006a5a:	4693      	mov	fp, r2
 8006a5c:	4652      	mov	r2, sl
 8006a5e:	465b      	mov	r3, fp
 8006a60:	4640      	mov	r0, r8
 8006a62:	4649      	mov	r1, r9
 8006a64:	f7f9 fc52 	bl	800030c <__aeabi_uldivmod>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a76:	d308      	bcc.n	8006a8a <UART_SetConfig+0x9a2>
 8006a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a7e:	d204      	bcs.n	8006a8a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a86:	60da      	str	r2, [r3, #12]
 8006a88:	e17f      	b.n	8006d8a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a90:	e17b      	b.n	8006d8a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a9a:	f040 80bd 	bne.w	8006c18 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006a9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	dc48      	bgt.n	8006b38 <UART_SetConfig+0xa50>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	db7b      	blt.n	8006ba2 <UART_SetConfig+0xaba>
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d879      	bhi.n	8006ba2 <UART_SetConfig+0xaba>
 8006aae:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab4 <UART_SetConfig+0x9cc>)
 8006ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab4:	08006b3f 	.word	0x08006b3f
 8006ab8:	08006b47 	.word	0x08006b47
 8006abc:	08006ba3 	.word	0x08006ba3
 8006ac0:	08006ba3 	.word	0x08006ba3
 8006ac4:	08006b4f 	.word	0x08006b4f
 8006ac8:	08006ba3 	.word	0x08006ba3
 8006acc:	08006ba3 	.word	0x08006ba3
 8006ad0:	08006ba3 	.word	0x08006ba3
 8006ad4:	08006b5f 	.word	0x08006b5f
 8006ad8:	08006ba3 	.word	0x08006ba3
 8006adc:	08006ba3 	.word	0x08006ba3
 8006ae0:	08006ba3 	.word	0x08006ba3
 8006ae4:	08006ba3 	.word	0x08006ba3
 8006ae8:	08006ba3 	.word	0x08006ba3
 8006aec:	08006ba3 	.word	0x08006ba3
 8006af0:	08006ba3 	.word	0x08006ba3
 8006af4:	08006b6f 	.word	0x08006b6f
 8006af8:	08006ba3 	.word	0x08006ba3
 8006afc:	08006ba3 	.word	0x08006ba3
 8006b00:	08006ba3 	.word	0x08006ba3
 8006b04:	08006ba3 	.word	0x08006ba3
 8006b08:	08006ba3 	.word	0x08006ba3
 8006b0c:	08006ba3 	.word	0x08006ba3
 8006b10:	08006ba3 	.word	0x08006ba3
 8006b14:	08006ba3 	.word	0x08006ba3
 8006b18:	08006ba3 	.word	0x08006ba3
 8006b1c:	08006ba3 	.word	0x08006ba3
 8006b20:	08006ba3 	.word	0x08006ba3
 8006b24:	08006ba3 	.word	0x08006ba3
 8006b28:	08006ba3 	.word	0x08006ba3
 8006b2c:	08006ba3 	.word	0x08006ba3
 8006b30:	08006ba3 	.word	0x08006ba3
 8006b34:	08006b95 	.word	0x08006b95
 8006b38:	2b40      	cmp	r3, #64	@ 0x40
 8006b3a:	d02e      	beq.n	8006b9a <UART_SetConfig+0xab2>
 8006b3c:	e031      	b.n	8006ba2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b3e:	f7fc ffa5 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8006b42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b44:	e033      	b.n	8006bae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b46:	f7fc ffb7 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8006b4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b4c:	e02f      	b.n	8006bae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe f9be 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b5c:	e027      	b.n	8006bae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b5e:	f107 0318 	add.w	r3, r7, #24
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fb0a 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b6c:	e01f      	b.n	8006bae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b6e:	4b69      	ldr	r3, [pc, #420]	@ (8006d14 <UART_SetConfig+0xc2c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b7a:	4b66      	ldr	r3, [pc, #408]	@ (8006d14 <UART_SetConfig+0xc2c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	08db      	lsrs	r3, r3, #3
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	4a64      	ldr	r2, [pc, #400]	@ (8006d18 <UART_SetConfig+0xc30>)
 8006b86:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b8c:	e00f      	b.n	8006bae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006b8e:	4b62      	ldr	r3, [pc, #392]	@ (8006d18 <UART_SetConfig+0xc30>)
 8006b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b92:	e00c      	b.n	8006bae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b94:	4b61      	ldr	r3, [pc, #388]	@ (8006d1c <UART_SetConfig+0xc34>)
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b98:	e009      	b.n	8006bae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba0:	e005      	b.n	8006bae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006bac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80ea 	beq.w	8006d8a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bba:	4a55      	ldr	r2, [pc, #340]	@ (8006d10 <UART_SetConfig+0xc28>)
 8006bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bc8:	005a      	lsls	r2, r3, #1
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	441a      	add	r2, r3
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bda:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bde:	2b0f      	cmp	r3, #15
 8006be0:	d916      	bls.n	8006c10 <UART_SetConfig+0xb28>
 8006be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006be8:	d212      	bcs.n	8006c10 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f023 030f 	bic.w	r3, r3, #15
 8006bf2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf6:	085b      	lsrs	r3, r3, #1
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c02:	4313      	orrs	r3, r2
 8006c04:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006c0c:	60da      	str	r2, [r3, #12]
 8006c0e:	e0bc      	b.n	8006d8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c16:	e0b8      	b.n	8006d8a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c18:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	dc4b      	bgt.n	8006cb8 <UART_SetConfig+0xbd0>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f2c0 8087 	blt.w	8006d34 <UART_SetConfig+0xc4c>
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	f200 8084 	bhi.w	8006d34 <UART_SetConfig+0xc4c>
 8006c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c34 <UART_SetConfig+0xb4c>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006cbf 	.word	0x08006cbf
 8006c38:	08006cc7 	.word	0x08006cc7
 8006c3c:	08006d35 	.word	0x08006d35
 8006c40:	08006d35 	.word	0x08006d35
 8006c44:	08006ccf 	.word	0x08006ccf
 8006c48:	08006d35 	.word	0x08006d35
 8006c4c:	08006d35 	.word	0x08006d35
 8006c50:	08006d35 	.word	0x08006d35
 8006c54:	08006cdf 	.word	0x08006cdf
 8006c58:	08006d35 	.word	0x08006d35
 8006c5c:	08006d35 	.word	0x08006d35
 8006c60:	08006d35 	.word	0x08006d35
 8006c64:	08006d35 	.word	0x08006d35
 8006c68:	08006d35 	.word	0x08006d35
 8006c6c:	08006d35 	.word	0x08006d35
 8006c70:	08006d35 	.word	0x08006d35
 8006c74:	08006cef 	.word	0x08006cef
 8006c78:	08006d35 	.word	0x08006d35
 8006c7c:	08006d35 	.word	0x08006d35
 8006c80:	08006d35 	.word	0x08006d35
 8006c84:	08006d35 	.word	0x08006d35
 8006c88:	08006d35 	.word	0x08006d35
 8006c8c:	08006d35 	.word	0x08006d35
 8006c90:	08006d35 	.word	0x08006d35
 8006c94:	08006d35 	.word	0x08006d35
 8006c98:	08006d35 	.word	0x08006d35
 8006c9c:	08006d35 	.word	0x08006d35
 8006ca0:	08006d35 	.word	0x08006d35
 8006ca4:	08006d35 	.word	0x08006d35
 8006ca8:	08006d35 	.word	0x08006d35
 8006cac:	08006d35 	.word	0x08006d35
 8006cb0:	08006d35 	.word	0x08006d35
 8006cb4:	08006d27 	.word	0x08006d27
 8006cb8:	2b40      	cmp	r3, #64	@ 0x40
 8006cba:	d037      	beq.n	8006d2c <UART_SetConfig+0xc44>
 8006cbc:	e03a      	b.n	8006d34 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cbe:	f7fc fee5 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8006cc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006cc4:	e03c      	b.n	8006d40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cc6:	f7fc fef7 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8006cca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ccc:	e038      	b.n	8006d40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe f8fe 	bl	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cdc:	e030      	b.n	8006d40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cde:	f107 0318 	add.w	r3, r7, #24
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fa4a 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cec:	e028      	b.n	8006d40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cee:	4b09      	ldr	r3, [pc, #36]	@ (8006d14 <UART_SetConfig+0xc2c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d012      	beq.n	8006d20 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cfa:	4b06      	ldr	r3, [pc, #24]	@ (8006d14 <UART_SetConfig+0xc2c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	08db      	lsrs	r3, r3, #3
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	4a04      	ldr	r2, [pc, #16]	@ (8006d18 <UART_SetConfig+0xc30>)
 8006d06:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d0c:	e018      	b.n	8006d40 <UART_SetConfig+0xc58>
 8006d0e:	bf00      	nop
 8006d10:	080112c8 	.word	0x080112c8
 8006d14:	58024400 	.word	0x58024400
 8006d18:	03d09000 	.word	0x03d09000
 8006d1c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006d20:	4b24      	ldr	r3, [pc, #144]	@ (8006db4 <UART_SetConfig+0xccc>)
 8006d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d24:	e00c      	b.n	8006d40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d26:	4b24      	ldr	r3, [pc, #144]	@ (8006db8 <UART_SetConfig+0xcd0>)
 8006d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d2a:	e009      	b.n	8006d40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d32:	e005      	b.n	8006d40 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006d3e:	bf00      	nop
    }

    if (pclk != 0U)
 8006d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d021      	beq.n	8006d8a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dbc <UART_SetConfig+0xcd4>)
 8006d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d50:	461a      	mov	r2, r3
 8006d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d54:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	085b      	lsrs	r3, r3, #1
 8006d5e:	441a      	add	r2, r3
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d68:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6c:	2b0f      	cmp	r3, #15
 8006d6e:	d909      	bls.n	8006d84 <UART_SetConfig+0xc9c>
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d76:	d205      	bcs.n	8006d84 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60da      	str	r2, [r3, #12]
 8006d82:	e002      	b.n	8006d8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2200      	movs	r2, #0
 8006da4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006da6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3748      	adds	r7, #72	@ 0x48
 8006dae:	46bd      	mov	sp, r7
 8006db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006db4:	03d09000 	.word	0x03d09000
 8006db8:	003d0900 	.word	0x003d0900
 8006dbc:	080112c8 	.word	0x080112c8

08006dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01a      	beq.n	8006ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ebe:	d10a      	bne.n	8006ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	605a      	str	r2, [r3, #4]
  }
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b098      	sub	sp, #96	@ 0x60
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f14:	f7fb f810 	bl	8001f38 <HAL_GetTick>
 8006f18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d12f      	bne.n	8006f88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f30:	2200      	movs	r2, #0
 8006f32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f88e 	bl	8007058 <UART_WaitOnFlagUntilTimeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d022      	beq.n	8006f88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f56:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e6      	bne.n	8006f42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e063      	b.n	8007050 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0304 	and.w	r3, r3, #4
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d149      	bne.n	800702a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f857 	bl	8007058 <UART_WaitOnFlagUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d03c      	beq.n	800702a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fce:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e6      	bne.n	8006fb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007002:	61fa      	str	r2, [r7, #28]
 8007004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	69b9      	ldr	r1, [r7, #24]
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	617b      	str	r3, [r7, #20]
   return(result);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e5      	bne.n	8006fe2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e012      	b.n	8007050 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3758      	adds	r7, #88	@ 0x58
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	4613      	mov	r3, r2
 8007066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007068:	e04f      	b.n	800710a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d04b      	beq.n	800710a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007072:	f7fa ff61 	bl	8001f38 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	429a      	cmp	r2, r3
 8007080:	d302      	bcc.n	8007088 <UART_WaitOnFlagUntilTimeout+0x30>
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e04e      	b.n	800712a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d037      	beq.n	800710a <UART_WaitOnFlagUntilTimeout+0xb2>
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b80      	cmp	r3, #128	@ 0x80
 800709e:	d034      	beq.n	800710a <UART_WaitOnFlagUntilTimeout+0xb2>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b40      	cmp	r3, #64	@ 0x40
 80070a4:	d031      	beq.n	800710a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d110      	bne.n	80070d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2208      	movs	r2, #8
 80070ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f839 	bl	8007134 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2208      	movs	r2, #8
 80070c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e029      	b.n	800712a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070e4:	d111      	bne.n	800710a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f81f 	bl	8007134 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e00f      	b.n	800712a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69da      	ldr	r2, [r3, #28]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4013      	ands	r3, r2
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	429a      	cmp	r2, r3
 8007118:	bf0c      	ite	eq
 800711a:	2301      	moveq	r3, #1
 800711c:	2300      	movne	r3, #0
 800711e:	b2db      	uxtb	r3, r3
 8007120:	461a      	mov	r2, r3
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	429a      	cmp	r2, r3
 8007126:	d0a0      	beq.n	800706a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b095      	sub	sp, #84	@ 0x54
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800715a:	643b      	str	r3, [r7, #64]	@ 0x40
 800715c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007160:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e6      	bne.n	800713c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3308      	adds	r3, #8
 8007174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	61fb      	str	r3, [r7, #28]
   return(result);
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	4b1e      	ldr	r3, [pc, #120]	@ (80071fc <UART_EndRxTransfer+0xc8>)
 8007182:	4013      	ands	r3, r2
 8007184:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3308      	adds	r3, #8
 800718c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800718e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007190:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e5      	bne.n	800716e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d118      	bne.n	80071dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f023 0310 	bic.w	r3, r3, #16
 80071be:	647b      	str	r3, [r7, #68]	@ 0x44
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071c8:	61bb      	str	r3, [r7, #24]
 80071ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6979      	ldr	r1, [r7, #20]
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	613b      	str	r3, [r7, #16]
   return(result);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e6      	bne.n	80071aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071f0:	bf00      	nop
 80071f2:	3754      	adds	r7, #84	@ 0x54
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	effffffe 	.word	0xeffffffe

08007200 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <HAL_UARTEx_DisableFifoMode+0x16>
 8007212:	2302      	movs	r3, #2
 8007214:	e027      	b.n	8007266 <HAL_UARTEx_DisableFifoMode+0x66>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2224      	movs	r2, #36	@ 0x24
 8007222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0201 	bic.w	r2, r2, #1
 800723c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007244:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007282:	2b01      	cmp	r3, #1
 8007284:	d101      	bne.n	800728a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007286:	2302      	movs	r3, #2
 8007288:	e02d      	b.n	80072e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2224      	movs	r2, #36	@ 0x24
 8007296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f850 	bl	800736c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007302:	2302      	movs	r3, #2
 8007304:	e02d      	b.n	8007362 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2224      	movs	r2, #36	@ 0x24
 8007312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0201 	bic.w	r2, r2, #1
 800732c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f812 	bl	800736c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007378:	2b00      	cmp	r3, #0
 800737a:	d108      	bne.n	800738e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800738c:	e031      	b.n	80073f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800738e:	2310      	movs	r3, #16
 8007390:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007392:	2310      	movs	r3, #16
 8007394:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	0e5b      	lsrs	r3, r3, #25
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f003 0307 	and.w	r3, r3, #7
 80073a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	0f5b      	lsrs	r3, r3, #29
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	7b3a      	ldrb	r2, [r7, #12]
 80073ba:	4911      	ldr	r1, [pc, #68]	@ (8007400 <UARTEx_SetNbDataToProcess+0x94>)
 80073bc:	5c8a      	ldrb	r2, [r1, r2]
 80073be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073c2:	7b3a      	ldrb	r2, [r7, #12]
 80073c4:	490f      	ldr	r1, [pc, #60]	@ (8007404 <UARTEx_SetNbDataToProcess+0x98>)
 80073c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	7b7a      	ldrb	r2, [r7, #13]
 80073d8:	4909      	ldr	r1, [pc, #36]	@ (8007400 <UARTEx_SetNbDataToProcess+0x94>)
 80073da:	5c8a      	ldrb	r2, [r1, r2]
 80073dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073e0:	7b7a      	ldrb	r2, [r7, #13]
 80073e2:	4908      	ldr	r1, [pc, #32]	@ (8007404 <UARTEx_SetNbDataToProcess+0x98>)
 80073e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	080112e0 	.word	0x080112e0
 8007404:	080112e8 	.word	0x080112e8

08007408 <ld_16>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_16 (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3301      	adds	r3, #1
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007418:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	b21a      	sxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	b21b      	sxth	r3, r3
 8007426:	4313      	orrs	r3, r2
 8007428:	b21b      	sxth	r3, r3
 800742a:	81fb      	strh	r3, [r7, #14]
	return rv;
 800742c:	89fb      	ldrh	r3, [r7, #14]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <ld_32>:

static DWORD ld_32 (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800743a:	b480      	push	{r7}
 800743c:	b085      	sub	sp, #20
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3303      	adds	r3, #3
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	3202      	adds	r2, #2
 8007452:	7812      	ldrb	r2, [r2, #0]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	3201      	adds	r2, #1
 8007460:	7812      	ldrb	r2, [r2, #0]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	7812      	ldrb	r2, [r2, #0]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]
	return rv;
 8007472:	68fb      	ldr	r3, [r7, #12]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <ld_64>:

#if FF_FS_EXFAT
static QWORD ld_64 (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8007480:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007484:	b09d      	sub	sp, #116	@ 0x74
 8007486:	af00      	add	r7, sp, #0
 8007488:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800748a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800748c:	3307      	adds	r3, #7
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2200      	movs	r2, #0
 8007494:	469a      	mov	sl, r3
 8007496:	4693      	mov	fp, r2
 8007498:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800749c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80074a0:	f04f 0000 	mov.w	r0, #0
 80074a4:	f04f 0100 	mov.w	r1, #0
 80074a8:	0219      	lsls	r1, r3, #8
 80074aa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80074ae:	0210      	lsls	r0, r2, #8
 80074b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074b2:	3306      	adds	r3, #6
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2200      	movs	r2, #0
 80074ba:	461c      	mov	r4, r3
 80074bc:	4615      	mov	r5, r2
 80074be:	ea40 0804 	orr.w	r8, r0, r4
 80074c2:	ea41 0905 	orr.w	r9, r1, r5
 80074c6:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 80074ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80074ce:	f04f 0000 	mov.w	r0, #0
 80074d2:	f04f 0100 	mov.w	r1, #0
 80074d6:	0219      	lsls	r1, r3, #8
 80074d8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80074dc:	0210      	lsls	r0, r2, #8
 80074de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074e0:	3305      	adds	r3, #5
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2200      	movs	r2, #0
 80074e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80074ec:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80074f0:	4623      	mov	r3, r4
 80074f2:	4303      	orrs	r3, r0
 80074f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074f6:	462b      	mov	r3, r5
 80074f8:	430b      	orrs	r3, r1
 80074fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074fc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8007500:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8007504:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8007508:	f04f 0000 	mov.w	r0, #0
 800750c:	f04f 0100 	mov.w	r1, #0
 8007510:	0219      	lsls	r1, r3, #8
 8007512:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007516:	0210      	lsls	r0, r2, #8
 8007518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800751a:	3304      	adds	r3, #4
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2200      	movs	r2, #0
 8007522:	653b      	str	r3, [r7, #80]	@ 0x50
 8007524:	657a      	str	r2, [r7, #84]	@ 0x54
 8007526:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800752a:	4623      	mov	r3, r4
 800752c:	4303      	orrs	r3, r0
 800752e:	623b      	str	r3, [r7, #32]
 8007530:	462b      	mov	r3, r5
 8007532:	430b      	orrs	r3, r1
 8007534:	627b      	str	r3, [r7, #36]	@ 0x24
 8007536:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800753a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800753e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8007542:	f04f 0000 	mov.w	r0, #0
 8007546:	f04f 0100 	mov.w	r1, #0
 800754a:	0219      	lsls	r1, r3, #8
 800754c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007550:	0210      	lsls	r0, r2, #8
 8007552:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007554:	3303      	adds	r3, #3
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2200      	movs	r2, #0
 800755c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800755e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007560:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8007564:	4623      	mov	r3, r4
 8007566:	4303      	orrs	r3, r0
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	462b      	mov	r3, r5
 800756c:	430b      	orrs	r3, r1
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007574:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8007578:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800757c:	f04f 0000 	mov.w	r0, #0
 8007580:	f04f 0100 	mov.w	r1, #0
 8007584:	0219      	lsls	r1, r3, #8
 8007586:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800758a:	0210      	lsls	r0, r2, #8
 800758c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800758e:	3302      	adds	r3, #2
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2200      	movs	r2, #0
 8007596:	643b      	str	r3, [r7, #64]	@ 0x40
 8007598:	647a      	str	r2, [r7, #68]	@ 0x44
 800759a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800759e:	4623      	mov	r3, r4
 80075a0:	4303      	orrs	r3, r0
 80075a2:	613b      	str	r3, [r7, #16]
 80075a4:	462b      	mov	r3, r5
 80075a6:	430b      	orrs	r3, r1
 80075a8:	617b      	str	r3, [r7, #20]
 80075aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80075ae:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 80075b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075b6:	f04f 0200 	mov.w	r2, #0
 80075ba:	f04f 0300 	mov.w	r3, #0
 80075be:	020b      	lsls	r3, r1, #8
 80075c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075c4:	0202      	lsls	r2, r0, #8
 80075c6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80075c8:	3101      	adds	r1, #1
 80075ca:	7809      	ldrb	r1, [r1, #0]
 80075cc:	b2c9      	uxtb	r1, r1
 80075ce:	2000      	movs	r0, #0
 80075d0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80075d4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80075d8:	4621      	mov	r1, r4
 80075da:	4311      	orrs	r1, r2
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	4629      	mov	r1, r5
 80075e0:	4319      	orrs	r1, r3
 80075e2:	60f9      	str	r1, [r7, #12]
 80075e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80075e8:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 80075ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	020b      	lsls	r3, r1, #8
 80075fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075fe:	0202      	lsls	r2, r0, #8
 8007600:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007602:	7809      	ldrb	r1, [r1, #0]
 8007604:	b2c9      	uxtb	r1, r1
 8007606:	2000      	movs	r0, #0
 8007608:	6339      	str	r1, [r7, #48]	@ 0x30
 800760a:	6378      	str	r0, [r7, #52]	@ 0x34
 800760c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007610:	4621      	mov	r1, r4
 8007612:	4311      	orrs	r1, r2
 8007614:	6039      	str	r1, [r7, #0]
 8007616:	4629      	mov	r1, r5
 8007618:	4319      	orrs	r1, r3
 800761a:	6079      	str	r1, [r7, #4]
 800761c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007620:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8007624:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8007628:	4610      	mov	r0, r2
 800762a:	4619      	mov	r1, r3
 800762c:	3774      	adds	r7, #116	@ 0x74
 800762e:	46bd      	mov	sp, r7
 8007630:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007634:	4770      	bx	lr

08007636 <st_16>:
#endif

#if !FF_FS_READONLY
static void st_16 (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	887a      	ldrh	r2, [r7, #2]
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	887b      	ldrh	r3, [r7, #2]
 8007650:	0a1b      	lsrs	r3, r3, #8
 8007652:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	607a      	str	r2, [r7, #4]
 800765a:	887a      	ldrh	r2, [r7, #2]
 800765c:	b2d2      	uxtb	r2, r2
 800765e:	701a      	strb	r2, [r3, #0]
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <st_32>:

static void st_32 (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	607a      	str	r2, [r7, #4]
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	0a1b      	lsrs	r3, r3, #8
 8007686:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	607a      	str	r2, [r7, #4]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	0a1b      	lsrs	r3, r3, #8
 8007698:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	701a      	strb	r2, [r3, #0]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	0a1b      	lsrs	r3, r3, #8
 80076aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	607a      	str	r2, [r7, #4]
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	701a      	strb	r2, [r3, #0]
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <st_64>:

#if FF_FS_EXFAT
static void st_64 (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	60fa      	str	r2, [r7, #12]
 80076d6:	783a      	ldrb	r2, [r7, #0]
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	f04f 0300 	mov.w	r3, #0
 80076e6:	0a02      	lsrs	r2, r0, #8
 80076e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80076ec:	0a0b      	lsrs	r3, r1, #8
 80076ee:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	60fa      	str	r2, [r7, #12]
 80076f8:	783a      	ldrb	r2, [r7, #0]
 80076fa:	701a      	strb	r2, [r3, #0]
 80076fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	0a02      	lsrs	r2, r0, #8
 800770a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800770e:	0a0b      	lsrs	r3, r1, #8
 8007710:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	60fa      	str	r2, [r7, #12]
 800771a:	783a      	ldrb	r2, [r7, #0]
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007722:	f04f 0200 	mov.w	r2, #0
 8007726:	f04f 0300 	mov.w	r3, #0
 800772a:	0a02      	lsrs	r2, r0, #8
 800772c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007730:	0a0b      	lsrs	r3, r1, #8
 8007732:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	60fa      	str	r2, [r7, #12]
 800773c:	783a      	ldrb	r2, [r7, #0]
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007744:	f04f 0200 	mov.w	r2, #0
 8007748:	f04f 0300 	mov.w	r3, #0
 800774c:	0a02      	lsrs	r2, r0, #8
 800774e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007752:	0a0b      	lsrs	r3, r1, #8
 8007754:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	60fa      	str	r2, [r7, #12]
 800775e:	783a      	ldrb	r2, [r7, #0]
 8007760:	701a      	strb	r2, [r3, #0]
 8007762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	f04f 0300 	mov.w	r3, #0
 800776e:	0a02      	lsrs	r2, r0, #8
 8007770:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007774:	0a0b      	lsrs	r3, r1, #8
 8007776:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	60fa      	str	r2, [r7, #12]
 8007780:	783a      	ldrb	r2, [r7, #0]
 8007782:	701a      	strb	r2, [r3, #0]
 8007784:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007788:	f04f 0200 	mov.w	r2, #0
 800778c:	f04f 0300 	mov.w	r3, #0
 8007790:	0a02      	lsrs	r2, r0, #8
 8007792:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007796:	0a0b      	lsrs	r3, r1, #8
 8007798:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	60fa      	str	r2, [r7, #12]
 80077a2:	783a      	ldrb	r2, [r7, #0]
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077aa:	f04f 0200 	mov.w	r2, #0
 80077ae:	f04f 0300 	mov.w	r3, #0
 80077b2:	0a02      	lsrs	r2, r0, #8
 80077b4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80077b8:	0a0b      	lsrs	r3, r1, #8
 80077ba:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	60fa      	str	r2, [r7, #12]
 80077c4:	783a      	ldrb	r2, [r7, #0]
 80077c6:	701a      	strb	r2, [r3, #0]
}
 80077c8:	bf00      	nop
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	4603      	mov	r3, r0
 80077dc:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80077de:	79fb      	ldrb	r3, [r7, #7]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <dbc_1st+0x14>
 80077e4:	2300      	movs	r3, #0
 80077e6:	e000      	b.n	80077ea <dbc_1st+0x16>
#endif
	return 0;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	4603      	mov	r3, r0
 80077fe:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007800:	79fb      	ldrb	r3, [r7, #7]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <dbc_2nd+0x14>
 8007806:	2300      	movs	r3, #0
 8007808:	e000      	b.n	800780c <dbc_2nd+0x16>
#endif
	return 0;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE sb;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	617a      	str	r2, [r7, #20]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 8007830:	8a7b      	ldrh	r3, [r7, #18]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	4618      	mov	r0, r3
 8007836:	f7ff ffcd 	bl	80077d4 <dbc_1st>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d015      	beq.n	800786c <tchar2uni+0x54>
		sb = (BYTE)*p++;		/* Get 2nd byte */
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	617a      	str	r2, [r7, #20]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(sb)) return 0xFFFFFFFF;	/* Invalid code? */
 800784a:	7c7b      	ldrb	r3, [r7, #17]
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff ffd2 	bl	80077f6 <dbc_2nd>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <tchar2uni+0x46>
 8007858:	f04f 33ff 	mov.w	r3, #4294967295
 800785c:	e01d      	b.n	800789a <tchar2uni+0x82>
		wc = (wc << 8) + sb;	/* Make a DBC */
 800785e:	8a7b      	ldrh	r3, [r7, #18]
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	b29a      	uxth	r2, r3
 8007864:	7c7b      	ldrb	r3, [r7, #17]
 8007866:	b29b      	uxth	r3, r3
 8007868:	4413      	add	r3, r2
 800786a:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 800786c:	8a7b      	ldrh	r3, [r7, #18]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00d      	beq.n	800788e <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 8007872:	8a7b      	ldrh	r3, [r7, #18]
 8007874:	f240 11b5 	movw	r1, #437	@ 0x1b5
 8007878:	4618      	mov	r0, r3
 800787a:	f004 ff33 	bl	800c6e4 <ff_oem2uni>
 800787e:	4603      	mov	r3, r0
 8007880:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 8007882:	8a7b      	ldrh	r3, [r7, #18]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <tchar2uni+0x76>
 8007888:	f04f 33ff 	mov.w	r3, #4294967295
 800788c:	e005      	b.n	800789a <tchar2uni+0x82>
	}
	uc = wc;
 800788e:	8a7b      	ldrh	r3, [r7, #18]
 8007890:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	601a      	str	r2, [r3, #0]
	return uc;
 8007898:	68fb      	ldr	r3, [r7, #12]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80078a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a6:	b089      	sub	sp, #36	@ 0x24
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	60f8      	str	r0, [r7, #12]
	FRESULT res = FR_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	75fb      	strb	r3, [r7, #23]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	791b      	ldrb	r3, [r3, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d044      	beq.n	8007942 <sync_window+0xa0>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	7858      	ldrb	r0, [r3, #1]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078c8:	2601      	movs	r6, #1
 80078ca:	9600      	str	r6, [sp, #0]
 80078cc:	f7f9 fc5a 	bl	8001184 <disk_write>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d133      	bne.n	800793e <sync_window+0x9c>
			fs->wflag = 0;	/* Clear window dirty flag */
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80078e8:	1a84      	subs	r4, r0, r2
 80078ea:	eb61 0503 	sbc.w	r5, r1, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	2200      	movs	r2, #0
 80078f4:	469a      	mov	sl, r3
 80078f6:	4693      	mov	fp, r2
 80078f8:	4554      	cmp	r4, sl
 80078fa:	eb75 030b 	sbcs.w	r3, r5, fp
 80078fe:	d220      	bcs.n	8007942 <sync_window+0xa0>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	78db      	ldrb	r3, [r3, #3]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d11c      	bne.n	8007942 <sync_window+0xa0>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	7858      	ldrb	r0, [r3, #1]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007918:	68f9      	ldr	r1, [r7, #12]
 800791a:	69c9      	ldr	r1, [r1, #28]
 800791c:	2500      	movs	r5, #0
 800791e:	4688      	mov	r8, r1
 8007920:	46a9      	mov	r9, r5
 8007922:	eb12 0108 	adds.w	r1, r2, r8
 8007926:	6039      	str	r1, [r7, #0]
 8007928:	eb43 0309 	adc.w	r3, r3, r9
 800792c:	607b      	str	r3, [r7, #4]
 800792e:	2301      	movs	r3, #1
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007936:	4621      	mov	r1, r4
 8007938:	f7f9 fc24 	bl	8001184 <disk_write>
 800793c:	e001      	b.n	8007942 <sync_window+0xa0>
			}
		} else {
			res = FR_DISK_ERR;
 800793e:	2301      	movs	r3, #1
 8007940:	75fb      	strb	r3, [r7, #23]
		}
	}
	return res;
 8007942:	7dfb      	ldrb	r3, [r7, #23]
}
 8007944:	4618      	mov	r0, r3
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800794e <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b088      	sub	sp, #32
 8007952:	af02      	add	r7, sp, #8
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	e9c7 2300 	strd	r2, r3, [r7]
	FRESULT res = FR_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	75fb      	strb	r3, [r7, #23]


	if (sect != fs->winsect) {	/* Window offset changed? */
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007964:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007968:	4299      	cmp	r1, r3
 800796a:	bf08      	it	eq
 800796c:	4290      	cmpeq	r0, r2
 800796e:	d022      	beq.n	80079b6 <move_window+0x68>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7ff ff96 	bl	80078a2 <sync_window>
 8007976:	4603      	mov	r3, r0
 8007978:	75fb      	strb	r3, [r7, #23]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800797a:	7dfb      	ldrb	r3, [r7, #23]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d11a      	bne.n	80079b6 <move_window+0x68>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	7858      	ldrb	r0, [r3, #1]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800798a:	2301      	movs	r3, #1
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007992:	f7f9 fbcb 	bl	800112c <disk_read>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d007      	beq.n	80079ac <move_window+0x5e>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800799c:	f04f 32ff 	mov.w	r2, #4294967295
 80079a0:	f04f 33ff 	mov.w	r3, #4294967295
 80079a4:	e9c7 2300 	strd	r2, r3, [r7]
				res = FR_DISK_ERR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	75fb      	strb	r3, [r7, #23]
			}
			fs->winsect = sect;
 80079ac:	68f9      	ldr	r1, [r7, #12]
 80079ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079b2:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
	}
	return res;
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 80079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	b08f      	sub	sp, #60	@ 0x3c
 80079c6:	af02      	add	r7, sp, #8
 80079c8:	6278      	str	r0, [r7, #36]	@ 0x24
	FRESULT res;


	res = sync_window(fs);
 80079ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80079cc:	f7ff ff69 	bl	80078a2 <sync_window>
 80079d0:	4603      	mov	r3, r0
 80079d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK) {
 80079d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f040 80dc 	bne.w	8007b98 <sync_fs+0x1d8>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
 80079e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e2:	795b      	ldrb	r3, [r3, #5]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	f040 80ca 	bne.w	8007b7e <sync_fs+0x1be>
			fs->fsi_flag = 0;
 80079ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ec:	2300      	movs	r3, #0
 80079ee:	7153      	strb	r3, [r2, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d14b      	bne.n	8007a90 <sync_fs+0xd0>
				/* Create FSInfo structure */
				memset(fs->win, 0, sizeof fs->win);
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fa:	3354      	adds	r3, #84	@ 0x54
 80079fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a00:	2100      	movs	r1, #0
 8007a02:	4618      	mov	r0, r3
 8007a04:	f009 f9fd 	bl	8010e02 <memset>
				st_32(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8007a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0a:	3354      	adds	r3, #84	@ 0x54
 8007a0c:	4966      	ldr	r1, [pc, #408]	@ (8007ba8 <sync_fs+0x1e8>)
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff fe2c 	bl	800766c <st_32>
				st_32(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8007a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a16:	3354      	adds	r3, #84	@ 0x54
 8007a18:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007a1c:	4963      	ldr	r1, [pc, #396]	@ (8007bac <sync_fs+0x1ec>)
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff fe24 	bl	800766c <st_32>
				st_32(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8007a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a26:	3354      	adds	r3, #84	@ 0x54
 8007a28:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	4619      	mov	r1, r3
 8007a32:	4610      	mov	r0, r2
 8007a34:	f7ff fe1a 	bl	800766c <st_32>
				st_32(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8007a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3a:	3354      	adds	r3, #84	@ 0x54
 8007a3c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	4619      	mov	r1, r3
 8007a46:	4610      	mov	r0, r2
 8007a48:	f7ff fe10 	bl	800766c <st_32>
				st_32(fs->win + FSI_TrailSig, 0xAA550000);		/* Trailing signature */
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4e:	3354      	adds	r3, #84	@ 0x54
 8007a50:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8007a54:	4956      	ldr	r1, [pc, #344]	@ (8007bb0 <sync_fs+0x1f0>)
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff fe08 	bl	800766c <st_32>
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5e:	7858      	ldrb	r0, [r3, #1]
 8007a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a62:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a68:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007a6c:	1c54      	adds	r4, r2, #1
 8007a6e:	61bc      	str	r4, [r7, #24]
 8007a70:	f143 0300 	adc.w	r3, r3, #0
 8007a74:	61fb      	str	r3, [r7, #28]
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8007a7c:	e9c3 4508 	strd	r4, r5, [r3, #32]
 8007a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a86:	2401      	movs	r4, #1
 8007a88:	9400      	str	r4, [sp, #0]
 8007a8a:	f7f9 fb7b 	bl	8001184 <disk_write>
 8007a8e:	e076      	b.n	8007b7e <sync_fs+0x1be>
			}
#if FF_FS_EXFAT
			else if (fs->fs_type == FS_EXFAT) {	/* exFAT: Update PercInUse field in BPB */
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	d172      	bne.n	8007b7e <sync_fs+0x1be>
				if (disk_read(fs->pdrv, fs->win, fs->winsect = fs->volbase, 1) == RES_OK) {	/* Load VBR */
 8007a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9a:	f893 c001 	ldrb.w	ip, [r3, #1]
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	f103 0654 	add.w	r6, r3, #84	@ 0x54
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aac:	e9c3 0108 	strd	r0, r1, [r3, #32]
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	4631      	mov	r1, r6
 8007ac0:	4660      	mov	r0, ip
 8007ac2:	f7f9 fb33 	bl	800112c <disk_read>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d158      	bne.n	8007b7e <sync_fs+0x1be>
					BYTE perc_inuse = (fs->free_clst <= fs->n_fatent - 2) ? (BYTE)((QWORD)(fs->n_fatent - 2 - fs->free_clst) * 100 / (fs->n_fatent - 2)) : 0xFF;	/* Precent in use 0-100 or 0xFF(unknown) */
 8007acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ace:	695a      	ldr	r2, [r3, #20]
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	3b02      	subs	r3, #2
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d836      	bhi.n	8007b48 <sync_fs+0x188>
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	699a      	ldr	r2, [r3, #24]
 8007ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	3b02      	subs	r3, #2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	4698      	mov	r8, r3
 8007aea:	4691      	mov	r9, r2
 8007aec:	4642      	mov	r2, r8
 8007aee:	464b      	mov	r3, r9
 8007af0:	1891      	adds	r1, r2, r2
 8007af2:	6039      	str	r1, [r7, #0]
 8007af4:	415b      	adcs	r3, r3
 8007af6:	607b      	str	r3, [r7, #4]
 8007af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007afc:	eb12 0408 	adds.w	r4, r2, r8
 8007b00:	eb43 0509 	adc.w	r5, r3, r9
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	016b      	lsls	r3, r5, #5
 8007b0e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8007b12:	0162      	lsls	r2, r4, #5
 8007b14:	eb14 0a02 	adds.w	sl, r4, r2
 8007b18:	eb45 0b03 	adc.w	fp, r5, r3
 8007b1c:	eb1a 0308 	adds.w	r3, sl, r8
 8007b20:	613b      	str	r3, [r7, #16]
 8007b22:	eb4b 0309 	adc.w	r3, fp, r9
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	3b02      	subs	r3, #2
 8007b2e:	2200      	movs	r2, #0
 8007b30:	60bb      	str	r3, [r7, #8]
 8007b32:	60fa      	str	r2, [r7, #12]
 8007b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007b3c:	f7f8 fbe6 	bl	800030c <__aeabi_uldivmod>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	b2d3      	uxtb	r3, r2
 8007b46:	e000      	b.n	8007b4a <sync_fs+0x18a>
 8007b48:	23ff      	movs	r3, #255	@ 0xff
 8007b4a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

					if (fs->win[BPB_PercInUseEx] != perc_inuse) {	/* Write it back into VBR if needed */
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b50:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8007b54:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d010      	beq.n	8007b7e <sync_fs+0x1be>
						fs->win[BPB_PercInUseEx] = perc_inuse;
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007b62:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	7858      	ldrb	r0, [r3, #1]
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8007b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b76:	2401      	movs	r4, #1
 8007b78:	9400      	str	r4, [sp, #0]
 8007b7a:	f7f9 fb03 	bl	8001184 <disk_write>
				}
			}
#endif
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b80:	785b      	ldrb	r3, [r3, #1]
 8007b82:	2200      	movs	r2, #0
 8007b84:	2100      	movs	r1, #0
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7f9 fb28 	bl	80011dc <disk_ioctl>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d002      	beq.n	8007b98 <sync_fs+0x1d8>
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	return res;
 8007b98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3734      	adds	r7, #52	@ 0x34
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba6:	bf00      	nop
 8007ba8:	41615252 	.word	0x41615252
 8007bac:	61417272 	.word	0x61417272
 8007bb0:	aa550000 	.word	0xaa550000

08007bb4 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007bb4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	3902      	subs	r1, #2
 8007bc4:	6039      	str	r1, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	6989      	ldr	r1, [r1, #24]
 8007bca:	3902      	subs	r1, #2
 8007bcc:	6838      	ldr	r0, [r7, #0]
 8007bce:	4288      	cmp	r0, r1
 8007bd0:	d304      	bcc.n	8007bdc <clst2sect+0x28>
 8007bd2:	f04f 0a00 	mov.w	sl, #0
 8007bd6:	f04f 0b00 	mov.w	fp, #0
 8007bda:	e01b      	b.n	8007c14 <clst2sect+0x60>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	@ 0x40
 8007be2:	687e      	ldr	r6, [r7, #4]
 8007be4:	8976      	ldrh	r6, [r6, #10]
 8007be6:	b2b6      	uxth	r6, r6
 8007be8:	f04f 0c00 	mov.w	ip, #0
 8007bec:	46b0      	mov	r8, r6
 8007bee:	46e1      	mov	r9, ip
 8007bf0:	683e      	ldr	r6, [r7, #0]
 8007bf2:	f04f 0c00 	mov.w	ip, #0
 8007bf6:	4634      	mov	r4, r6
 8007bf8:	4665      	mov	r5, ip
 8007bfa:	fb04 fc09 	mul.w	ip, r4, r9
 8007bfe:	fb08 f605 	mul.w	r6, r8, r5
 8007c02:	4466      	add	r6, ip
 8007c04:	fba8 2304 	umull	r2, r3, r8, r4
 8007c08:	18f4      	adds	r4, r6, r3
 8007c0a:	4623      	mov	r3, r4
 8007c0c:	eb10 0a02 	adds.w	sl, r0, r2
 8007c10:	eb41 0b03 	adc.w	fp, r1, r3
}
 8007c14:	4652      	mov	r2, sl
 8007c16:	465b      	mov	r3, fp
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c24:	4770      	bx	lr
	...

08007c28 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8007c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c2c:	b09a      	sub	sp, #104	@ 0x68
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007c32:	64b9      	str	r1, [r7, #72]	@ 0x48
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	663b      	str	r3, [r7, #96]	@ 0x60


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d904      	bls.n	8007c4a <get_fat+0x22>
 8007c40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c42:	699a      	ldr	r2, [r3, #24]
 8007c44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d302      	bcc.n	8007c50 <get_fat+0x28>
		val = 1;	/* Internal error */
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c4e:	e14e      	b.n	8007eee <get_fat+0x2c6>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007c50:	f04f 33ff 	mov.w	r3, #4294967295
 8007c54:	667b      	str	r3, [r7, #100]	@ 0x64

		switch (fs->fs_type) {
 8007c56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	f200 813a 	bhi.w	8007ed6 <get_fat+0x2ae>
 8007c62:	a201      	add	r2, pc, #4	@ (adr r2, 8007c68 <get_fat+0x40>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007c79 	.word	0x08007c79
 8007c6c:	08007d33 	.word	0x08007d33
 8007c70:	08007d83 	.word	0x08007d83
 8007c74:	08007dd1 	.word	0x08007dd1
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007c78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c82:	4413      	add	r3, r2
 8007c84:	657b      	str	r3, [r7, #84]	@ 0x54
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c88:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007c8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c8e:	0a49      	lsrs	r1, r1, #9
 8007c90:	2000      	movs	r0, #0
 8007c92:	6439      	str	r1, [r7, #64]	@ 0x40
 8007c94:	6478      	str	r0, [r7, #68]	@ 0x44
 8007c96:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	1851      	adds	r1, r2, r1
 8007c9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	eb43 0101 	adc.w	r1, r3, r1
 8007ca6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007ca8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007cac:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8007cae:	f7ff fe4e 	bl	800794e <move_window>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f040 8111 	bne.w	8007edc <get_fat+0x2b4>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8007cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	657a      	str	r2, [r7, #84]	@ 0x54
 8007cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007ccc:	653b      	str	r3, [r7, #80]	@ 0x50
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cd0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007cd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cd6:	0a49      	lsrs	r1, r1, #9
 8007cd8:	2000      	movs	r0, #0
 8007cda:	6339      	str	r1, [r7, #48]	@ 0x30
 8007cdc:	6378      	str	r0, [r7, #52]	@ 0x34
 8007cde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	1851      	adds	r1, r2, r1
 8007ce6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007ce8:	4629      	mov	r1, r5
 8007cea:	eb43 0101 	adc.w	r1, r3, r1
 8007cee:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007cf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007cf4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8007cf6:	f7ff fe2a 	bl	800794e <move_window>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f040 80ef 	bne.w	8007ee0 <get_fat+0x2b8>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8007d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007d10:	021b      	lsls	r3, r3, #8
 8007d12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d14:	4313      	orrs	r3, r2
 8007d16:	653b      	str	r3, [r7, #80]	@ 0x50
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8007d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <get_fat+0x100>
 8007d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d24:	091b      	lsrs	r3, r3, #4
 8007d26:	e002      	b.n	8007d2e <get_fat+0x106>
 8007d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d2e:	667b      	str	r3, [r7, #100]	@ 0x64
			break;
 8007d30:	e0dd      	b.n	8007eee <get_fat+0x2c6>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007d38:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007d3a:	0a09      	lsrs	r1, r1, #8
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	6239      	str	r1, [r7, #32]
 8007d40:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007d46:	4621      	mov	r1, r4
 8007d48:	1851      	adds	r1, r2, r1
 8007d4a:	61b9      	str	r1, [r7, #24]
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	eb43 0101 	adc.w	r1, r3, r1
 8007d52:	61f9      	str	r1, [r7, #28]
 8007d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d58:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8007d5a:	f7ff fdf8 	bl	800794e <move_window>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f040 80bf 	bne.w	8007ee4 <get_fat+0x2bc>
			val = ld_16(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8007d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d68:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8007d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007d74:	4413      	add	r3, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fb46 	bl	8007408 <ld_16>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	667b      	str	r3, [r7, #100]	@ 0x64
			break;
 8007d80:	e0b5      	b.n	8007eee <get_fat+0x2c6>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d84:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007d88:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007d8a:	09c9      	lsrs	r1, r1, #7
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	468a      	mov	sl, r1
 8007d90:	4683      	mov	fp, r0
 8007d92:	eb12 010a 	adds.w	r1, r2, sl
 8007d96:	6139      	str	r1, [r7, #16]
 8007d98:	eb43 030b 	adc.w	r3, r3, fp
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007da2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8007da4:	f7ff fdd3 	bl	800794e <move_window>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f040 809c 	bne.w	8007ee8 <get_fat+0x2c0>
			val = ld_32(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8007db0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007db2:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8007db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007dbe:	4413      	add	r3, r2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff fb3a 	bl	800743a <ld_32>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007dcc:	667b      	str	r3, [r7, #100]	@ 0x64
			break;
 8007dce:	e08e      	b.n	8007eee <get_fat+0x2c6>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8007dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dd2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	d003      	beq.n	8007de2 <get_fat+0x1ba>
 8007dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d103      	bne.n	8007dea <get_fat+0x1c2>
 8007de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007de4:	79db      	ldrb	r3, [r3, #7]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d172      	bne.n	8007ed0 <get_fat+0x2a8>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8007dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8007df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007df6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007dfa:	1e54      	subs	r4, r2, #1
 8007dfc:	f143 35ff 	adc.w	r5, r3, #4294967295
 8007e00:	f04f 0000 	mov.w	r0, #0
 8007e04:	f04f 0100 	mov.w	r1, #0
 8007e08:	0a60      	lsrs	r0, r4, #9
 8007e0a:	ea40 50c5 	orr.w	r0, r0, r5, lsl #23
 8007e0e:	0a69      	lsrs	r1, r5, #9
 8007e10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e12:	895b      	ldrh	r3, [r3, #10]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	2200      	movs	r2, #0
 8007e18:	60bb      	str	r3, [r7, #8]
 8007e1a:	60fa      	str	r2, [r7, #12]
 8007e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e20:	f7f8 fa74 	bl	800030c <__aeabi_uldivmod>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4613      	mov	r3, r2
 8007e2a:	65bb      	str	r3, [r7, #88]	@ 0x58

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8007e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e2e:	79db      	ldrb	r3, [r3, #7]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d10e      	bne.n	8007e52 <get_fat+0x22a>
 8007e34:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d80a      	bhi.n	8007e52 <get_fat+0x22a>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8007e3c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d002      	beq.n	8007e4a <get_fat+0x222>
 8007e44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e46:	3301      	adds	r3, #1
 8007e48:	e001      	b.n	8007e4e <get_fat+0x226>
 8007e4a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007e4e:	667b      	str	r3, [r7, #100]	@ 0x64
					break;
 8007e50:	e04d      	b.n	8007eee <get_fat+0x2c6>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8007e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e54:	79db      	ldrb	r3, [r3, #7]
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d108      	bne.n	8007e6c <get_fat+0x244>
 8007e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d203      	bcs.n	8007e6c <get_fat+0x244>
					val = clst + 1; 	/* Generate the value */
 8007e64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e66:	3301      	adds	r3, #1
 8007e68:	667b      	str	r3, [r7, #100]	@ 0x64
					break;
 8007e6a:	e040      	b.n	8007eee <get_fat+0x2c6>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8007e6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e6e:	79db      	ldrb	r3, [r3, #7]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d02d      	beq.n	8007ed0 <get_fat+0x2a8>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8007e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <get_fat+0x25c>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8007e7c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007e80:	667b      	str	r3, [r7, #100]	@ 0x64
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_32(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8007e82:	e034      	b.n	8007eee <get_fat+0x2c6>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e86:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007e8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007e8c:	09c9      	lsrs	r1, r1, #7
 8007e8e:	2000      	movs	r0, #0
 8007e90:	4688      	mov	r8, r1
 8007e92:	4681      	mov	r9, r0
 8007e94:	eb12 0108 	adds.w	r1, r2, r8
 8007e98:	6039      	str	r1, [r7, #0]
 8007e9a:	eb43 0309 	adc.w	r3, r3, r9
 8007e9e:	607b      	str	r3, [r7, #4]
 8007ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ea4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8007ea6:	f7ff fd52 	bl	800794e <move_window>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d11d      	bne.n	8007eec <get_fat+0x2c4>
						val = ld_32(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8007eb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007eb2:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8007eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007ebe:	4413      	add	r3, r2
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7ff faba 	bl	800743a <ld_32>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ecc:	667b      	str	r3, [r7, #100]	@ 0x64
					break;
 8007ece:	e00e      	b.n	8007eee <get_fat+0x2c6>
				}
			}
			val = 1;	/* Internal error */
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	667b      	str	r3, [r7, #100]	@ 0x64
			break;
 8007ed4:	e00b      	b.n	8007eee <get_fat+0x2c6>
#endif
		default:
			val = 1;	/* Internal error */
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eda:	e008      	b.n	8007eee <get_fat+0x2c6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007edc:	bf00      	nop
 8007ede:	e006      	b.n	8007eee <get_fat+0x2c6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ee0:	bf00      	nop
 8007ee2:	e004      	b.n	8007eee <get_fat+0x2c6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ee4:	bf00      	nop
 8007ee6:	e002      	b.n	8007eee <get_fat+0x2c6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ee8:	bf00      	nop
 8007eea:	e000      	b.n	8007eee <get_fat+0x2c6>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007eec:	bf00      	nop
		}
	}

	return val;
 8007eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3768      	adds	r7, #104	@ 0x68
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007efa:	bf00      	nop

08007efc <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f00:	b092      	sub	sp, #72	@ 0x48
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f06:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f08:	62fa      	str	r2, [r7, #44]	@ 0x2c
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	f240 8110 	bls.w	8008138 <put_fat+0x23c>
 8007f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1a:	699a      	ldr	r2, [r3, #24]
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	f080 810a 	bcs.w	8008138 <put_fat+0x23c>
		switch (fs->fs_type) {
 8007f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	f300 8105 	bgt.w	8008138 <put_fat+0x23c>
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	f280 80bc 	bge.w	80080ac <put_fat+0x1b0>
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d003      	beq.n	8007f40 <put_fat+0x44>
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	f000 808b 	beq.w	8008054 <put_fat+0x158>
 8007f3e:	e0fb      	b.n	8008138 <put_fat+0x23c>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8007f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f42:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f46:	085b      	lsrs	r3, r3, #1
 8007f48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f4a:	4413      	add	r3, r2
 8007f4c:	643b      	str	r3, [r7, #64]	@ 0x40
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f50:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007f54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f56:	0a49      	lsrs	r1, r1, #9
 8007f58:	2000      	movs	r0, #0
 8007f5a:	6239      	str	r1, [r7, #32]
 8007f5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f5e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007f62:	4621      	mov	r1, r4
 8007f64:	1851      	adds	r1, r2, r1
 8007f66:	61b9      	str	r1, [r7, #24]
 8007f68:	4629      	mov	r1, r5
 8007f6a:	eb43 0101 	adc.w	r1, r3, r1
 8007f6e:	61f9      	str	r1, [r7, #28]
 8007f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f74:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007f76:	f7ff fcea 	bl	800794e <move_window>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			if (res != FR_OK) break;
 8007f80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f040 80d0 	bne.w	800812a <put_fat+0x22e>
			p = fs->win + bc++ % SS(fs);
 8007f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8c:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8007f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f92:	1c59      	adds	r1, r3, #1
 8007f94:	6439      	str	r1, [r7, #64]	@ 0x40
 8007f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9a:	4413      	add	r3, r2
 8007f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00d      	beq.n	8007fc4 <put_fat+0xc8>
 8007fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	b25b      	sxtb	r3, r3
 8007fae:	f003 030f 	and.w	r3, r3, #15
 8007fb2:	b25a      	sxtb	r2, r3
 8007fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb6:	b25b      	sxtb	r3, r3
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	b25b      	sxtb	r3, r3
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	b25b      	sxtb	r3, r3
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	e001      	b.n	8007fc8 <put_fat+0xcc>
 8007fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007fca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fce:	2201      	movs	r2, #1
 8007fd0:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007fd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fda:	0a49      	lsrs	r1, r1, #9
 8007fdc:	2000      	movs	r0, #0
 8007fde:	468a      	mov	sl, r1
 8007fe0:	4683      	mov	fp, r0
 8007fe2:	eb12 010a 	adds.w	r1, r2, sl
 8007fe6:	6139      	str	r1, [r7, #16]
 8007fe8:	eb43 030b 	adc.w	r3, r3, fp
 8007fec:	617b      	str	r3, [r7, #20]
 8007fee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ff2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007ff4:	f7ff fcab 	bl	800794e <move_window>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			if (res != FR_OK) break;
 8007ffe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008002:	2b00      	cmp	r3, #0
 8008004:	f040 8093 	bne.w	800812e <put_fat+0x232>
			p = fs->win + bc % SS(fs);
 8008008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800800a:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800800e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008014:	4413      	add	r3, r2
 8008016:	63fb      	str	r3, [r7, #60]	@ 0x3c
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8008018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <put_fat+0x12e>
 8008022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008024:	091b      	lsrs	r3, r3, #4
 8008026:	b2db      	uxtb	r3, r3
 8008028:	e00e      	b.n	8008048 <put_fat+0x14c>
 800802a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	b25b      	sxtb	r3, r3
 8008030:	f023 030f 	bic.w	r3, r3, #15
 8008034:	b25a      	sxtb	r2, r3
 8008036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008038:	0a1b      	lsrs	r3, r3, #8
 800803a:	b25b      	sxtb	r3, r3
 800803c:	f003 030f 	and.w	r3, r3, #15
 8008040:	b25b      	sxtb	r3, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	b25b      	sxtb	r3, r3
 8008046:	b2db      	uxtb	r3, r3
 8008048:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800804a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800804c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800804e:	2201      	movs	r2, #1
 8008050:	711a      	strb	r2, [r3, #4]
			break;
 8008052:	e071      	b.n	8008138 <put_fat+0x23c>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008056:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800805a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800805c:	0a09      	lsrs	r1, r1, #8
 800805e:	2000      	movs	r0, #0
 8008060:	4688      	mov	r8, r1
 8008062:	4681      	mov	r9, r0
 8008064:	eb12 0108 	adds.w	r1, r2, r8
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	eb43 0309 	adc.w	r3, r3, r9
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008074:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008076:	f7ff fc6a 	bl	800794e <move_window>
 800807a:	4603      	mov	r3, r0
 800807c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			if (res != FR_OK) break;
 8008080:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008084:	2b00      	cmp	r3, #0
 8008086:	d154      	bne.n	8008132 <put_fat+0x236>
			st_16(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8008088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800808a:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800808e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008096:	4413      	add	r3, r2
 8008098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800809a:	b292      	uxth	r2, r2
 800809c:	4611      	mov	r1, r2
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff fac9 	bl	8007636 <st_16>
			fs->wflag = 1;
 80080a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a6:	2201      	movs	r2, #1
 80080a8:	711a      	strb	r2, [r3, #4]
			break;
 80080aa:	e045      	b.n	8008138 <put_fat+0x23c>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80080ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ae:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80080b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080b4:	09c9      	lsrs	r1, r1, #7
 80080b6:	2000      	movs	r0, #0
 80080b8:	460c      	mov	r4, r1
 80080ba:	4605      	mov	r5, r0
 80080bc:	1911      	adds	r1, r2, r4
 80080be:	6039      	str	r1, [r7, #0]
 80080c0:	416b      	adcs	r3, r5
 80080c2:	607b      	str	r3, [r7, #4]
 80080c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80080ca:	f7ff fc40 	bl	800794e <move_window>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			if (res != FR_OK) break;
 80080d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d12c      	bne.n	8008136 <put_fat+0x23a>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80080dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d012      	beq.n	800810a <put_fat+0x20e>
				val = (val & 0x0FFFFFFF) | (ld_32(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80080e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e6:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80080ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ec:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 80080f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80080f8:	4413      	add	r3, r2
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7ff f99d 	bl	800743a <ld_32>
 8008100:	4603      	mov	r3, r0
 8008102:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008106:	4323      	orrs	r3, r4
 8008108:	62fb      	str	r3, [r7, #44]	@ 0x2c
			}
			st_32(fs->win + clst * 4 % SS(fs), val);
 800810a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800810c:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8008110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008118:	4413      	add	r3, r2
 800811a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800811c:	4618      	mov	r0, r3
 800811e:	f7ff faa5 	bl	800766c <st_32>
			fs->wflag = 1;
 8008122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008124:	2201      	movs	r2, #1
 8008126:	711a      	strb	r2, [r3, #4]
			break;
 8008128:	e006      	b.n	8008138 <put_fat+0x23c>
			if (res != FR_OK) break;
 800812a:	bf00      	nop
 800812c:	e004      	b.n	8008138 <put_fat+0x23c>
			if (res != FR_OK) break;
 800812e:	bf00      	nop
 8008130:	e002      	b.n	8008138 <put_fat+0x23c>
			if (res != FR_OK) break;
 8008132:	bf00      	nop
 8008134:	e000      	b.n	8008138 <put_fat+0x23c>
			if (res != FR_OK) break;
 8008136:	bf00      	nop
		}
	}
	return res;
 8008138:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800813c:	4618      	mov	r0, r3
 800813e:	3748      	adds	r7, #72	@ 0x48
 8008140:	46bd      	mov	sp, r7
 8008142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008146 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8008146:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800814a:	b08a      	sub	sp, #40	@ 0x28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	3b02      	subs	r3, #2
 8008158:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	3b02      	subs	r3, #2
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	429a      	cmp	r2, r3
 8008164:	d301      	bcc.n	800816a <find_bitmap+0x24>
 8008166:	2300      	movs	r3, #0
 8008168:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	61fb      	str	r3, [r7, #28]
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	61bb      	str	r3, [r7, #24]
 8008172:	2300      	movs	r3, #0
 8008174:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800817c:	69f9      	ldr	r1, [r7, #28]
 800817e:	0b09      	lsrs	r1, r1, #12
 8008180:	2000      	movs	r0, #0
 8008182:	460c      	mov	r4, r1
 8008184:	4605      	mov	r5, r0
 8008186:	eb12 0804 	adds.w	r8, r2, r4
 800818a:	eb43 0905 	adc.w	r9, r3, r5
 800818e:	4642      	mov	r2, r8
 8008190:	464b      	mov	r3, r9
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f7ff fbdb 	bl	800794e <move_window>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <find_bitmap+0x5e>
 800819e:	f04f 33ff 	mov.w	r3, #4294967295
 80081a2:	e051      	b.n	8008248 <find_bitmap+0x102>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	08db      	lsrs	r3, r3, #3
 80081a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ac:	623b      	str	r3, [r7, #32]
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	f003 0307 	and.w	r3, r3, #7
 80081b4:	2201      	movs	r2, #1
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	4413      	add	r3, r2
 80081c4:	3354      	adds	r3, #84	@ 0x54
 80081c6:	781a      	ldrb	r2, [r3, #0]
 80081c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081cc:	4013      	ands	r3, r2
 80081ce:	74fb      	strb	r3, [r7, #19]
 80081d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	3301      	adds	r3, #1
 80081de:	61fb      	str	r3, [r7, #28]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	3b02      	subs	r3, #2
 80081e6:	69fa      	ldr	r2, [r7, #28]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d307      	bcc.n	80081fc <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 80081ec:	2300      	movs	r3, #0
 80081ee:	61fb      	str	r3, [r7, #28]
 80081f0:	2300      	movs	r3, #0
 80081f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80081f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081fa:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 80081fc:	7cfb      	ldrb	r3, [r7, #19]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d109      	bne.n	8008216 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	3301      	adds	r3, #1
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d106      	bne.n	800821e <find_bitmap+0xd8>
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	3302      	adds	r3, #2
 8008214:	e018      	b.n	8008248 <find_bitmap+0x102>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	61bb      	str	r3, [r7, #24]
 800821a:	2300      	movs	r3, #0
 800821c:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800821e:	69fa      	ldr	r2, [r7, #28]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	429a      	cmp	r2, r3
 8008224:	d101      	bne.n	800822a <find_bitmap+0xe4>
 8008226:	2300      	movs	r3, #0
 8008228:	e00e      	b.n	8008248 <find_bitmap+0x102>
			} while (bm != 0);
 800822a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1c5      	bne.n	80081be <find_bitmap+0x78>
			bm = 1;
 8008232:	2301      	movs	r3, #1
 8008234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	3301      	adds	r3, #1
 800823c:	623b      	str	r3, [r7, #32]
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008244:	d3bb      	bcc.n	80081be <find_bitmap+0x78>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8008246:	e796      	b.n	8008176 <find_bitmap+0x30>
	}
}
 8008248:	4618      	mov	r0, r3
 800824a:	3728      	adds	r7, #40	@ 0x28
 800824c:	46bd      	mov	sp, r7
 800824e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08008252 <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8008252:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	3b02      	subs	r3, #2
 8008266:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800826e:	68b9      	ldr	r1, [r7, #8]
 8008270:	0b09      	lsrs	r1, r1, #12
 8008272:	2000      	movs	r0, #0
 8008274:	460c      	mov	r4, r1
 8008276:	4605      	mov	r5, r0
 8008278:	eb12 0a04 	adds.w	sl, r2, r4
 800827c:	eb43 0b05 	adc.w	fp, r3, r5
 8008280:	e9c7 ab04 	strd	sl, fp, [r7, #16]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	08db      	lsrs	r3, r3, #3
 8008288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f003 0307 	and.w	r3, r3, #7
 8008294:	2201      	movs	r2, #1
 8008296:	fa02 f303 	lsl.w	r3, r2, r3
 800829a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800829c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80082a0:	f112 0801 	adds.w	r8, r2, #1
 80082a4:	f143 0900 	adc.w	r9, r3, #0
 80082a8:	e9c7 8904 	strd	r8, r9, [r7, #16]
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff fb4e 	bl	800794e <move_window>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <change_bitmap+0x6a>
 80082b8:	2301      	movs	r3, #1
 80082ba:	e03d      	b.n	8008338 <change_bitmap+0xe6>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	4413      	add	r3, r2
 80082c2:	3354      	adds	r3, #84	@ 0x54
 80082c4:	781a      	ldrb	r2, [r3, #0]
 80082c6:	7ffb      	ldrb	r3, [r7, #31]
 80082c8:	4013      	ands	r3, r2
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bf14      	ite	ne
 80082d0:	2301      	movne	r3, #1
 80082d2:	2300      	moveq	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	461a      	mov	r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	4293      	cmp	r3, r2
 80082dc:	d101      	bne.n	80082e2 <change_bitmap+0x90>
 80082de:	2302      	movs	r3, #2
 80082e0:	e02a      	b.n	8008338 <change_bitmap+0xe6>
				fs->win[i] ^= bm;	/* Flip the bit */
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	4413      	add	r3, r2
 80082e8:	3354      	adds	r3, #84	@ 0x54
 80082ea:	781a      	ldrb	r2, [r3, #0]
 80082ec:	7ffb      	ldrb	r3, [r7, #31]
 80082ee:	4053      	eors	r3, r2
 80082f0:	b2d9      	uxtb	r1, r3
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	4413      	add	r3, r2
 80082f8:	3354      	adds	r3, #84	@ 0x54
 80082fa:	460a      	mov	r2, r1
 80082fc:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2201      	movs	r2, #1
 8008302:	711a      	strb	r2, [r3, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3b01      	subs	r3, #1
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <change_bitmap+0xc2>
 8008310:	2300      	movs	r3, #0
 8008312:	e011      	b.n	8008338 <change_bitmap+0xe6>
			} while (bm <<= 1);		/* Next bit */
 8008314:	7ffb      	ldrb	r3, [r7, #31]
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	77fb      	strb	r3, [r7, #31]
 800831a:	7ffb      	ldrb	r3, [r7, #31]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1cd      	bne.n	80082bc <change_bitmap+0x6a>
			bm = 1;
 8008320:	2301      	movs	r3, #1
 8008322:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	3301      	adds	r3, #1
 8008328:	61bb      	str	r3, [r7, #24]
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008330:	d3c4      	bcc.n	80082bc <change_bitmap+0x6a>
		i = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008336:	e7b1      	b.n	800829c <change_bitmap+0x4a>
	}
}
 8008338:	4618      	mov	r0, r3
 800833a:	3720      	adds	r7, #32
 800833c:	46bd      	mov	sp, r7
 800833e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008342 <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b086      	sub	sp, #24
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	79db      	ldrb	r3, [r3, #7]
 800834e:	2b03      	cmp	r3, #3
 8008350:	d121      	bne.n	8008396 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	613b      	str	r3, [r7, #16]
 800835e:	e014      	b.n	800838a <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6818      	ldr	r0, [r3, #0]
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	3301      	adds	r3, #1
 8008368:	461a      	mov	r2, r3
 800836a:	6979      	ldr	r1, [r7, #20]
 800836c:	f7ff fdc6 	bl	8007efc <put_fat>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <fill_first_frag+0x3c>
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	e00c      	b.n	8008398 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	3301      	adds	r3, #1
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	3b01      	subs	r3, #1
 8008388:	613b      	str	r3, [r7, #16]
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e7      	bne.n	8008360 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 80083ac:	e020      	b.n	80083f0 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	1c59      	adds	r1, r3, #1
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d905      	bls.n	80083d0 <fill_last_frag+0x30>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	3302      	adds	r3, #2
 80083ce:	e000      	b.n	80083d2 <fill_last_frag+0x32>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	461a      	mov	r2, r3
 80083d4:	f7ff fd92 	bl	8007efc <put_fat>
 80083d8:	4603      	mov	r3, r0
 80083da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <fill_last_frag+0x46>
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	e009      	b.n	80083fa <fill_last_frag+0x5a>
		obj->n_frag--;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	1e5a      	subs	r2, r3, #1
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1da      	bne.n	80083ae <fill_last_frag+0xe>
	}
	return FR_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b08a      	sub	sp, #40	@ 0x28
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	627b      	str	r3, [r7, #36]	@ 0x24
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d904      	bls.n	8008430 <remove_chain+0x2e>
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	429a      	cmp	r2, r3
 800842e:	d301      	bcc.n	8008434 <remove_chain+0x32>
 8008430:	2302      	movs	r3, #2
 8008432:	e0c4      	b.n	80085be <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d014      	beq.n	8008464 <remove_chain+0x62>
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b04      	cmp	r3, #4
 8008440:	d103      	bne.n	800844a <remove_chain+0x48>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	79db      	ldrb	r3, [r3, #7]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d00c      	beq.n	8008464 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800844a:	f04f 32ff 	mov.w	r2, #4294967295
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	69b8      	ldr	r0, [r7, #24]
 8008452:	f7ff fd53 	bl	8007efc <put_fat>
 8008456:	4603      	mov	r3, r0
 8008458:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800845a:	7ffb      	ldrb	r3, [r7, #31]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <remove_chain+0x62>
 8008460:	7ffb      	ldrb	r3, [r7, #31]
 8008462:	e0ac      	b.n	80085be <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008464:	68b9      	ldr	r1, [r7, #8]
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f7ff fbde 	bl	8007c28 <get_fat>
 800846c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d055      	beq.n	8008520 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d101      	bne.n	800847e <remove_chain+0x7c>
 800847a:	2302      	movs	r3, #2
 800847c:	e09f      	b.n	80085be <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008484:	d101      	bne.n	800848a <remove_chain+0x88>
 8008486:	2301      	movs	r3, #1
 8008488:	e099      	b.n	80085be <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	2b04      	cmp	r3, #4
 8008490:	d00b      	beq.n	80084aa <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008492:	2200      	movs	r2, #0
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	69b8      	ldr	r0, [r7, #24]
 8008498:	f7ff fd30 	bl	8007efc <put_fat>
 800849c:	4603      	mov	r3, r0
 800849e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80084a0:	7ffb      	ldrb	r3, [r7, #31]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <remove_chain+0xa8>
 80084a6:	7ffb      	ldrb	r3, [r7, #31]
 80084a8:	e089      	b.n	80085be <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	695a      	ldr	r2, [r3, #20]
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	3b02      	subs	r3, #2
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d20b      	bcs.n	80084d0 <remove_chain+0xce>
			fs->free_clst++;
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	795b      	ldrb	r3, [r3, #5]
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	715a      	strb	r2, [r3, #5]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	3301      	adds	r3, #1
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d102      	bne.n	80084e0 <remove_chain+0xde>
			ecl = nxt;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	623b      	str	r3, [r7, #32]
 80084de:	e017      	b.n	8008510 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d10f      	bne.n	8008508 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80084e8:	6a3a      	ldr	r2, [r7, #32]
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	2300      	movs	r3, #0
 80084f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084f4:	69b8      	ldr	r0, [r7, #24]
 80084f6:	f7ff feac 	bl	8008252 <change_bitmap>
 80084fa:	4603      	mov	r3, r0
 80084fc:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80084fe:	7ffb      	ldrb	r3, [r7, #31]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <remove_chain+0x106>
 8008504:	7ffb      	ldrb	r3, [r7, #31]
 8008506:	e05a      	b.n	80085be <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	623b      	str	r3, [r7, #32]
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	429a      	cmp	r2, r3
 800851c:	d3a2      	bcc.n	8008464 <remove_chain+0x62>
 800851e:	e000      	b.n	8008522 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8008520:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	2b04      	cmp	r3, #4
 8008528:	d148      	bne.n	80085bc <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d103      	bne.n	8008538 <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	71da      	strb	r2, [r3, #7]
 8008536:	e041      	b.n	80085bc <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	79db      	ldrb	r3, [r3, #7]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d129      	bne.n	8008594 <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8008546:	e017      	b.n	8008578 <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f7ff fb6c 	bl	8007c28 <get_fat>
 8008550:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d801      	bhi.n	800855c <remove_chain+0x15a>
 8008558:	2302      	movs	r3, #2
 800855a:	e030      	b.n	80085be <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008562:	d101      	bne.n	8008568 <remove_chain+0x166>
 8008564:	2301      	movs	r3, #1
 8008566:	e02a      	b.n	80085be <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	3301      	adds	r3, #1
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	429a      	cmp	r2, r3
 8008570:	d107      	bne.n	8008582 <remove_chain+0x180>
					clst++;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	3301      	adds	r3, #1
 8008576:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	429a      	cmp	r2, r3
 800857e:	d1e3      	bne.n	8008548 <remove_chain+0x146>
 8008580:	e000      	b.n	8008584 <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8008582:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	429a      	cmp	r2, r3
 800858a:	d117      	bne.n	80085bc <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2202      	movs	r2, #2
 8008590:	71da      	strb	r2, [r3, #7]
 8008592:	e013      	b.n	80085bc <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	79db      	ldrb	r3, [r3, #7]
 8008598:	2b03      	cmp	r3, #3
 800859a:	d10f      	bne.n	80085bc <remove_chain+0x1ba>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d30a      	bcc.n	80085bc <remove_chain+0x1ba>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	689a      	ldr	r2, [r3, #8]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	4413      	add	r3, r2
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d802      	bhi.n	80085bc <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2202      	movs	r2, #2
 80085ba:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3728      	adds	r7, #40	@ 0x28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b088      	sub	sp, #32
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10d      	bne.n	80085f8 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d004      	beq.n	80085f2 <create_chain+0x2c>
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d31b      	bcc.n	800862a <create_chain+0x64>
 80085f2:	2301      	movs	r3, #1
 80085f4:	61bb      	str	r3, [r7, #24]
 80085f6:	e018      	b.n	800862a <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7ff fb14 	bl	8007c28 <get_fat>
 8008600:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d801      	bhi.n	800860c <create_chain+0x46>
 8008608:	2301      	movs	r3, #1
 800860a:	e117      	b.n	800883c <create_chain+0x276>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008612:	d101      	bne.n	8008618 <create_chain+0x52>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	e111      	b.n	800883c <create_chain+0x276>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	429a      	cmp	r2, r3
 8008620:	d201      	bcs.n	8008626 <create_chain+0x60>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	e10a      	b.n	800883c <create_chain+0x276>
		scl = clst;							/* Cluster to start to find */
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <create_chain+0x70>
 8008632:	2300      	movs	r3, #0
 8008634:	e102      	b.n	800883c <create_chain+0x276>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b04      	cmp	r3, #4
 800863c:	d165      	bne.n	800870a <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800863e:	2201      	movs	r2, #1
 8008640:	69b9      	ldr	r1, [r7, #24]
 8008642:	6938      	ldr	r0, [r7, #16]
 8008644:	f7ff fd7f 	bl	8008146 <find_bitmap>
 8008648:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <create_chain+0x92>
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008656:	d101      	bne.n	800865c <create_chain+0x96>
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	e0ef      	b.n	800883c <create_chain+0x276>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800865c:	2301      	movs	r3, #1
 800865e:	2201      	movs	r2, #1
 8008660:	69f9      	ldr	r1, [r7, #28]
 8008662:	6938      	ldr	r0, [r7, #16]
 8008664:	f7ff fdf5 	bl	8008252 <change_bitmap>
 8008668:	4603      	mov	r3, r0
 800866a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	2b02      	cmp	r3, #2
 8008670:	d101      	bne.n	8008676 <create_chain+0xb0>
 8008672:	2301      	movs	r3, #1
 8008674:	e0e2      	b.n	800883c <create_chain+0x276>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d102      	bne.n	8008682 <create_chain+0xbc>
 800867c:	f04f 33ff 	mov.w	r3, #4294967295
 8008680:	e0dc      	b.n	800883c <create_chain+0x276>
		if (clst == 0) {							/* Is it a new chain? */
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	71da      	strb	r2, [r3, #7]
 800868e:	e011      	b.n	80086b4 <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	79db      	ldrb	r3, [r3, #7]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d10d      	bne.n	80086b4 <create_chain+0xee>
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	3301      	adds	r3, #1
 800869c:	69fa      	ldr	r2, [r7, #28]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d008      	beq.n	80086b4 <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	1ad2      	subs	r2, r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2203      	movs	r2, #3
 80086b2:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	79db      	ldrb	r3, [r3, #7]
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	f000 8098 	beq.w	80087ee <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	3301      	adds	r3, #1
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d10b      	bne.n	80086e0 <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <create_chain+0x112>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	3301      	adds	r3, #1
 80086d6:	e000      	b.n	80086da <create_chain+0x114>
 80086d8:	2302      	movs	r3, #2
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	61d3      	str	r3, [r2, #28]
 80086de:	e086      	b.n	80087ee <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <create_chain+0x128>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff fe54 	bl	80083a0 <fill_last_frag>
 80086f8:	4603      	mov	r3, r0
 80086fa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d175      	bne.n	80087ee <create_chain+0x228>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	61da      	str	r2, [r3, #28]
 8008708:	e071      	b.n	80087ee <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	429a      	cmp	r2, r3
 8008714:	d129      	bne.n	800876a <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	3301      	adds	r3, #1
 800871a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	429a      	cmp	r2, r3
 8008724:	d301      	bcc.n	800872a <create_chain+0x164>
 8008726:	2302      	movs	r3, #2
 8008728:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800872a:	69f9      	ldr	r1, [r7, #28]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7ff fa7b 	bl	8007c28 <get_fat>
 8008732:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d003      	beq.n	8008742 <create_chain+0x17c>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008740:	d101      	bne.n	8008746 <create_chain+0x180>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	e07a      	b.n	800883c <create_chain+0x276>
			if (cs != 0) {						/* Not free? */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00e      	beq.n	800876a <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d906      	bls.n	8008766 <create_chain+0x1a0>
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	429a      	cmp	r2, r3
 8008760:	d201      	bcs.n	8008766 <create_chain+0x1a0>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d129      	bne.n	80087c4 <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	3301      	adds	r3, #1
 8008778:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	69fa      	ldr	r2, [r7, #28]
 8008780:	429a      	cmp	r2, r3
 8008782:	d307      	bcc.n	8008794 <create_chain+0x1ce>
					ncl = 2;
 8008784:	2302      	movs	r3, #2
 8008786:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	429a      	cmp	r2, r3
 800878e:	d901      	bls.n	8008794 <create_chain+0x1ce>
 8008790:	2300      	movs	r3, #0
 8008792:	e053      	b.n	800883c <create_chain+0x276>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008794:	69f9      	ldr	r1, [r7, #28]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7ff fa46 	bl	8007c28 <get_fat>
 800879c:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00e      	beq.n	80087c2 <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d003      	beq.n	80087b2 <create_chain+0x1ec>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b0:	d101      	bne.n	80087b6 <create_chain+0x1f0>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	e042      	b.n	800883c <create_chain+0x276>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80087b6:	69fa      	ldr	r2, [r7, #28]
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d1da      	bne.n	8008774 <create_chain+0x1ae>
 80087be:	2300      	movs	r3, #0
 80087c0:	e03c      	b.n	800883c <create_chain+0x276>
				if (cs == 0) break;				/* Found a free cluster? */
 80087c2:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80087c4:	f04f 32ff 	mov.w	r2, #4294967295
 80087c8:	69f9      	ldr	r1, [r7, #28]
 80087ca:	6938      	ldr	r0, [r7, #16]
 80087cc:	f7ff fb96 	bl	8007efc <put_fat>
 80087d0:	4603      	mov	r3, r0
 80087d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d109      	bne.n	80087ee <create_chain+0x228>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d006      	beq.n	80087ee <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80087e0:	69fa      	ldr	r2, [r7, #28]
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6938      	ldr	r0, [r7, #16]
 80087e6:	f7ff fb89 	bl	8007efc <put_fat>
 80087ea:	4603      	mov	r3, r0
 80087ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d11a      	bne.n	800882a <create_chain+0x264>
		fs->last_clst = ncl;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01b      	beq.n	800883a <create_chain+0x274>
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	695a      	ldr	r2, [r3, #20]
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	3b02      	subs	r3, #2
 800880c:	429a      	cmp	r2, r3
 800880e:	d814      	bhi.n	800883a <create_chain+0x274>
			fs->free_clst--;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	1e5a      	subs	r2, r3, #1
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	795b      	ldrb	r3, [r3, #5]
 800881e:	f043 0301 	orr.w	r3, r3, #1
 8008822:	b2da      	uxtb	r2, r3
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	715a      	strb	r2, [r3, #5]
 8008828:	e007      	b.n	800883a <create_chain+0x274>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d102      	bne.n	8008836 <create_chain+0x270>
 8008830:	f04f 33ff 	mov.w	r3, #4294967295
 8008834:	e000      	b.n	8008838 <create_chain+0x272>
 8008836:	2301      	movs	r3, #1
 8008838:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800883a:	69fb      	ldr	r3, [r7, #28]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8008844:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008848:	b08a      	sub	sp, #40	@ 0x28
 800884a:	af02      	add	r7, sp, #8
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff f826 	bl	80078a2 <sync_window>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <dir_clear+0x1c>
 800885c:	2301      	movs	r3, #1
 800885e:	e043      	b.n	80088e8 <dir_clear+0xa4>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff f9a6 	bl	8007bb4 <clst2sect>
 8008868:	e9c7 0104 	strd	r0, r1, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008872:	e9c1 2308 	strd	r2, r3, [r1, #32]
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3354      	adds	r3, #84	@ 0x54
 800887a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f008 fabe 	bl	8010e02 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	3354      	adds	r3, #84	@ 0x54
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	2301      	movs	r3, #1
 800888e:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8008890:	2300      	movs	r3, #0
 8008892:	61fb      	str	r3, [r7, #28]
 8008894:	e003      	b.n	800889e <dir_clear+0x5a>
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4413      	add	r3, r2
 800889c:	61fb      	str	r3, [r7, #28]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	895b      	ldrh	r3, [r3, #10]
 80088a2:	461a      	mov	r2, r3
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d215      	bcs.n	80088d6 <dir_clear+0x92>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	7858      	ldrb	r0, [r3, #1]
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	2200      	movs	r2, #0
 80088b2:	461c      	mov	r4, r3
 80088b4:	4615      	mov	r5, r2
 80088b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80088ba:	eb14 0802 	adds.w	r8, r4, r2
 80088be:	eb45 0903 	adc.w	r9, r5, r3
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	4642      	mov	r2, r8
 80088c8:	464b      	mov	r3, r9
 80088ca:	68f9      	ldr	r1, [r7, #12]
 80088cc:	f7f8 fc5a 	bl	8001184 <disk_write>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d0df      	beq.n	8008896 <dir_clear+0x52>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	895b      	ldrh	r3, [r3, #10]
 80088da:	461a      	mov	r2, r3
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	4293      	cmp	r3, r2
 80088e0:	bf14      	ite	ne
 80088e2:	2301      	movne	r3, #1
 80088e4:	2300      	moveq	r3, #0
 80088e6:	b2db      	uxtb	r3, r3
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3720      	adds	r7, #32
 80088ec:	46bd      	mov	sp, r7
 80088ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080088f2 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80088f2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b04      	cmp	r3, #4
 800890a:	d102      	bne.n	8008912 <dir_sdi+0x20>
 800890c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008910:	e001      	b.n	8008916 <dir_sdi+0x24>
 8008912:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	429a      	cmp	r2, r3
 800891a:	d904      	bls.n	8008926 <dir_sdi+0x34>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	f003 031f 	and.w	r3, r3, #31
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <dir_sdi+0x38>
		return FR_INT_ERR;
 8008926:	2302      	movs	r3, #2
 8008928:	e075      	b.n	8008a16 <dir_sdi+0x124>
	}
	dp->dptr = ofs;				/* Set current offset */
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10b      	bne.n	8008954 <dir_sdi+0x62>
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d907      	bls.n	8008954 <dir_sdi+0x62>
		clst = (DWORD)fs->dirbase;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800894a:	4613      	mov	r3, r2
 800894c:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10e      	bne.n	8008978 <dir_sdi+0x86>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	095b      	lsrs	r3, r3, #5
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	8912      	ldrh	r2, [r2, #8]
 8008962:	4293      	cmp	r3, r2
 8008964:	d301      	bcc.n	800896a <dir_sdi+0x78>
 8008966:	2302      	movs	r3, #2
 8008968:	e055      	b.n	8008a16 <dir_sdi+0x124>
		dp->sect = fs->dirbase;
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008970:	6879      	ldr	r1, [r7, #4]
 8008972:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8008976:	e02b      	b.n	80089d0 <dir_sdi+0xde>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	895b      	ldrh	r3, [r3, #10]
 800897c:	025b      	lsls	r3, r3, #9
 800897e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008980:	e019      	b.n	80089b6 <dir_sdi+0xc4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6979      	ldr	r1, [r7, #20]
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff f94e 	bl	8007c28 <get_fat>
 800898c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d101      	bne.n	800899a <dir_sdi+0xa8>
 8008996:	2301      	movs	r3, #1
 8008998:	e03d      	b.n	8008a16 <dir_sdi+0x124>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d904      	bls.n	80089aa <dir_sdi+0xb8>
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d301      	bcc.n	80089ae <dir_sdi+0xbc>
 80089aa:	2302      	movs	r3, #2
 80089ac:	e033      	b.n	8008a16 <dir_sdi+0x124>
			ofs -= csz;
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d2e1      	bcs.n	8008982 <dir_sdi+0x90>
		}
		dp->sect = clst2sect(fs, clst);
 80089be:	6979      	ldr	r1, [r7, #20]
 80089c0:	6938      	ldr	r0, [r7, #16]
 80089c2:	f7ff f8f7 	bl	8007bb4 <clst2sect>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	635a      	str	r2, [r3, #52]	@ 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80089dc:	4313      	orrs	r3, r2
 80089de:	d101      	bne.n	80089e4 <dir_sdi+0xf2>
 80089e0:	2302      	movs	r3, #2
 80089e2:	e018      	b.n	8008a16 <dir_sdi+0x124>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	0a49      	lsrs	r1, r1, #9
 80089ee:	2000      	movs	r0, #0
 80089f0:	460c      	mov	r4, r1
 80089f2:	4605      	mov	r5, r0
 80089f4:	eb12 0804 	adds.w	r8, r2, r4
 80089f8:	eb43 0905 	adc.w	r9, r3, r5
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	e9c3 890e 	strd	r8, r9, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a0e:	441a      	add	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	641a      	str	r2, [r3, #64]	@ 0x40

	return FR_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08008a20 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008a20:	b5b0      	push	{r4, r5, r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a34:	3320      	adds	r3, #32
 8008a36:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d102      	bne.n	8008a46 <dir_next+0x26>
 8008a40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a44:	e001      	b.n	8008a4a <dir_next+0x2a>
 8008a46:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d806      	bhi.n	8008a5e <dir_next+0x3e>
 8008a50:	6879      	ldr	r1, [r7, #4]
 8008a52:	f04f 0200 	mov.w	r2, #0
 8008a56:	f04f 0300 	mov.w	r3, #0
 8008a5a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008a64:	4313      	orrs	r3, r2
 8008a66:	d101      	bne.n	8008a6c <dir_next+0x4c>
 8008a68:	2304      	movs	r3, #4
 8008a6a:	e08d      	b.n	8008b88 <dir_next+0x168>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d17b      	bne.n	8008b6e <dir_next+0x14e>
		dp->sect++;				/* Next sector */
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008a7c:	1c54      	adds	r4, r2, #1
 8008a7e:	f143 0500 	adc.w	r5, r3, #0
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	e9c3 450e 	strd	r4, r5, [r3, #56]	@ 0x38

		if (dp->clust == 0) {	/* Static table */
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10e      	bne.n	8008aae <dir_next+0x8e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	095b      	lsrs	r3, r3, #5
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	8912      	ldrh	r2, [r2, #8]
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d368      	bcc.n	8008b6e <dir_next+0x14e>
				dp->sect = 0; return FR_NO_FILE;
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	f04f 0200 	mov.w	r2, #0
 8008aa2:	f04f 0300 	mov.w	r3, #0
 8008aa6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8008aaa:	2304      	movs	r3, #4
 8008aac:	e06c      	b.n	8008b88 <dir_next+0x168>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	0a5b      	lsrs	r3, r3, #9
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	8952      	ldrh	r2, [r2, #10]
 8008ab6:	3a01      	subs	r2, #1
 8008ab8:	4013      	ands	r3, r2
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d157      	bne.n	8008b6e <dir_next+0x14e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f7ff f8ae 	bl	8007c28 <get_fat>
 8008acc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d801      	bhi.n	8008ad8 <dir_next+0xb8>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e057      	b.n	8008b88 <dir_next+0x168>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ade:	d101      	bne.n	8008ae4 <dir_next+0xc4>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e051      	b.n	8008b88 <dir_next+0x168>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d333      	bcc.n	8008b56 <dir_next+0x136>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d108      	bne.n	8008b06 <dir_next+0xe6>
						dp->sect = 0; return FR_NO_FILE;
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	f04f 0200 	mov.w	r2, #0
 8008afa:	f04f 0300 	mov.w	r3, #0
 8008afe:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8008b02:	2304      	movs	r3, #4
 8008b04:	e040      	b.n	8008b88 <dir_next+0x168>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	f7ff fd59 	bl	80085c6 <create_chain>
 8008b14:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <dir_next+0x100>
 8008b1c:	2307      	movs	r3, #7
 8008b1e:	e033      	b.n	8008b88 <dir_next+0x168>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d101      	bne.n	8008b2a <dir_next+0x10a>
 8008b26:	2302      	movs	r3, #2
 8008b28:	e02e      	b.n	8008b88 <dir_next+0x168>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b30:	d101      	bne.n	8008b36 <dir_next+0x116>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e028      	b.n	8008b88 <dir_next+0x168>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8008b36:	6979      	ldr	r1, [r7, #20]
 8008b38:	6938      	ldr	r0, [r7, #16]
 8008b3a:	f7ff fe83 	bl	8008844 <dir_clear>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <dir_next+0x128>
 8008b44:	2301      	movs	r3, #1
 8008b46:	e01f      	b.n	8008b88 <dir_next+0x168>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	79db      	ldrb	r3, [r3, #7]
 8008b4c:	f043 0304 	orr.w	r3, r3, #4
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clst2sect(fs, clst);
 8008b5c:	6979      	ldr	r1, [r7, #20]
 8008b5e:	6938      	ldr	r0, [r7, #16]
 8008b60:	f7ff f828 	bl	8007bb4 <clst2sect>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b80:	441a      	add	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	641a      	str	r2, [r3, #64]	@ 0x40

	return FR_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bdb0      	pop	{r4, r5, r7, pc}

08008b90 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7ff fea5 	bl	80088f2 <dir_sdi>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d140      	bne.n	8008c34 <dir_alloc+0xa4>
		n = 0;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f7fe fec6 	bl	800794e <move_window>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d132      	bne.n	8008c32 <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	d108      	bne.n	8008be6 <dir_alloc+0x56>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	b25b      	sxtb	r3, r3
 8008bdc:	43db      	mvns	r3, r3
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	09db      	lsrs	r3, r3, #7
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	e00f      	b.n	8008c06 <dir_alloc+0x76>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2be5      	cmp	r3, #229	@ 0xe5
 8008bee:	d004      	beq.n	8008bfa <dir_alloc+0x6a>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <dir_alloc+0x6e>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <dir_alloc+0x70>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d007      	beq.n	8008c1a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	613b      	str	r3, [r7, #16]
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d102      	bne.n	8008c1e <dir_alloc+0x8e>
 8008c18:	e00c      	b.n	8008c34 <dir_alloc+0xa4>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8008c1e:	2101      	movs	r1, #1
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff fefd 	bl	8008a20 <dir_next>
 8008c26:	4603      	mov	r3, r0
 8008c28:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d0c2      	beq.n	8008bb6 <dir_alloc+0x26>
 8008c30:	e000      	b.n	8008c34 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8008c32:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d101      	bne.n	8008c3e <dir_alloc+0xae>
 8008c3a:	2307      	movs	r3, #7
 8008c3c:	75fb      	strb	r3, [r7, #23]
	return res;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_16(dir + DIR_FstClusLO);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	331a      	adds	r3, #26
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fe fbd6 	bl	8007408 <ld_16>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d109      	bne.n	8008c7c <ld_clust+0x34>
		cl |= (DWORD)ld_16(dir + DIR_FstClusHI) << 16;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	3314      	adds	r3, #20
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fe fbcb 	bl	8007408 <ld_16>
 8008c72:	4603      	mov	r3, r0
 8008c74:	041b      	lsls	r3, r3, #16
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	60f8      	str	r0, [r7, #12]
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	607a      	str	r2, [r7, #4]
	st_16(dir + DIR_FstClusLO, (WORD)cl);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	331a      	adds	r3, #26
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	b292      	uxth	r2, r2
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fe fcca 	bl	8007636 <st_16>
	if (fs->fs_type == FS_FAT32) {
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d109      	bne.n	8008cbe <st_clust+0x38>
		st_16(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	f103 0214 	add.w	r2, r3, #20
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	0c1b      	lsrs	r3, r3, #16
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4610      	mov	r0, r2
 8008cba:	f7fe fcbc 	bl	8007636 <st_16>
	}
}
 8008cbe:	bf00      	nop
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
	...

08008cc8 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN to be compared */
	BYTE* dir				/* Pointer to the LFN entry */
)
{
 8008cc8:	b590      	push	{r4, r7, lr}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
	UINT ni, di;
	WCHAR pchr, chr;


	if (ld_16(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	331a      	adds	r3, #26
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe fb96 	bl	8007408 <ld_16>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <cmp_lfn+0x1e>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	e059      	b.n	8008d9a <cmp_lfn+0xd2>

	ni = (UINT)((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the name to be compared */
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]

	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 8008cfe:	2301      	movs	r3, #1
 8008d00:	81fb      	strh	r3, [r7, #14]
 8008d02:	2300      	movs	r3, #0
 8008d04:	613b      	str	r3, [r7, #16]
 8008d06:	e032      	b.n	8008d6e <cmp_lfn+0xa6>
		chr = ld_16(dir + LfnOfs[di]);		/* Pick a character from the entry */
 8008d08:	4a26      	ldr	r2, [pc, #152]	@ (8008da4 <cmp_lfn+0xdc>)
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	4413      	add	r3, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe fb76 	bl	8007408 <ld_16>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	81bb      	strh	r3, [r7, #12]
		if (pchr != 0) {
 8008d20:	89fb      	ldrh	r3, [r7, #14]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d019      	beq.n	8008d5a <cmp_lfn+0x92>
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	2bff      	cmp	r3, #255	@ 0xff
 8008d2a:	d811      	bhi.n	8008d50 <cmp_lfn+0x88>
 8008d2c:	89bb      	ldrh	r3, [r7, #12]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f003 fd06 	bl	800c740 <ff_wtoupper>
 8008d34:	4604      	mov	r4, r0
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	617a      	str	r2, [r7, #20]
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	4413      	add	r3, r2
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f003 fcfb 	bl	800c740 <ff_wtoupper>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	429c      	cmp	r4, r3
 8008d4e:	d001      	beq.n	8008d54 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008d50:	2300      	movs	r3, #0
 8008d52:	e022      	b.n	8008d9a <cmp_lfn+0xd2>
			}
			pchr = chr;
 8008d54:	89bb      	ldrh	r3, [r7, #12]
 8008d56:	81fb      	strh	r3, [r7, #14]
 8008d58:	e006      	b.n	8008d68 <cmp_lfn+0xa0>
		} else {
			if (chr != 0xFFFF) return 0;	/* Check filler */
 8008d5a:	89bb      	ldrh	r3, [r7, #12]
 8008d5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d001      	beq.n	8008d68 <cmp_lfn+0xa0>
 8008d64:	2300      	movs	r3, #0
 8008d66:	e018      	b.n	8008d9a <cmp_lfn+0xd2>
	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	613b      	str	r3, [r7, #16]
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	2b0c      	cmp	r3, #12
 8008d72:	d9c9      	bls.n	8008d08 <cmp_lfn+0x40>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && pchr && lfnbuf[ni]) return 0;	/* Last name segment matched but different length */
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <cmp_lfn+0xd0>
 8008d80:	89fb      	ldrh	r3, [r7, #14]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d008      	beq.n	8008d98 <cmp_lfn+0xd0>
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <cmp_lfn+0xd0>
 8008d94:	2300      	movs	r3, #0
 8008d96:	e000      	b.n	8008d9a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008d98:	2301      	movs	r3, #1
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd90      	pop	{r4, r7, pc}
 8008da2:	bf00      	nop
 8008da4:	08011300 	.word	0x08011300

08008da8 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the name buffer to be stored */
	const BYTE* dir		/* Pointer to the LFN entry */
)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
	UINT ni, di;
	WCHAR pchr, chr;


	if (ld_16(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	331a      	adds	r3, #26
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fb26 	bl	8007408 <ld_16>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <pick_lfn+0x1e>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e051      	b.n	8008e6a <pick_lfn+0xc2>

	ni = (UINT)((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the name buffer */
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	617b      	str	r3, [r7, #20]

	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 8008dde:	2301      	movs	r3, #1
 8008de0:	81fb      	strh	r3, [r7, #14]
 8008de2:	2300      	movs	r3, #0
 8008de4:	613b      	str	r3, [r7, #16]
 8008de6:	e028      	b.n	8008e3a <pick_lfn+0x92>
		chr = ld_16(dir + LfnOfs[di]);			/* Pick a character from the entry */
 8008de8:	4a22      	ldr	r2, [pc, #136]	@ (8008e74 <pick_lfn+0xcc>)
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	4413      	add	r3, r2
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	461a      	mov	r2, r3
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	4413      	add	r3, r2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fe fb06 	bl	8007408 <ld_16>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	81bb      	strh	r3, [r7, #12]
		if (pchr != 0) {
 8008e00:	89fb      	ldrh	r3, [r7, #14]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00f      	beq.n	8008e26 <pick_lfn+0x7e>
			if (ni >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2bff      	cmp	r3, #255	@ 0xff
 8008e0a:	d901      	bls.n	8008e10 <pick_lfn+0x68>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e02c      	b.n	8008e6a <pick_lfn+0xc2>
			lfnbuf[ni++] = pchr = chr;			/* Store it */
 8008e10:	89bb      	ldrh	r3, [r7, #12]
 8008e12:	81fb      	strh	r3, [r7, #14]
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	617a      	str	r2, [r7, #20]
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	4413      	add	r3, r2
 8008e20:	89fa      	ldrh	r2, [r7, #14]
 8008e22:	801a      	strh	r2, [r3, #0]
 8008e24:	e006      	b.n	8008e34 <pick_lfn+0x8c>
		} else {
			if (chr != 0xFFFF) return 0;		/* Check filler */
 8008e26:	89bb      	ldrh	r3, [r7, #12]
 8008e28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d001      	beq.n	8008e34 <pick_lfn+0x8c>
 8008e30:	2300      	movs	r3, #0
 8008e32:	e01a      	b.n	8008e6a <pick_lfn+0xc2>
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	3301      	adds	r3, #1
 8008e38:	613b      	str	r3, [r7, #16]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	2b0c      	cmp	r3, #12
 8008e3e:	d9d3      	bls.n	8008de8 <pick_lfn+0x40>
		}
	}

	if (dir[LDIR_Ord] & LLEF && pchr != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00d      	beq.n	8008e68 <pick_lfn+0xc0>
 8008e4c:	89fb      	ldrh	r3, [r7, #14]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00a      	beq.n	8008e68 <pick_lfn+0xc0>
		if (ni >= FF_MAX_LFN + 1) return 0;		/* Buffer overflow? */
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2bff      	cmp	r3, #255	@ 0xff
 8008e56:	d901      	bls.n	8008e5c <pick_lfn+0xb4>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	e006      	b.n	8008e6a <pick_lfn+0xc2>
		lfnbuf[ni] = 0;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	4413      	add	r3, r2
 8008e64:	2200      	movs	r2, #0
 8008e66:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8008e68:	2301      	movs	r3, #1
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	08011300 	.word	0x08011300

08008e78 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	4611      	mov	r1, r2
 8008e84:	461a      	mov	r2, r3
 8008e86:	460b      	mov	r3, r1
 8008e88:	71fb      	strb	r3, [r7, #7]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	71bb      	strb	r3, [r7, #6]
	UINT ni, di;
	WCHAR chr;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	330d      	adds	r3, #13
 8008e92:	79ba      	ldrb	r2, [r7, #6]
 8008e94:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute */
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	330b      	adds	r3, #11
 8008e9a:	220f      	movs	r2, #15
 8008e9c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	330c      	adds	r3, #12
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	701a      	strb	r2, [r3, #0]
	st_16(dir + LDIR_FstClusLO, 0);
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	331a      	adds	r3, #26
 8008eaa:	2100      	movs	r1, #0
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fe fbc2 	bl	8007636 <st_16>

	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	4613      	mov	r3, r2
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	61fb      	str	r3, [r7, #28]
	di = chr = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	82fb      	strh	r3, [r7, #22]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61bb      	str	r3, [r7, #24]
	do {	/* Fill the directory entry */
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 8008ecc:	8afb      	ldrh	r3, [r7, #22]
 8008ece:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d007      	beq.n	8008ee6 <put_lfn+0x6e>
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	61fa      	str	r2, [r7, #28]
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	82fb      	strh	r3, [r7, #22]
		st_16(dir + LfnOfs[di], chr);	/* Set it */
 8008ee6:	4a17      	ldr	r2, [pc, #92]	@ (8008f44 <put_lfn+0xcc>)
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	4413      	add	r3, r2
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	8afa      	ldrh	r2, [r7, #22]
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe fb9c 	bl	8007636 <st_16>
		if (chr == 0) chr = 0xFFFF;		/* Padding characters after the terminator */
 8008efe:	8afb      	ldrh	r3, [r7, #22]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d102      	bne.n	8008f0a <put_lfn+0x92>
 8008f04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008f08:	82fb      	strh	r3, [r7, #22]
	} while (++di < 13);
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	61bb      	str	r3, [r7, #24]
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	2b0c      	cmp	r3, #12
 8008f14:	d9da      	bls.n	8008ecc <put_lfn+0x54>
	if (chr == 0xFFFF || !lfn[ni]) ord |= LLEF;	/* Last LFN part is the start of an enrty set */
 8008f16:	8afb      	ldrh	r3, [r7, #22]
 8008f18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d006      	beq.n	8008f2e <put_lfn+0xb6>
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4413      	add	r3, r2
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d103      	bne.n	8008f36 <put_lfn+0xbe>
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f34:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set order in the entry set */
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	79fa      	ldrb	r2, [r7, #7]
 8008f3a:	701a      	strb	r2, [r3, #0]
}
 8008f3c:	bf00      	nop
 8008f3e:	3720      	adds	r7, #32
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	08011300 	.word	0x08011300

08008f48 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08c      	sub	sp, #48	@ 0x30
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8008f56:	220b      	movs	r2, #11
 8008f58:	68b9      	ldr	r1, [r7, #8]
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f007 ff8a 	bl	8010e74 <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008f60:	887b      	ldrh	r3, [r7, #2]
 8008f62:	2b05      	cmp	r3, #5
 8008f64:	d929      	bls.n	8008fba <gen_numname+0x72>
		WCHAR wc;
		DWORD crc_sreg = seq;
 8008f66:	887b      	ldrh	r3, [r7, #2]
 8008f68:	61fb      	str	r3, [r7, #28]

		while (*lfn) {	/* Create a CRC value as a hash of LFN */
 8008f6a:	e020      	b.n	8008fae <gen_numname+0x66>
			wc = *lfn++;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	1c9a      	adds	r2, r3, #2
 8008f70:	607a      	str	r2, [r7, #4]
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8008f76:	2300      	movs	r3, #0
 8008f78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f7a:	e015      	b.n	8008fa8 <gen_numname+0x60>
				crc_sreg = (crc_sreg << 1) + (wc & 1);
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	005a      	lsls	r2, r3, #1
 8008f80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	4413      	add	r3, r2
 8008f88:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008f8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f8c:	085b      	lsrs	r3, r3, #1
 8008f8e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (crc_sreg & 0x10000) crc_sreg ^= 0x11021;
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <gen_numname+0x5a>
 8008f9a:	69fa      	ldr	r2, [r7, #28]
 8008f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8009090 <gen_numname+0x148>)
 8008f9e:	4053      	eors	r3, r2
 8008fa0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008faa:	2b0f      	cmp	r3, #15
 8008fac:	d9e6      	bls.n	8008f7c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC value as a hash of LFN */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1da      	bne.n	8008f6c <gen_numname+0x24>
			}
		}
		seq = (WORD)crc_sreg;
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	807b      	strh	r3, [r7, #2]
	}

	/* Make suffix (~ + 4-digit hexadecimal) */
	i = 7;
 8008fba:	2307      	movs	r3, #7
 8008fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 8008fbe:	887b      	ldrh	r3, [r7, #2]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	f003 030f 	and.w	r3, r3, #15
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	3330      	adds	r3, #48	@ 0x30
 8008fca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008fce:	887b      	ldrh	r3, [r7, #2]
 8008fd0:	091b      	lsrs	r3, r3, #4
 8008fd2:	807b      	strh	r3, [r7, #2]
		if (c > '9') c += 7;
 8008fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008fd8:	2b39      	cmp	r3, #57	@ 0x39
 8008fda:	d904      	bls.n	8008fe6 <gen_numname+0x9e>
 8008fdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008fe0:	3307      	adds	r3, #7
 8008fe2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe8:	1e5a      	subs	r2, r3, #1
 8008fea:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008fec:	3330      	adds	r3, #48	@ 0x30
 8008fee:	443b      	add	r3, r7
 8008ff0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008ff4:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 8008ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <gen_numname+0xbc>
 8008ffe:	887b      	ldrh	r3, [r7, #2]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1dc      	bne.n	8008fbe <gen_numname+0x76>
	ns[i] = '~';
 8009004:	f107 0214 	add.w	r2, r7, #20
 8009008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800900a:	4413      	add	r3, r2
 800900c:	227e      	movs	r2, #126	@ 0x7e
 800900e:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8009010:	2300      	movs	r3, #0
 8009012:	627b      	str	r3, [r7, #36]	@ 0x24
 8009014:	e014      	b.n	8009040 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901a:	4413      	add	r3, r2
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	f7fe fbd8 	bl	80077d4 <dbc_1st>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d007      	beq.n	800903a <gen_numname+0xf2>
			if (j == i - 1) break;
 800902a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902c:	3b01      	subs	r3, #1
 800902e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009030:	429a      	cmp	r2, r3
 8009032:	d010      	beq.n	8009056 <gen_numname+0x10e>
			j++;
 8009034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009036:	3301      	adds	r3, #1
 8009038:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903c:	3301      	adds	r3, #1
 800903e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009044:	429a      	cmp	r2, r3
 8009046:	d207      	bcs.n	8009058 <gen_numname+0x110>
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904c:	4413      	add	r3, r2
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	2b20      	cmp	r3, #32
 8009052:	d1e0      	bne.n	8009016 <gen_numname+0xce>
 8009054:	e000      	b.n	8009058 <gen_numname+0x110>
			if (j == i - 1) break;
 8009056:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905a:	2b07      	cmp	r3, #7
 800905c:	d807      	bhi.n	800906e <gen_numname+0x126>
 800905e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009060:	1c5a      	adds	r2, r3, #1
 8009062:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009064:	3330      	adds	r3, #48	@ 0x30
 8009066:	443b      	add	r3, r7
 8009068:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800906c:	e000      	b.n	8009070 <gen_numname+0x128>
 800906e:	2120      	movs	r1, #32
 8009070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	627a      	str	r2, [r7, #36]	@ 0x24
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4413      	add	r3, r2
 800907a:	460a      	mov	r2, r1
 800907c:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800907e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009080:	2b07      	cmp	r3, #7
 8009082:	d9e9      	bls.n	8009058 <gen_numname+0x110>
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop
 8009088:	3730      	adds	r7, #48	@ 0x30
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	00011021 	.word	0x00011021

08009094 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80090a0:	230b      	movs	r3, #11
 80090a2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	0852      	lsrs	r2, r2, #1
 80090aa:	01db      	lsls	r3, r3, #7
 80090ac:	4313      	orrs	r3, r2
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	1c59      	adds	r1, r3, #1
 80090b4:	6079      	str	r1, [r7, #4]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	4413      	add	r3, r2
 80090ba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	3b01      	subs	r3, #1
 80090c0:	60bb      	str	r3, [r7, #8]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1ed      	bne.n	80090a4 <sum_sfn+0x10>
	return sum;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b087      	sub	sp, #28
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3301      	adds	r3, #1
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	3301      	adds	r3, #1
 80090e6:	015b      	lsls	r3, r3, #5
 80090e8:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80090ea:	2300      	movs	r3, #0
 80090ec:	827b      	strh	r3, [r7, #18]
 80090ee:	2300      	movs	r3, #0
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	e015      	b.n	8009120 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d103      	bne.n	8009102 <xdir_sum+0x2c>
			i++;
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	3301      	adds	r3, #1
 80090fe:	617b      	str	r3, [r7, #20]
 8009100:	e00b      	b.n	800911a <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8009102:	8a7b      	ldrh	r3, [r7, #18]
 8009104:	b29a      	uxth	r2, r3
 8009106:	0852      	lsrs	r2, r2, #1
 8009108:	03db      	lsls	r3, r3, #15
 800910a:	4313      	orrs	r3, r2
 800910c:	b29b      	uxth	r3, r3
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	440a      	add	r2, r1
 8009114:	7812      	ldrb	r2, [r2, #0]
 8009116:	4413      	add	r3, r2
 8009118:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	3301      	adds	r3, #1
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	429a      	cmp	r2, r3
 8009126:	d3e5      	bcc.n	80090f4 <xdir_sum+0x1e>
		}
	}
	return sum;
 8009128:	8a7b      	ldrh	r3, [r7, #18]
}
 800912a:	4618      	mov	r0, r3
 800912c:	371c      	adds	r7, #28
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8009142:	e01b      	b.n	800917c <xname_sum+0x46>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8009144:	89bb      	ldrh	r3, [r7, #12]
 8009146:	4618      	mov	r0, r3
 8009148:	f003 fafa 	bl	800c740 <ff_wtoupper>
 800914c:	4603      	mov	r3, r0
 800914e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8009150:	89fb      	ldrh	r3, [r7, #14]
 8009152:	b29a      	uxth	r2, r3
 8009154:	0852      	lsrs	r2, r2, #1
 8009156:	03db      	lsls	r3, r3, #15
 8009158:	4313      	orrs	r3, r2
 800915a:	b29a      	uxth	r2, r3
 800915c:	89bb      	ldrh	r3, [r7, #12]
 800915e:	b2db      	uxtb	r3, r3
 8009160:	b29b      	uxth	r3, r3
 8009162:	4413      	add	r3, r2
 8009164:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8009166:	89fb      	ldrh	r3, [r7, #14]
 8009168:	b29a      	uxth	r2, r3
 800916a:	0852      	lsrs	r2, r2, #1
 800916c:	03db      	lsls	r3, r3, #15
 800916e:	4313      	orrs	r3, r2
 8009170:	b29a      	uxth	r2, r3
 8009172:	89bb      	ldrh	r3, [r7, #12]
 8009174:	0a1b      	lsrs	r3, r3, #8
 8009176:	b29b      	uxth	r3, r3
 8009178:	4413      	add	r3, r2
 800917a:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	1c9a      	adds	r2, r3, #2
 8009180:	607a      	str	r2, [r7, #4]
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	81bb      	strh	r3, [r7, #12]
 8009186:	89bb      	ldrh	r3, [r7, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1db      	bne.n	8009144 <xname_sum+0xe>
	}
	return sum;
 800918c:	89fb      	ldrh	r3, [r7, #14]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <load_xdir>:
/*------------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading directory object pointing top of the entry block to load */
)
{
 8009198:	b590      	push	{r4, r7, lr}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091a6:	60fb      	str	r3, [r7, #12]


	/* Load file-directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6819      	ldr	r1, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80091b2:	4608      	mov	r0, r1
 80091b4:	f7fe fbcb 	bl	800794e <move_window>
 80091b8:	4603      	mov	r3, r0
 80091ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <load_xdir+0x2e>
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	e0a9      	b.n	800931a <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order? */
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2b85      	cmp	r3, #133	@ 0x85
 80091ce:	d001      	beq.n	80091d4 <load_xdir+0x3c>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e0a2      	b.n	800931a <load_xdir+0x182>
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d8:	2220      	movs	r2, #32
 80091da:	4619      	mov	r1, r3
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f007 fe49 	bl	8010e74 <memcpy>
	sz_ent = ((UINT)dirb[XDIR_NumSec] + 1) * SZDIRE;	/* Size of this entry block */
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3301      	adds	r3, #1
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	3301      	adds	r3, #1
 80091ea:	015b      	lsls	r3, r3, #5
 80091ec:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;	/* Invalid block size? */
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2b5f      	cmp	r3, #95	@ 0x5f
 80091f2:	d903      	bls.n	80091fc <load_xdir+0x64>
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80091fa:	d901      	bls.n	8009200 <load_xdir+0x68>
 80091fc:	2302      	movs	r3, #2
 80091fe:	e08c      	b.n	800931a <load_xdir+0x182>

	/* Load stream extension entry */
	res = dir_next(dp, 0);
 8009200:	2100      	movs	r1, #0
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff fc0c 	bl	8008a20 <dir_next>
 8009208:	4603      	mov	r3, r0
 800920a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800920c:	7dfb      	ldrb	r3, [r7, #23]
 800920e:	2b04      	cmp	r3, #4
 8009210:	d101      	bne.n	8009216 <load_xdir+0x7e>
 8009212:	2302      	movs	r3, #2
 8009214:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009216:	7dfb      	ldrb	r3, [r7, #23]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <load_xdir+0x88>
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	e07c      	b.n	800931a <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6819      	ldr	r1, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800922a:	4608      	mov	r0, r1
 800922c:	f7fe fb8f 	bl	800794e <move_window>
 8009230:	4603      	mov	r3, r0
 8009232:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009234:	7dfb      	ldrb	r3, [r7, #23]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <load_xdir+0xa6>
 800923a:	7dfb      	ldrb	r3, [r7, #23]
 800923c:	e06d      	b.n	800931a <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order? */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2bc0      	cmp	r3, #192	@ 0xc0
 8009246:	d001      	beq.n	800924c <load_xdir+0xb4>
 8009248:	2302      	movs	r3, #2
 800924a:	e066      	b.n	800931a <load_xdir+0x182>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f103 0020 	add.w	r0, r3, #32
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009256:	2220      	movs	r2, #32
 8009258:	4619      	mov	r1, r3
 800925a:	f007 fe0b 	bl	8010e74 <memcpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;	/* Invalid block size for the name? */
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3323      	adds	r3, #35	@ 0x23
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	332c      	adds	r3, #44	@ 0x2c
 8009266:	4a2f      	ldr	r2, [pc, #188]	@ (8009324 <load_xdir+0x18c>)
 8009268:	fba2 2303 	umull	r2, r3, r2, r3
 800926c:	08db      	lsrs	r3, r3, #3
 800926e:	015b      	lsls	r3, r3, #5
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	429a      	cmp	r2, r3
 8009274:	d201      	bcs.n	800927a <load_xdir+0xe2>
 8009276:	2302      	movs	r3, #2
 8009278:	e04f      	b.n	800931a <load_xdir+0x182>

	/* Load file name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 800927a:	2340      	movs	r3, #64	@ 0x40
 800927c:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 800927e:	2100      	movs	r1, #0
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff fbcd 	bl	8008a20 <dir_next>
 8009286:	4603      	mov	r3, r0
 8009288:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800928a:	7dfb      	ldrb	r3, [r7, #23]
 800928c:	2b04      	cmp	r3, #4
 800928e:	d101      	bne.n	8009294 <load_xdir+0xfc>
 8009290:	2302      	movs	r3, #2
 8009292:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8009294:	7dfb      	ldrb	r3, [r7, #23]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <load_xdir+0x106>
 800929a:	7dfb      	ldrb	r3, [r7, #23]
 800929c:	e03d      	b.n	800931a <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6819      	ldr	r1, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80092a8:	4608      	mov	r0, r1
 80092aa:	f7fe fb50 	bl	800794e <move_window>
 80092ae:	4603      	mov	r3, r0
 80092b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <load_xdir+0x124>
 80092b8:	7dfb      	ldrb	r3, [r7, #23]
 80092ba:	e02e      	b.n	800931a <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order? */
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	2bc1      	cmp	r3, #193	@ 0xc1
 80092c4:	d001      	beq.n	80092ca <load_xdir+0x132>
 80092c6:	2302      	movs	r3, #2
 80092c8:	e027      	b.n	800931a <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);	/* Load name entries only if the object is accessible */
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80092d0:	d208      	bcs.n	80092e4 <load_xdir+0x14c>
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	18d0      	adds	r0, r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092dc:	2220      	movs	r2, #32
 80092de:	4619      	mov	r1, r3
 80092e0:	f007 fdc8 	bl	8010e74 <memcpy>
	} while ((i += SZDIRE) < sz_ent);
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	3320      	adds	r3, #32
 80092e8:	613b      	str	r3, [r7, #16]
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d3c5      	bcc.n	800927e <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80092f8:	d80e      	bhi.n	8009318 <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_16(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff feeb 	bl	80090d6 <xdir_sum>
 8009300:	4603      	mov	r3, r0
 8009302:	461c      	mov	r4, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3302      	adds	r3, #2
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe f87d 	bl	8007408 <ld_16>
 800930e:	4603      	mov	r3, r0
 8009310:	429c      	cmp	r4, r3
 8009312:	d001      	beq.n	8009318 <load_xdir+0x180>
 8009314:	2302      	movs	r3, #2
 8009316:	e000      	b.n	800931a <load_xdir+0x182>
	}

	return FR_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	371c      	adds	r7, #28
 800931e:	46bd      	mov	sp, r7
 8009320:	bd90      	pop	{r4, r7, pc}
 8009322:	bf00      	nop
 8009324:	88888889 	.word	0x88888889

08009328 <init_alloc_info>:

static void init_alloc_info (
	FFOBJID* dobj,	/* Object allocation information to be initialized */
	DIR* sdir		/* Additional source about containing direcotry */
)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
	FATFS *fs = dobj->fs;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]


	if (sdir) {	/* Initialize the containing directory. This block needs to precede the followings. */
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d012      	beq.n	8009364 <init_alloc_info+0x3c>
		dobj->c_scl = sdir->obj.sclust;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	689a      	ldr	r2, [r3, #8]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	621a      	str	r2, [r3, #32]
		dobj->c_size = ((DWORD)sdir->obj.objsize & 0xFFFFFF00) | sdir->obj.stat;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800934c:	4613      	mov	r3, r2
 800934e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	79d2      	ldrb	r2, [r2, #7]
 8009356:	431a      	orrs	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	625a      	str	r2, [r3, #36]	@ 0x24
		dobj->c_ofs = sdir->blk_ofs;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	dobj->sclust = ld_32(fs->dirbuf + XDIR_FstClus);	/* Start cluster */
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009368:	3334      	adds	r3, #52	@ 0x34
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe f865 	bl	800743a <ld_32>
 8009370:	4602      	mov	r2, r0
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	609a      	str	r2, [r3, #8]
	dobj->objsize = ld_64(fs->dirbuf + XDIR_FileSize);	/* Size */
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800937a:	3338      	adds	r3, #56	@ 0x38
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe f87f 	bl	8007480 <ld_64>
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	6879      	ldr	r1, [r7, #4]
 8009388:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dobj->stat = fs->dirbuf[XDIR_GenFlags] & 2;			/* Allocation status */
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009390:	3321      	adds	r3, #33	@ 0x21
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	b2da      	uxtb	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	71da      	strb	r2, [r3, #7]
	dobj->n_frag = 0;									/* No last fragment info */
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	61da      	str	r2, [r3, #28]
}
 80093a4:	bf00      	nop
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing directory */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 80093ac:	b5b0      	push	{r4, r5, r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6808      	ldr	r0, [r1, #0]
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6a08      	ldr	r0, [r1, #32]
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80093ca:	b2c8      	uxtb	r0, r1
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80093d4:	2000      	movs	r0, #0
 80093d6:	460c      	mov	r4, r1
 80093d8:	4605      	mov	r5, r0
 80093da:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 80093de:	2300      	movs	r3, #0
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->obj.n_frag = 0;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	651a      	str	r2, [r3, #80]	@ 0x50

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7ff fa79 	bl	80088f2 <dir_sdi>
 8009400:	4603      	mov	r3, r0
 8009402:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d104      	bne.n	8009414 <load_obj_xdir+0x68>
		res = load_xdir(dp);		/* Load the object's entry block */
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff fec4 	bl	8009198 <load_xdir>
 8009410:	4603      	mov	r3, r0
 8009412:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8009414:	7bfb      	ldrb	r3, [r7, #15]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bdb0      	pop	{r4, r5, r7, pc}

0800941e <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the directory object */
)
{
 800941e:	b590      	push	{r4, r7, lr}
 8009420:	b087      	sub	sp, #28
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the entry set 85+C0+C1s */
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800942c:	60fb      	str	r3, [r7, #12]


	st_16(dirb + XDIR_SetSum, xdir_sum(dirb));	/* Create check sum */
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	1c9c      	adds	r4, r3, #2
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f7ff fe4f 	bl	80090d6 <xdir_sum>
 8009438:	4603      	mov	r3, r0
 800943a:	4619      	mov	r1, r3
 800943c:	4620      	mov	r0, r4
 800943e:	f7fe f8fa 	bl	8007636 <st_16>

	/* Store the entry set to the directory */
	nent = dirb[XDIR_NumSec] + 1;	/* Number of entries */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3301      	adds	r3, #1
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	613b      	str	r3, [r7, #16]
	res = dir_sdi(dp, dp->blk_ofs);	/* Top of the entry set */
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009450:	4619      	mov	r1, r3
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff fa4d 	bl	80088f2 <dir_sdi>
 8009458:	4603      	mov	r3, r0
 800945a:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800945c:	e026      	b.n	80094ac <store_xdir+0x8e>
		/* Set an entry to the directory */
		res = move_window(dp->obj.fs, dp->sect);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6819      	ldr	r1, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009468:	4608      	mov	r0, r1
 800946a:	f7fe fa70 	bl	800794e <move_window>
 800946e:	4603      	mov	r3, r0
 8009470:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d11d      	bne.n	80094b4 <store_xdir+0x96>
		memcpy(dp->dir, dirb, SZDIRE);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947c:	2220      	movs	r2, #32
 800947e:	68f9      	ldr	r1, [r7, #12]
 8009480:	4618      	mov	r0, r3
 8009482:	f007 fcf7 	bl	8010e74 <memcpy>
		dp->obj.fs->wflag = 1;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2201      	movs	r2, #1
 800948c:	711a      	strb	r2, [r3, #4]

		if (--nent == 0) break;	/* All done? */
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	3b01      	subs	r3, #1
 8009492:	613b      	str	r3, [r7, #16]
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00e      	beq.n	80094b8 <store_xdir+0x9a>
		dirb += SZDIRE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3320      	adds	r3, #32
 800949e:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);	/* Next entry */
 80094a0:	2100      	movs	r1, #0
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7ff fabc 	bl	8008a20 <dir_next>
 80094a8:	4603      	mov	r3, r0
 80094aa:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0d5      	beq.n	800945e <store_xdir+0x40>
 80094b2:	e002      	b.n	80094ba <store_xdir+0x9c>
		if (res != FR_OK) break;
 80094b4:	bf00      	nop
 80094b6:	e000      	b.n	80094ba <store_xdir+0x9c>
		if (--nent == 0) break;	/* All done? */
 80094b8:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <store_xdir+0xa8>
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d101      	bne.n	80094ca <store_xdir+0xac>
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	e000      	b.n	80094cc <store_xdir+0xae>
 80094ca:	2302      	movs	r3, #2
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	371c      	adds	r7, #28
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd90      	pop	{r4, r7, pc}

080094d4 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the directory entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 80094d4:	b590      	push	{r4, r7, lr}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
	BYTE n_c1, nlen;
	WCHAR chr;


	/* Create file-directory and stream-extension entry (1st and 2nd entry) */
	memset(dirb, 0, 2 * SZDIRE);
 80094de:	2240      	movs	r2, #64	@ 0x40
 80094e0:	2100      	movs	r1, #0
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f007 fc8d 	bl	8010e02 <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2285      	movs	r2, #133	@ 0x85
 80094ec:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3320      	adds	r3, #32
 80094f2:	22c0      	movs	r2, #192	@ 0xc0
 80094f4:	701a      	strb	r2, [r3, #0]

	/* Create file name entries (3rd enrty and follows) */
	i = SZDIRE * 2;	/* Top of file name entries */
 80094f6:	2340      	movs	r3, #64	@ 0x40
 80094f8:	60fb      	str	r3, [r7, #12]
	nlen = n_c1 = 0; chr = 1;
 80094fa:	2300      	movs	r3, #0
 80094fc:	72fb      	strb	r3, [r7, #11]
 80094fe:	7afb      	ldrb	r3, [r7, #11]
 8009500:	72bb      	strb	r3, [r7, #10]
 8009502:	2301      	movs	r3, #1
 8009504:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	60fa      	str	r2, [r7, #12]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	4413      	add	r3, r2
 8009510:	22c1      	movs	r2, #193	@ 0xc1
 8009512:	701a      	strb	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	1c5a      	adds	r2, r3, #1
 8009518:	60fa      	str	r2, [r7, #12]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	4413      	add	r3, r2
 800951e:	2200      	movs	r2, #0
 8009520:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr != 0 && (chr = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 8009522:	893b      	ldrh	r3, [r7, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00b      	beq.n	8009540 <create_xdir+0x6c>
 8009528:	7abb      	ldrb	r3, [r7, #10]
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	4413      	add	r3, r2
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	813b      	strh	r3, [r7, #8]
 8009534:	893b      	ldrh	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <create_xdir+0x6c>
 800953a:	7abb      	ldrb	r3, [r7, #10]
 800953c:	3301      	adds	r3, #1
 800953e:	72bb      	strb	r3, [r7, #10]
			st_16(dirb + i, chr); 	/* Store it */
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4413      	add	r3, r2
 8009546:	893a      	ldrh	r2, [r7, #8]
 8009548:	4611      	mov	r1, r2
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe f873 	bl	8007636 <st_16>
			i += 2;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3302      	adds	r3, #2
 8009554:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f003 031f 	and.w	r3, r3, #31
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e0      	bne.n	8009522 <create_xdir+0x4e>
		n_c1++;
 8009560:	7afb      	ldrb	r3, [r7, #11]
 8009562:	3301      	adds	r3, #1
 8009564:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next C1 entry if any char follows */
 8009566:	7abb      	ldrb	r3, [r7, #10]
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	4413      	add	r3, r2
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1c8      	bne.n	8009506 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3323      	adds	r3, #35	@ 0x23
 8009578:	7aba      	ldrb	r2, [r7, #10]
 800957a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + n_c1;	/* Set secondary count (C0 + C1s) */
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3301      	adds	r3, #1
 8009580:	7afa      	ldrb	r2, [r7, #11]
 8009582:	3201      	adds	r2, #1
 8009584:	b2d2      	uxtb	r2, r2
 8009586:	701a      	strb	r2, [r3, #0]
	st_16(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800958e:	6838      	ldr	r0, [r7, #0]
 8009590:	f7ff fdd1 	bl	8009136 <xname_sum>
 8009594:	4603      	mov	r3, r0
 8009596:	4619      	mov	r1, r3
 8009598:	4620      	mov	r0, r4
 800959a:	f7fe f84c 	bl	8007636 <st_16>
}
 800959e:	bf00      	nop
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd90      	pop	{r4, r7, pc}

080095a6 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b086      	sub	sp, #24
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80095b0:	2304      	movs	r3, #4
 80095b2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	613b      	str	r3, [r7, #16]
	BYTE attr, et;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 80095ba:	23ff      	movs	r3, #255	@ 0xff
 80095bc:	757b      	strb	r3, [r7, #21]
 80095be:	23ff      	movs	r3, #255	@ 0xff
 80095c0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80095c2:	e09f      	b.n	8009704 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80095ca:	6938      	ldr	r0, [r7, #16]
 80095cc:	f7fe f9bf 	bl	800794e <move_window>
 80095d0:	4603      	mov	r3, r0
 80095d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f040 809b 	bne.w	8009712 <dir_read+0x16c>
		et = dp->dir[DIR_Name];	/* Test for the entry type */
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	75bb      	strb	r3, [r7, #22]
		if (et == 0) {
 80095e4:	7dbb      	ldrb	r3, [r7, #22]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d102      	bne.n	80095f0 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80095ea:	2304      	movs	r3, #4
 80095ec:	75fb      	strb	r3, [r7, #23]
 80095ee:	e097      	b.n	8009720 <dir_read+0x17a>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d118      	bne.n	800962a <dir_read+0x84>
			if (FF_USE_LABEL && vol) {
				if (et == ET_VLABEL) break;	/* Volume label entry? */
			} else {
				if (et == ET_FILEDIR) {		/* Start of the file entry block? */
 80095f8:	7dbb      	ldrb	r3, [r7, #22]
 80095fa:	2b85      	cmp	r3, #133	@ 0x85
 80095fc:	d179      	bne.n	80096f2 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	651a      	str	r2, [r3, #80]	@ 0x50
					res = load_xdir(dp);	/* Load the entry block */
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7ff fdc6 	bl	8009198 <load_xdir>
 800960c:	4603      	mov	r3, r0
 800960e:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d17f      	bne.n	8009716 <dir_read+0x170>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800961a:	3304      	adds	r3, #4
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009622:	b2da      	uxtb	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	719a      	strb	r2, [r3, #6]
					}
					break;
 8009628:	e075      	b.n	8009716 <dir_read+0x170>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962e:	330b      	adds	r3, #11
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009636:	73fb      	strb	r3, [r7, #15]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	7bfa      	ldrb	r2, [r7, #15]
 800963c:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (et == DDEM || et == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800963e:	7dbb      	ldrb	r3, [r7, #22]
 8009640:	2be5      	cmp	r3, #229	@ 0xe5
 8009642:	d00e      	beq.n	8009662 <dir_read+0xbc>
 8009644:	7dbb      	ldrb	r3, [r7, #22]
 8009646:	2b2e      	cmp	r3, #46	@ 0x2e
 8009648:	d00b      	beq.n	8009662 <dir_read+0xbc>
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	f023 0320 	bic.w	r3, r3, #32
 8009650:	2b08      	cmp	r3, #8
 8009652:	bf0c      	ite	eq
 8009654:	2301      	moveq	r3, #1
 8009656:	2300      	movne	r3, #0
 8009658:	b2db      	uxtb	r3, r3
 800965a:	461a      	mov	r2, r3
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	4293      	cmp	r3, r2
 8009660:	d002      	beq.n	8009668 <dir_read+0xc2>
				ord = 0xFF;
 8009662:	23ff      	movs	r3, #255	@ 0xff
 8009664:	757b      	strb	r3, [r7, #21]
 8009666:	e044      	b.n	80096f2 <dir_read+0x14c>
			} else {
				if (attr == AM_LFN) {	/* An LFN entry is found */
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	2b0f      	cmp	r3, #15
 800966c:	d12f      	bne.n	80096ce <dir_read+0x128>
					if (et & LLEF) {		/* Is it start of an LFN sequence? */
 800966e:	7dbb      	ldrb	r3, [r7, #22]
 8009670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00d      	beq.n	8009694 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967c:	7b5b      	ldrb	r3, [r3, #13]
 800967e:	753b      	strb	r3, [r7, #20]
						et &= (BYTE)~LLEF; ord = et;
 8009680:	7dbb      	ldrb	r3, [r7, #22]
 8009682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009686:	75bb      	strb	r3, [r7, #22]
 8009688:	7dbb      	ldrb	r3, [r7, #22]
 800968a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	651a      	str	r2, [r3, #80]	@ 0x50
					}
					/* Check LFN validity and capture it */
					ord = (et == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009694:	7dba      	ldrb	r2, [r7, #22]
 8009696:	7d7b      	ldrb	r3, [r7, #21]
 8009698:	429a      	cmp	r2, r3
 800969a:	d115      	bne.n	80096c8 <dir_read+0x122>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a0:	330d      	adds	r3, #13
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	7d3a      	ldrb	r2, [r7, #20]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d10e      	bne.n	80096c8 <dir_read+0x122>
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b2:	4619      	mov	r1, r3
 80096b4:	4610      	mov	r0, r2
 80096b6:	f7ff fb77 	bl	8008da8 <pick_lfn>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d003      	beq.n	80096c8 <dir_read+0x122>
 80096c0:	7d7b      	ldrb	r3, [r7, #21]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	e000      	b.n	80096ca <dir_read+0x124>
 80096c8:	23ff      	movs	r3, #255	@ 0xff
 80096ca:	757b      	strb	r3, [r7, #21]
 80096cc:	e011      	b.n	80096f2 <dir_read+0x14c>
				} else {				/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80096ce:	7d7b      	ldrb	r3, [r7, #21]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d109      	bne.n	80096e8 <dir_read+0x142>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d8:	4618      	mov	r0, r3
 80096da:	f7ff fcdb 	bl	8009094 <sum_sfn>
 80096de:	4603      	mov	r3, r0
 80096e0:	461a      	mov	r2, r3
 80096e2:	7d3b      	ldrb	r3, [r7, #20]
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d018      	beq.n	800971a <dir_read+0x174>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f04f 32ff 	mov.w	r2, #4294967295
 80096ee:	651a      	str	r2, [r3, #80]	@ 0x50
					}
					break;
 80096f0:	e013      	b.n	800971a <dir_read+0x174>
			if (et != DDEM && et != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80096f2:	2100      	movs	r1, #0
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7ff f993 	bl	8008a20 <dir_next>
 80096fa:	4603      	mov	r3, r0
 80096fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10c      	bne.n	800971e <dir_read+0x178>
	while (dp->sect) {
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800970a:	4313      	orrs	r3, r2
 800970c:	f47f af5a 	bne.w	80095c4 <dir_read+0x1e>
 8009710:	e006      	b.n	8009720 <dir_read+0x17a>
		if (res != FR_OK) break;
 8009712:	bf00      	nop
 8009714:	e004      	b.n	8009720 <dir_read+0x17a>
					break;
 8009716:	bf00      	nop
 8009718:	e002      	b.n	8009720 <dir_read+0x17a>
					break;
 800971a:	bf00      	nop
 800971c:	e000      	b.n	8009720 <dir_read+0x17a>
		if (res != FR_OK) break;
 800971e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009720:	7dfb      	ldrb	r3, [r7, #23]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d006      	beq.n	8009734 <dir_read+0x18e>
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	f04f 0200 	mov.w	r2, #0
 800972c:	f04f 0300 	mov.w	r3, #0
 8009730:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	return res;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800973e:	b590      	push	{r4, r7, lr}
 8009740:	b089      	sub	sp, #36	@ 0x24
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	60fb      	str	r3, [r7, #12]
	BYTE et;
#if FF_USE_LFN
	BYTE attr, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800974c:	2100      	movs	r1, #0
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff f8cf 	bl	80088f2 <dir_sdi>
 8009754:	4603      	mov	r3, r0
 8009756:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8009758:	7ffb      	ldrb	r3, [r7, #31]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <dir_find+0x24>
 800975e:	7ffb      	ldrb	r3, [r7, #31]
 8009760:	e112      	b.n	8009988 <dir_find+0x24a>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	2b04      	cmp	r3, #4
 8009768:	d164      	bne.n	8009834 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	4618      	mov	r0, r3
 8009770:	f7ff fce1 	bl	8009136 <xname_sum>
 8009774:	4603      	mov	r3, r0
 8009776:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 8009778:	e04f      	b.n	800981a <dir_find+0xdc>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object name */
#endif
			if (ld_16(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800977e:	3324      	adds	r3, #36	@ 0x24
 8009780:	4618      	mov	r0, r3
 8009782:	f7fd fe41 	bl	8007408 <ld_16>
 8009786:	4603      	mov	r3, r0
 8009788:	461a      	mov	r2, r3
 800978a:	893b      	ldrh	r3, [r7, #8]
 800978c:	4293      	cmp	r3, r2
 800978e:	d143      	bne.n	8009818 <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009794:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009798:	76fb      	strb	r3, [r7, #27]
 800979a:	2340      	movs	r3, #64	@ 0x40
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	2300      	movs	r3, #0
 80097a0:	613b      	str	r3, [r7, #16]
 80097a2:	e028      	b.n	80097f6 <dir_find+0xb8>
				if ((di % SZDIRE) == 0) di += 2;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f003 031f 	and.w	r3, r3, #31
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d102      	bne.n	80097b4 <dir_find+0x76>
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	3302      	adds	r3, #2
 80097b2:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_16(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	4413      	add	r3, r2
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fd fe23 	bl	8007408 <ld_16>
 80097c2:	4603      	mov	r3, r0
 80097c4:	4618      	mov	r0, r3
 80097c6:	f002 ffbb 	bl	800c740 <ff_wtoupper>
 80097ca:	4604      	mov	r4, r0
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	68da      	ldr	r2, [r3, #12]
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	4413      	add	r3, r2
 80097d6:	881b      	ldrh	r3, [r3, #0]
 80097d8:	4618      	mov	r0, r3
 80097da:	f002 ffb1 	bl	800c740 <ff_wtoupper>
 80097de:	4603      	mov	r3, r0
 80097e0:	429c      	cmp	r4, r3
 80097e2:	d10c      	bne.n	80097fe <dir_find+0xc0>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80097e4:	7efb      	ldrb	r3, [r7, #27]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	76fb      	strb	r3, [r7, #27]
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	3302      	adds	r3, #2
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	3301      	adds	r3, #1
 80097f4:	613b      	str	r3, [r7, #16]
 80097f6:	7efb      	ldrb	r3, [r7, #27]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1d3      	bne.n	80097a4 <dir_find+0x66>
 80097fc:	e000      	b.n	8009800 <dir_find+0xc2>
				if (ff_wtoupper(ld_16(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80097fe:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8009800:	7efb      	ldrb	r3, [r7, #27]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d109      	bne.n	800981a <dir_find+0xdc>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	68da      	ldr	r2, [r3, #12]
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	005b      	lsls	r3, r3, #1
 800980e:	4413      	add	r3, r2
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00b      	beq.n	800982e <dir_find+0xf0>
 8009816:	e000      	b.n	800981a <dir_find+0xdc>
			if (ld_16(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009818:	bf00      	nop
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800981a:	2100      	movs	r1, #0
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff fec2 	bl	80095a6 <dir_read>
 8009822:	4603      	mov	r3, r0
 8009824:	77fb      	strb	r3, [r7, #31]
 8009826:	7ffb      	ldrb	r3, [r7, #31]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d0a6      	beq.n	800977a <dir_find+0x3c>
 800982c:	e000      	b.n	8009830 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800982e:	bf00      	nop
		}
		return res;
 8009830:	7ffb      	ldrb	r3, [r7, #31]
 8009832:	e0a9      	b.n	8009988 <dir_find+0x24a>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009834:	23ff      	movs	r3, #255	@ 0xff
 8009836:	773b      	strb	r3, [r7, #28]
 8009838:	7f3b      	ldrb	r3, [r7, #28]
 800983a:	777b      	strb	r3, [r7, #29]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f04f 32ff 	mov.w	r2, #4294967295
 8009842:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
	do {
		res = move_window(fs, dp->sect);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f7fe f87f 	bl	800794e <move_window>
 8009850:	4603      	mov	r3, r0
 8009852:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8009854:	7ffb      	ldrb	r3, [r7, #31]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f040 8090 	bne.w	800997c <dir_find+0x23e>
		et = dp->dir[DIR_Name];		/* Entry type */
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	77bb      	strb	r3, [r7, #30]
		if (et == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 8009864:	7fbb      	ldrb	r3, [r7, #30]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d102      	bne.n	8009870 <dir_find+0x132>
 800986a:	2304      	movs	r3, #4
 800986c:	77fb      	strb	r3, [r7, #31]
 800986e:	e08a      	b.n	8009986 <dir_find+0x248>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009874:	330b      	adds	r3, #11
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800987c:	72fb      	strb	r3, [r7, #11]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7afa      	ldrb	r2, [r7, #11]
 8009882:	719a      	strb	r2, [r3, #6]
		if (et == DDEM || ((attr & AM_VOL) && attr != AM_LFN)) {	/* An entry without valid data */
 8009884:	7fbb      	ldrb	r3, [r7, #30]
 8009886:	2be5      	cmp	r3, #229	@ 0xe5
 8009888:	d007      	beq.n	800989a <dir_find+0x15c>
 800988a:	7afb      	ldrb	r3, [r7, #11]
 800988c:	f003 0308 	and.w	r3, r3, #8
 8009890:	2b00      	cmp	r3, #0
 8009892:	d009      	beq.n	80098a8 <dir_find+0x16a>
 8009894:	7afb      	ldrb	r3, [r7, #11]
 8009896:	2b0f      	cmp	r3, #15
 8009898:	d006      	beq.n	80098a8 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800989a:	23ff      	movs	r3, #255	@ 0xff
 800989c:	777b      	strb	r3, [r7, #29]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295
 80098a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80098a6:	e05e      	b.n	8009966 <dir_find+0x228>
		} else {
			if (attr == AM_LFN) {			/* Is it an LFN entry? */
 80098a8:	7afb      	ldrb	r3, [r7, #11]
 80098aa:	2b0f      	cmp	r3, #15
 80098ac:	d136      	bne.n	800991c <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 80098b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d154      	bne.n	8009966 <dir_find+0x228>
					if (et & LLEF) {		/* Is it start of an entry set? */
 80098bc:	7fbb      	ldrb	r3, [r7, #30]
 80098be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00d      	beq.n	80098e2 <dir_find+0x1a4>
						et &= (BYTE)~LLEF;
 80098c6:	7fbb      	ldrb	r3, [r7, #30]
 80098c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098cc:	77bb      	strb	r3, [r7, #30]
						ord = et;					/* Number of LFN entries */
 80098ce:	7fbb      	ldrb	r3, [r7, #30]
 80098d0:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;		/* Start offset of LFN */
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	651a      	str	r2, [r3, #80]	@ 0x50
						sum = dp->dir[LDIR_Chksum];	/* Sum of the SFN */
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098de:	7b5b      	ldrb	r3, [r3, #13]
 80098e0:	773b      	strb	r3, [r7, #28]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (et == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80098e2:	7fba      	ldrb	r2, [r7, #30]
 80098e4:	7f7b      	ldrb	r3, [r7, #29]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d115      	bne.n	8009916 <dir_find+0x1d8>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ee:	330d      	adds	r3, #13
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	7f3a      	ldrb	r2, [r7, #28]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d10e      	bne.n	8009916 <dir_find+0x1d8>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	68da      	ldr	r2, [r3, #12]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009900:	4619      	mov	r1, r3
 8009902:	4610      	mov	r0, r2
 8009904:	f7ff f9e0 	bl	8008cc8 <cmp_lfn>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d003      	beq.n	8009916 <dir_find+0x1d8>
 800990e:	7f7b      	ldrb	r3, [r7, #29]
 8009910:	3b01      	subs	r3, #1
 8009912:	b2db      	uxtb	r3, r3
 8009914:	e000      	b.n	8009918 <dir_find+0x1da>
 8009916:	23ff      	movs	r3, #255	@ 0xff
 8009918:	777b      	strb	r3, [r7, #29]
 800991a:	e024      	b.n	8009966 <dir_find+0x228>
				}
			} else {					/* SFN entry */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800991c:	7f7b      	ldrb	r3, [r7, #29]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d109      	bne.n	8009936 <dir_find+0x1f8>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff fbb4 	bl	8009094 <sum_sfn>
 800992c:	4603      	mov	r3, r0
 800992e:	461a      	mov	r2, r3
 8009930:	7f3b      	ldrb	r3, [r7, #28]
 8009932:	4293      	cmp	r3, r2
 8009934:	d024      	beq.n	8009980 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10a      	bne.n	800995a <dir_find+0x21c>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3344      	adds	r3, #68	@ 0x44
 800994c:	220b      	movs	r2, #11
 800994e:	4619      	mov	r1, r3
 8009950:	f007 fa47 	bl	8010de2 <memcmp>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d014      	beq.n	8009984 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Not matched, reset LFN sequence */
 800995a:	23ff      	movs	r3, #255	@ 0xff
 800995c:	777b      	strb	r3, [r7, #29]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f04f 32ff 	mov.w	r2, #4294967295
 8009964:	651a      	str	r2, [r3, #80]	@ 0x50
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009966:	2100      	movs	r1, #0
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff f859 	bl	8008a20 <dir_next>
 800996e:	4603      	mov	r3, r0
 8009970:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8009972:	7ffb      	ldrb	r3, [r7, #31]
 8009974:	2b00      	cmp	r3, #0
 8009976:	f43f af65 	beq.w	8009844 <dir_find+0x106>
 800997a:	e004      	b.n	8009986 <dir_find+0x248>
		if (res != FR_OK) break;
 800997c:	bf00      	nop
 800997e:	e002      	b.n	8009986 <dir_find+0x248>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009980:	bf00      	nop
 8009982:	e000      	b.n	8009986 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009984:	bf00      	nop

	return res;
 8009986:	7ffb      	ldrb	r3, [r7, #31]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3724      	adds	r7, #36	@ 0x24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd90      	pop	{r4, r7, pc}

08009990 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8009990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009994:	b0a2      	sub	sp, #136	@ 0x88
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	677b      	str	r3, [r7, #116]	@ 0x74
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12];


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 80099a6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <dir_register+0x22>
 80099ae:	2306      	movs	r3, #6
 80099b0:	e19c      	b.n	8009cec <dir_register+0x35c>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 80099b2:	2300      	movs	r3, #0
 80099b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099b6:	e002      	b.n	80099be <dir_register+0x2e>
 80099b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80099ba:	3301      	adds	r3, #1
 80099bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	4413      	add	r3, r2
 80099c8:	881b      	ldrh	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1f4      	bne.n	80099b8 <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80099ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	f040 80a6 	bne.w	8009b24 <dir_register+0x194>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80099d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80099da:	330e      	adds	r3, #14
 80099dc:	4aa9      	ldr	r2, [pc, #676]	@ (8009c84 <dir_register+0x2f4>)
 80099de:	fba2 2303 	umull	r2, r3, r2, r3
 80099e2:	08db      	lsrs	r3, r3, #3
 80099e4:	3302      	adds	r3, #2
 80099e6:	67bb      	str	r3, [r7, #120]	@ 0x78
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 80099e8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff f8d0 	bl	8008b90 <dir_alloc>
 80099f0:	4603      	mov	r3, r0
 80099f2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		if (res != FR_OK) return res;
 80099f6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <dir_register+0x74>
 80099fe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009a02:	e173      	b.n	8009cec <dir_register+0x35c>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	015b      	lsls	r3, r3, #5
 8009a0e:	1ad2      	subs	r2, r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	651a      	str	r2, [r3, #80]	@ 0x50

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	79db      	ldrb	r3, [r3, #7]
 8009a18:	f003 0304 	and.w	r3, r3, #4
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d077      	beq.n	8009b10 <dir_register+0x180>
			dp->obj.stat &= ~4;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	79db      	ldrb	r3, [r3, #7]
 8009a24:	f023 0304 	bic.w	r3, r3, #4
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fe fc86 	bl	8008342 <fill_first_frag>
 8009a36:	4603      	mov	r3, r0
 8009a38:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			if (res != FR_OK) return res;
 8009a3c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <dir_register+0xba>
 8009a44:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009a48:	e150      	b.n	8009cec <dir_register+0x35c>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a50:	f04f 32ff 	mov.w	r2, #4294967295
 8009a54:	4619      	mov	r1, r3
 8009a56:	f7fe fca3 	bl	80083a0 <fill_last_frag>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			if (res != FR_OK) return res;
 8009a60:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <dir_register+0xde>
 8009a68:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009a6c:	e13e      	b.n	8009cec <dir_register+0x35c>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d04c      	beq.n	8009b10 <dir_register+0x180>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	f107 0308 	add.w	r3, r7, #8
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7ff fc94 	bl	80093ac <load_obj_xdir>
 8009a84:	4603      	mov	r3, r0
 8009a86:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
				if (res != FR_OK) return res;
 8009a8a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d002      	beq.n	8009a98 <dir_register+0x108>
 8009a92:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009a96:	e129      	b.n	8009cec <dir_register+0x35c>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009a9e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8009aa0:	8949      	ldrh	r1, [r1, #10]
 8009aa2:	0249      	lsls	r1, r1, #9
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	eb12 0804 	adds.w	r8, r2, r4
 8009aae:	eb43 0905 	adc.w	r9, r3, r5
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	e9c3 8904 	strd	r8, r9, [r3, #16]
				st_64(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 8009ab8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009abc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009ac6:	4608      	mov	r0, r1
 8009ac8:	f7fd fdfc 	bl	80076c4 <st_64>
				st_64(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8009acc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ad0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009ada:	4608      	mov	r0, r1
 8009adc:	f7fd fdf2 	bl	80076c4 <st_64>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;	/* Update the allocation status */
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	79da      	ldrb	r2, [r3, #7]
 8009ae4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ae8:	3321      	adds	r3, #33	@ 0x21
 8009aea:	f042 0201 	orr.w	r2, r2, #1
 8009aee:	b2d2      	uxtb	r2, r2
 8009af0:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 8009af2:	f107 0308 	add.w	r3, r7, #8
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7ff fc91 	bl	800941e <store_xdir>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
				if (res != FR_OK) return res;
 8009b02:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d002      	beq.n	8009b10 <dir_register+0x180>
 8009b0a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009b0e:	e0ed      	b.n	8009cec <dir_register+0x35c>
				}
#endif
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8009b10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	f7ff fcda 	bl	80094d4 <create_xdir>
		return FR_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	e0e3      	b.n	8009cec <dir_register+0x35c>
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8009b2a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009b2e:	6810      	ldr	r0, [r2, #0]
 8009b30:	6851      	ldr	r1, [r2, #4]
 8009b32:	6892      	ldr	r2, [r2, #8]
 8009b34:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009b36:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d03a      	beq.n	8009bb8 <dir_register+0x228>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2240      	movs	r2, #64	@ 0x40
 8009b46:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
		for (n = 1; n < 100; n++) {
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b50:	e01a      	b.n	8009b88 <dir_register+0x1f8>
			gen_numname(dp->fn, sn, fs->lfnbuf, (WORD)n);	/* Generate a numbered name */
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8009b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b5a:	68da      	ldr	r2, [r3, #12]
 8009b5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8009b66:	f7ff f9ef 	bl	8008f48 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7ff fde7 	bl	800973e <dir_find>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			if (res != FR_OK) break;
 8009b76:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d109      	bne.n	8009b92 <dir_register+0x202>
		for (n = 1; n < 100; n++) {
 8009b7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b82:	3301      	adds	r3, #1
 8009b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b8c:	2b63      	cmp	r3, #99	@ 0x63
 8009b8e:	d9e0      	bls.n	8009b52 <dir_register+0x1c2>
 8009b90:	e000      	b.n	8009b94 <dir_register+0x204>
			if (res != FR_OK) break;
 8009b92:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b98:	2b64      	cmp	r3, #100	@ 0x64
 8009b9a:	d101      	bne.n	8009ba0 <dir_register+0x210>
 8009b9c:	2307      	movs	r3, #7
 8009b9e:	e0a5      	b.n	8009cec <dir_register+0x35c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009ba0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d002      	beq.n	8009bae <dir_register+0x21e>
 8009ba8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009bac:	e09e      	b.n	8009cec <dir_register+0x35c>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009bae:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009bb8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009bbc:	f003 0302 	and.w	r3, r3, #2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d007      	beq.n	8009bd4 <dir_register+0x244>
 8009bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bc6:	330c      	adds	r3, #12
 8009bc8:	4a2f      	ldr	r2, [pc, #188]	@ (8009c88 <dir_register+0x2f8>)
 8009bca:	fba2 2303 	umull	r2, r3, r2, r3
 8009bce:	089b      	lsrs	r3, r3, #2
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	e000      	b.n	8009bd6 <dir_register+0x246>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	67bb      	str	r3, [r7, #120]	@ 0x78
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 8009bd8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7fe ffd8 	bl	8008b90 <dir_alloc>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 8009be6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d14f      	bne.n	8009c8e <dir_register+0x2fe>
 8009bee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009bf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d049      	beq.n	8009c8e <dir_register+0x2fe>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c00:	015b      	lsls	r3, r3, #5
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7fe fe73 	bl	80088f2 <dir_sdi>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		if (res == FR_OK) {
 8009c12:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d139      	bne.n	8009c8e <dir_register+0x2fe>
			BYTE sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3344      	adds	r3, #68	@ 0x44
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff fa38 	bl	8009094 <sum_sfn>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009c30:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8009c32:	f7fd fe8c 	bl	800794e <move_window>
 8009c36:	4603      	mov	r3, r0
 8009c38:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
				if (res != FR_OK) break;
 8009c3c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d123      	bne.n	8009c8c <dir_register+0x2fc>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8009c44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c46:	68d8      	ldr	r0, [r3, #12]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009c4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8009c54:	f7ff f910 	bl	8008e78 <put_lfn>
				fs->wflag = 1;
 8009c58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8009c5e:	2100      	movs	r1, #0
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7fe fedd 	bl	8008a20 <dir_next>
 8009c66:	4603      	mov	r3, r0
 8009c68:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			} while (res == FR_OK && --n_ent);
 8009c6c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10c      	bne.n	8009c8e <dir_register+0x2fe>
 8009c74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c76:	3b01      	subs	r3, #1
 8009c78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1d4      	bne.n	8009c2a <dir_register+0x29a>
 8009c80:	e005      	b.n	8009c8e <dir_register+0x2fe>
 8009c82:	bf00      	nop
 8009c84:	88888889 	.word	0x88888889
 8009c88:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8009c8c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009c8e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d128      	bne.n	8009ce8 <dir_register+0x358>
		res = move_window(fs, dp->sect);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009c9c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8009c9e:	f7fd fe56 	bl	800794e <move_window>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		if (res == FR_OK) {
 8009ca8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d11b      	bne.n	8009ce8 <dir_register+0x358>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cb4:	2220      	movs	r2, #32
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f007 f8a2 	bl	8010e02 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	3344      	adds	r3, #68	@ 0x44
 8009cc6:	220b      	movs	r2, #11
 8009cc8:	4619      	mov	r1, r3
 8009cca:	f007 f8d3 	bl	8010e74 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put low-case flags */
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 204f 	ldrb.w	r2, [r3, #79]	@ 0x4f
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd8:	330c      	adds	r3, #12
 8009cda:	f002 0218 	and.w	r2, r2, #24
 8009cde:	b2d2      	uxtb	r2, r2
 8009ce0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009ce2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8009ce8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3788      	adds	r7, #136	@ 0x88
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009cf6:	bf00      	nop

08009cf8 <dir_remove>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	613b      	str	r3, [r7, #16]
#if FF_USE_LFN		/* LFN configuration */
	DWORD last = dp->dptr;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d0a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d14:	d007      	beq.n	8009d26 <dir_remove+0x2e>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7fe fde8 	bl	80088f2 <dir_sdi>
 8009d22:	4603      	mov	r3, r0
 8009d24:	e000      	b.n	8009d28 <dir_remove+0x30>
 8009d26:	2300      	movs	r3, #0
 8009d28:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d136      	bne.n	8009d9e <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009d36:	6938      	ldr	r0, [r7, #16]
 8009d38:	f7fd fe09 	bl	800794e <move_window>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d123      	bne.n	8009d8e <dir_remove+0x96>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	d109      	bne.n	8009d62 <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d52:	781a      	ldrb	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009d5c:	b2d2      	uxtb	r2, r2
 8009d5e:	701a      	strb	r2, [r3, #0]
 8009d60:	e003      	b.n	8009d6a <dir_remove+0x72>
			} else {										/* On the FAT/FAT32 volume */
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d66:	22e5      	movs	r2, #229	@ 0xe5
 8009d68:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	711a      	strb	r2, [r3, #4]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d90b      	bls.n	8009d92 <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7fe fe4f 	bl	8008a20 <dir_next>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0d1      	beq.n	8009d30 <dir_remove+0x38>
 8009d8c:	e002      	b.n	8009d94 <dir_remove+0x9c>
			if (res != FR_OK) break;
 8009d8e:	bf00      	nop
 8009d90:	e000      	b.n	8009d94 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8009d92:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	d101      	bne.n	8009d9e <dir_remove+0xa6>
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
		fs->wflag = 1;
	}
#endif

	return res;
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3718      	adds	r7, #24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08a      	sub	sp, #40	@ 0x28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create an LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60bb      	str	r3, [r7, #8]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	613b      	str	r3, [r7, #16]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8009dc4:	f107 0308 	add.w	r3, r7, #8
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fd fd25 	bl	8007818 <tchar2uni>
 8009dce:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd6:	d101      	bne.n	8009ddc <create_name+0x34>
 8009dd8:	2306      	movs	r3, #6
 8009dda:	e1bf      	b.n	800a15c <create_name+0x3b4>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009de2:	d309      	bcc.n	8009df8 <create_name+0x50>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	0c19      	lsrs	r1, r3, #16
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	617a      	str	r2, [r7, #20]
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	4413      	add	r3, r2
 8009df4:	b28a      	uxth	r2, r1
 8009df6:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 8009dfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dfe:	2b1f      	cmp	r3, #31
 8009e00:	d920      	bls.n	8009e44 <create_name+0x9c>
 8009e02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e04:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e06:	d01d      	beq.n	8009e44 <create_name+0x9c>
 8009e08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e0a:	2b5c      	cmp	r3, #92	@ 0x5c
 8009e0c:	d01a      	beq.n	8009e44 <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009e0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e10:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e12:	d809      	bhi.n	8009e28 <create_name+0x80>
 8009e14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e16:	4619      	mov	r1, r3
 8009e18:	4895      	ldr	r0, [pc, #596]	@ (800a070 <create_name+0x2c8>)
 8009e1a:	f006 fffa 	bl	8010e12 <strchr>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <create_name+0x80>
 8009e24:	2306      	movs	r3, #6
 8009e26:	e199      	b.n	800a15c <create_name+0x3b4>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2bfe      	cmp	r3, #254	@ 0xfe
 8009e2c:	d901      	bls.n	8009e32 <create_name+0x8a>
 8009e2e:	2306      	movs	r3, #6
 8009e30:	e194      	b.n	800a15c <create_name+0x3b4>
		lfn[di++] = wc;				/* Store the Unicode character */
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	617a      	str	r2, [r7, #20]
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009e40:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 8009e42:	e7bf      	b.n	8009dc4 <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 8009e44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e46:	2b1f      	cmp	r3, #31
 8009e48:	d806      	bhi.n	8009e58 <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 8009e4a:	2304      	movs	r3, #4
 8009e4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009e50:	e014      	b.n	8009e7c <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	3301      	adds	r3, #1
 8009e56:	60bb      	str	r3, [r7, #8]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e5e:	d0f8      	beq.n	8009e52 <create_name+0xaa>
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2b5c      	cmp	r3, #92	@ 0x5c
 8009e66:	d0f4      	beq.n	8009e52 <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b1f      	cmp	r3, #31
 8009e74:	d802      	bhi.n	8009e7c <create_name+0xd4>
 8009e76:	2304      	movs	r3, #4
 8009e78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	601a      	str	r2, [r3, #0]
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
 8009e82:	e011      	b.n	8009ea8 <create_name+0x100>
		wc = lfn[di - 1];
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009e8a:	4413      	add	r3, r2
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	4413      	add	r3, r2
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc != ' ' && wc != '.') break;
 8009e96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e98:	2b20      	cmp	r3, #32
 8009e9a:	d002      	beq.n	8009ea2 <create_name+0xfa>
 8009e9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ea0:	d106      	bne.n	8009eb0 <create_name+0x108>
		di--;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1ea      	bne.n	8009e84 <create_name+0xdc>
 8009eae:	e000      	b.n	8009eb2 <create_name+0x10a>
		if (wc != ' ' && wc != '.') break;
 8009eb0:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	005b      	lsls	r3, r3, #1
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	4413      	add	r3, r2
 8009eba:	2200      	movs	r2, #0
 8009ebc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <create_name+0x120>
 8009ec4:	2306      	movs	r3, #6
 8009ec6:	e149      	b.n	800a15c <create_name+0x3b4>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8009ec8:	2300      	movs	r3, #0
 8009eca:	61bb      	str	r3, [r7, #24]
 8009ecc:	e002      	b.n	8009ed4 <create_name+0x12c>
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	61bb      	str	r3, [r7, #24]
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	4413      	add	r3, r2
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	2b20      	cmp	r3, #32
 8009ee0:	d0f5      	beq.n	8009ece <create_name+0x126>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d106      	bne.n	8009ef6 <create_name+0x14e>
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	4413      	add	r3, r2
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ef4:	d109      	bne.n	8009f0a <create_name+0x162>
 8009ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009efa:	f043 0303 	orr.w	r3, r3, #3
 8009efe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8009f02:	e002      	b.n	8009f0a <create_name+0x162>
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	3b01      	subs	r3, #1
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d009      	beq.n	8009f24 <create_name+0x17c>
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009f16:	4413      	add	r3, r2
 8009f18:	005b      	lsls	r3, r3, #1
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f22:	d1ef      	bne.n	8009f04 <create_name+0x15c>

	memset(dp->fn, ' ', 11);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3344      	adds	r3, #68	@ 0x44
 8009f28:	220b      	movs	r2, #11
 8009f2a:	2120      	movs	r1, #32
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f006 ff68 	bl	8010e02 <memset>
	i = b = 0; ni = 8;
 8009f32:	2300      	movs	r3, #0
 8009f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f38:	2300      	movs	r3, #0
 8009f3a:	623b      	str	r3, [r7, #32]
 8009f3c:	2308      	movs	r3, #8
 8009f3e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	61ba      	str	r2, [r7, #24]
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 8009f50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 80b8 	beq.w	800a0c8 <create_name+0x320>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8009f58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f5a:	2b20      	cmp	r3, #32
 8009f5c:	d006      	beq.n	8009f6c <create_name+0x1c4>
 8009f5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f60:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f62:	d10a      	bne.n	8009f7a <create_name+0x1d2>
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d006      	beq.n	8009f7a <create_name+0x1d2>
			cf |= NS_LOSS | NS_LFN;
 8009f6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f70:	f043 0303 	orr.w	r3, r3, #3
 8009f74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			continue;
 8009f78:	e0a5      	b.n	800a0c6 <create_name+0x31e>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8009f7a:	6a3a      	ldr	r2, [r7, #32]
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d203      	bcs.n	8009f8a <create_name+0x1e2>
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d124      	bne.n	8009fd4 <create_name+0x22c>
			if (ni == 11) {				/* Name extension overflow? */
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	2b0b      	cmp	r3, #11
 8009f8e:	d106      	bne.n	8009f9e <create_name+0x1f6>
				cf |= NS_LOSS | NS_LFN;
 8009f90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f94:	f043 0303 	orr.w	r3, r3, #3
 8009f98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 8009f9c:	e097      	b.n	800a0ce <create_name+0x326>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8009f9e:	69ba      	ldr	r2, [r7, #24]
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d005      	beq.n	8009fb2 <create_name+0x20a>
 8009fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009faa:	f043 0303 	orr.w	r3, r3, #3
 8009fae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;						/* No name extension? */
 8009fb2:	69ba      	ldr	r2, [r7, #24]
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	f200 8088 	bhi.w	800a0cc <create_name+0x324>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	61bb      	str	r3, [r7, #24]
 8009fc0:	2308      	movs	r3, #8
 8009fc2:	623b      	str	r3, [r7, #32]
 8009fc4:	230b      	movs	r3, #11
 8009fc6:	61fb      	str	r3, [r7, #28]
 8009fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			continue;
 8009fd2:	e078      	b.n	800a0c6 <create_name+0x31e>
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 8009fd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fd8:	d918      	bls.n	800a00c <create_name+0x264>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8009fda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009fde:	f043 0302 	orr.w	r3, r3, #2
 8009fe2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* In DBCS cfg */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8009fe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fe8:	f240 11b5 	movw	r1, #437	@ 0x1b5
 8009fec:	4618      	mov	r0, r3
 8009fee:	f002 fb3f 	bl	800c670 <ff_uni2oem>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8009ff6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d005      	beq.n	800a00c <create_name+0x264>
 800a000:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a006:	4a1b      	ldr	r2, [pc, #108]	@ (800a074 <create_name+0x2cc>)
 800a008:	5cd3      	ldrb	r3, [r2, r3]
 800a00a:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 800a00c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a00e:	2bff      	cmp	r3, #255	@ 0xff
 800a010:	d91a      	bls.n	800a048 <create_name+0x2a0>
			if (i >= ni - 1) {			/* Field overflow? */
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	3b01      	subs	r3, #1
 800a016:	6a3a      	ldr	r2, [r7, #32]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d308      	bcc.n	800a02e <create_name+0x286>
				cf |= NS_LOSS | NS_LFN;
 800a01c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a020:	f043 0303 	orr.w	r3, r3, #3
 800a024:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				i = ni; continue;		/* Next field */
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	623b      	str	r3, [r7, #32]
 800a02c:	e04b      	b.n	800a0c6 <create_name+0x31e>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 800a02e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a030:	0a1b      	lsrs	r3, r3, #8
 800a032:	b299      	uxth	r1, r3
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	623a      	str	r2, [r7, #32]
 800a03a:	b2c9      	uxtb	r1, r1
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	4413      	add	r3, r2
 800a040:	460a      	mov	r2, r1
 800a042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a046:	e034      	b.n	800a0b2 <create_name+0x30a>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 800a048:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d007      	beq.n	800a05e <create_name+0x2b6>
 800a04e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a050:	4619      	mov	r1, r3
 800a052:	4809      	ldr	r0, [pc, #36]	@ (800a078 <create_name+0x2d0>)
 800a054:	f006 fedd 	bl	8010e12 <strchr>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00e      	beq.n	800a07c <create_name+0x2d4>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a05e:	235f      	movs	r3, #95	@ 0x5f
 800a060:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a062:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a066:	f043 0303 	orr.w	r3, r3, #3
 800a06a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a06e:	e020      	b.n	800a0b2 <create_name+0x30a>
 800a070:	08011280 	.word	0x08011280
 800a074:	08011310 	.word	0x08011310
 800a078:	0801128c 	.word	0x0801128c
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800a07c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a07e:	2b40      	cmp	r3, #64	@ 0x40
 800a080:	d908      	bls.n	800a094 <create_name+0x2ec>
 800a082:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a084:	2b5a      	cmp	r3, #90	@ 0x5a
 800a086:	d805      	bhi.n	800a094 <create_name+0x2ec>
					b |= 2;
 800a088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a08c:	f043 0302 	orr.w	r3, r3, #2
 800a090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 800a094:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a096:	2b60      	cmp	r3, #96	@ 0x60
 800a098:	d90b      	bls.n	800a0b2 <create_name+0x30a>
 800a09a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a09c:	2b7a      	cmp	r3, #122	@ 0x7a
 800a09e:	d808      	bhi.n	800a0b2 <create_name+0x30a>
					b |= 1; wc -= 0x20;
 800a0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0a4:	f043 0301 	orr.w	r3, r3, #1
 800a0a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a0ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a0ae:	3b20      	subs	r3, #32
 800a0b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	1c5a      	adds	r2, r3, #1
 800a0b6:	623a      	str	r2, [r7, #32]
 800a0b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a0ba:	b2d1      	uxtb	r1, r2
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	4413      	add	r3, r2
 800a0c0:	460a      	mov	r2, r1
 800a0c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		wc = lfn[si++];					/* Get an LFN character */
 800a0c6:	e73b      	b.n	8009f40 <create_name+0x198>
		if (wc == 0) break;				/* Break on end of the LFN */
 800a0c8:	bf00      	nop
 800a0ca:	e000      	b.n	800a0ce <create_name+0x326>
			if (si > di) break;						/* No name extension? */
 800a0cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0d4:	2be5      	cmp	r3, #229	@ 0xe5
 800a0d6:	d103      	bne.n	800a0e0 <create_name+0x338>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2205      	movs	r2, #5
 800a0dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	2b08      	cmp	r3, #8
 800a0e4:	d104      	bne.n	800a0f0 <create_name+0x348>
 800a0e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800a0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0f4:	f003 030c 	and.w	r3, r3, #12
 800a0f8:	2b0c      	cmp	r3, #12
 800a0fa:	d005      	beq.n	800a108 <create_name+0x360>
 800a0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	2b03      	cmp	r3, #3
 800a106:	d105      	bne.n	800a114 <create_name+0x36c>
 800a108:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a10c:	f043 0302 	orr.w	r3, r3, #2
 800a110:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a114:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a118:	f003 0302 	and.w	r3, r3, #2
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d117      	bne.n	800a150 <create_name+0x3a8>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 800a120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d005      	beq.n	800a138 <create_name+0x390>
 800a12c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a130:	f043 0310 	orr.w	r3, r3, #16
 800a134:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800a138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a13c:	f003 0304 	and.w	r3, r3, #4
 800a140:	2b00      	cmp	r3, #0
 800a142:	d005      	beq.n	800a150 <create_name+0x3a8>
 800a144:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a148:	f043 0308 	orr.w	r3, r3, #8
 800a14c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a156:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f

	return FR_OK;
 800a15a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3728      	adds	r7, #40	@ 0x28
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip heading separators */
 800a174:	e002      	b.n	800a17c <follow_path+0x18>
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	3301      	adds	r3, #1
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	2b2f      	cmp	r3, #47	@ 0x2f
 800a182:	d0f8      	beq.n	800a176 <follow_path+0x12>
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	2b5c      	cmp	r3, #92	@ 0x5c
 800a18a:	d0f4      	beq.n	800a176 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start at the root directory */
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	609a      	str	r2, [r3, #8]
	}

#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	61da      	str	r2, [r3, #28]
		}
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	2b1f      	cmp	r3, #31
 800a19e:	d80a      	bhi.n	800a1b6 <follow_path+0x52>
		dp->fn[NSFLAG] = NS_NONAME;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2280      	movs	r2, #128	@ 0x80
 800a1a4:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
		res = dir_sdi(dp, 0);
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7fe fba1 	bl	80088f2 <dir_sdi>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	75fb      	strb	r3, [r7, #23]
 800a1b4:	e04d      	b.n	800a252 <follow_path+0xee>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a1b6:	463b      	mov	r3, r7
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff fdf4 	bl	8009da8 <create_name>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a1c4:	7dfb      	ldrb	r3, [r7, #23]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d13e      	bne.n	800a248 <follow_path+0xe4>
			ns = dp->fn[NSFLAG];
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 800a1d0:	73fb      	strb	r3, [r7, #15]
				dp->fn[NSFLAG] |= NS_NONAME;	/* but dot names in exFAT volume are not directory entry */
				if (ns & NS_LAST) break;		/* Last segment? */
				continue;		/* Follow next segment */
			}
#endif
			res = dir_find(dp);				/* Find an object with the segment name */
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7ff fab3 	bl	800973e <dir_find>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) {				/* Failed to find the object */
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00a      	beq.n	800a1f8 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a1e2:	7dfb      	ldrb	r3, [r7, #23]
 800a1e4:	2b04      	cmp	r3, #4
 800a1e6:	d131      	bne.n	800a24c <follow_path+0xe8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there (may be root dir in FAT volume) */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ea:	f003 0304 	and.w	r3, r3, #4
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d12c      	bne.n	800a24c <follow_path+0xe8>
 800a1f2:	2305      	movs	r3, #5
 800a1f4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a1f6:	e029      	b.n	800a24c <follow_path+0xe8>
				}
				fs->xcwds2.tbl[fs->xcwds2.depth].d_scl = ld_32(fs->dirbuf + XDIR_FstClus);
				fs->xcwds2.tbl[fs->xcwds2.depth].d_size = ld_32(fs->dirbuf + XDIR_FileSize) | (fs->dirbuf[XDIR_GenFlags] & 2);
			}
#endif
			if (ns & NS_LAST) break;		/* If last segment matched, the function completed */
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
 800a1fa:	f003 0304 	and.w	r3, r3, #4
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d126      	bne.n	800a250 <follow_path+0xec>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	799b      	ldrb	r3, [r3, #6]
 800a206:	f003 0310 	and.w	r3, r3, #16
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d102      	bne.n	800a214 <follow_path+0xb0>
				res = FR_NO_PATH; break;	/* It is not a sub-directory and cannot follow the path */
 800a20e:	2305      	movs	r3, #5
 800a210:	75fb      	strb	r3, [r7, #23]
 800a212:	e01e      	b.n	800a252 <follow_path+0xee>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b04      	cmp	r3, #4
 800a21a:	d105      	bne.n	800a228 <follow_path+0xc4>
				init_alloc_info(&dp->obj, dp);	/* Open next directory */
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6879      	ldr	r1, [r7, #4]
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff f881 	bl	8009328 <init_alloc_info>
 800a226:	e7c6      	b.n	800a1b6 <follow_path+0x52>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a236:	4413      	add	r3, r2
 800a238:	4619      	mov	r1, r3
 800a23a:	6938      	ldr	r0, [r7, #16]
 800a23c:	f7fe fd04 	bl	8008c48 <ld_clust>
 800a240:	4602      	mov	r2, r0
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a246:	e7b6      	b.n	800a1b6 <follow_path+0x52>
			if (res != FR_OK) break;
 800a248:	bf00      	nop
 800a24a:	e002      	b.n	800a252 <follow_path+0xee>
				break;
 800a24c:	bf00      	nop
 800a24e:	e000      	b.n	800a252 <follow_path+0xee>
			if (ns & NS_LAST) break;		/* If last segment matched, the function completed */
 800a250:	bf00      	nop
			}
		}
	}

	return res;
 800a252:	7dfb      	ldrb	r3, [r7, #23]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	60fb      	str	r3, [r7, #12]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	617b      	str	r3, [r7, #20]
	if (!tp) return -1;		/* Invalid path name? */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d102      	bne.n	800a27a <get_ldnumber+0x1e>
 800a274:	f04f 33ff 	mov.w	r3, #4294967295
 800a278:	e02c      	b.n	800a2d4 <get_ldnumber+0x78>
	do {					/* Find a colon in the path */
		chr = *tt++;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	1c5a      	adds	r2, r3, #1
 800a27e:	617a      	str	r2, [r7, #20]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	72fb      	strb	r3, [r7, #11]
	} while (!IsTerminator(chr) && chr != ':');
 800a284:	7afb      	ldrb	r3, [r7, #11]
 800a286:	2b1f      	cmp	r3, #31
 800a288:	d902      	bls.n	800a290 <get_ldnumber+0x34>
 800a28a:	7afb      	ldrb	r3, [r7, #11]
 800a28c:	2b3a      	cmp	r3, #58	@ 0x3a
 800a28e:	d1f4      	bne.n	800a27a <get_ldnumber+0x1e>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
 800a290:	7afb      	ldrb	r3, [r7, #11]
 800a292:	2b3a      	cmp	r3, #58	@ 0x3a
 800a294:	d11d      	bne.n	800a2d2 <get_ldnumber+0x76>
		i = FF_VOLUMES;
 800a296:	2301      	movs	r3, #1
 800a298:	613b      	str	r3, [r7, #16]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	2b2f      	cmp	r3, #47	@ 0x2f
 800a2a0:	d90c      	bls.n	800a2bc <get_ldnumber+0x60>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b39      	cmp	r3, #57	@ 0x39
 800a2a8:	d808      	bhi.n	800a2bc <get_ldnumber+0x60>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	3302      	adds	r3, #2
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d103      	bne.n	800a2bc <get_ldnumber+0x60>
			i = (int)*tp - '0';	/* Get the logical drive number */
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	3b30      	subs	r3, #48	@ 0x30
 800a2ba:	613b      	str	r3, [r7, #16]
					if (IsLower(chr)) chr -= 0x20;
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dd02      	ble.n	800a2c8 <get_ldnumber+0x6c>
 800a2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c6:	e005      	b.n	800a2d4 <get_ldnumber+0x78>
		*path = tt;		/* Snip the drive prefix off */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	601a      	str	r2, [r3, #0]
		return i;		/* Return the found drive number */
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	e000      	b.n	800a2d4 <get_ldnumber+0x78>
#endif
	/* No drive prefix */
#if FF_FS_RPATH
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
 800a2d2:	2300      	movs	r3, #0
#endif
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <crc32>:

static DWORD crc32 (	/* Returns next CRC value */
	DWORD crc,			/* Current CRC value */
	BYTE d				/* A byte to be processed */
)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	70fb      	strb	r3, [r7, #3]
	BYTE b;


	for (b = 1; b; b <<= 1) {
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	73fb      	strb	r3, [r7, #15]
 800a2f0:	e018      	b.n	800a324 <crc32+0x44>
		crc ^= (d & b) ? 1 : 0;
 800a2f2:	78fa      	ldrb	r2, [r7, #3]
 800a2f4:	7bfb      	ldrb	r3, [r7, #15]
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <crc32+0x22>
 800a2fe:	2301      	movs	r3, #1
 800a300:	e000      	b.n	800a304 <crc32+0x24>
 800a302:	2300      	movs	r3, #0
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	4053      	eors	r3, r2
 800a308:	607b      	str	r3, [r7, #4]
		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 : crc >> 1;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	425a      	negs	r2, r3
 800a312:	4b09      	ldr	r3, [pc, #36]	@ (800a338 <crc32+0x58>)
 800a314:	4013      	ands	r3, r2
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	0852      	lsrs	r2, r2, #1
 800a31a:	4053      	eors	r3, r2
 800a31c:	607b      	str	r3, [r7, #4]
	for (b = 1; b; b <<= 1) {
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	73fb      	strb	r3, [r7, #15]
 800a324:	7bfb      	ldrb	r3, [r7, #15]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1e3      	bne.n	800a2f2 <crc32+0x12>
	}
	return crc;
 800a32a:	687b      	ldr	r3, [r7, #4]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	edb88320 	.word	0xedb88320

0800a33c <test_gpt_header>:
/* Check validity of GPT header */

static int test_gpt_header (	/* 0:Invalid, 1:Valid */
	const BYTE* gpth			/* Pointer to the GPT header */
)
{
 800a33c:	b590      	push	{r4, r7, lr}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
	UINT i;
	DWORD bcc, hlen;


	if (memcmp(gpth + GPTH_Sign, "EFI PART" "\0\0\1", 12)) return 0;	/* Check signature and version (1.0) */
 800a344:	220c      	movs	r2, #12
 800a346:	492c      	ldr	r1, [pc, #176]	@ (800a3f8 <test_gpt_header+0xbc>)
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f006 fd4a 	bl	8010de2 <memcmp>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <test_gpt_header+0x1c>
 800a354:	2300      	movs	r3, #0
 800a356:	e04b      	b.n	800a3f0 <test_gpt_header+0xb4>
	hlen = ld_32(gpth + GPTH_Size);							/* Check header size */
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	330c      	adds	r3, #12
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fd f86c 	bl	800743a <ld_32>
 800a362:	60f8      	str	r0, [r7, #12]
	if (hlen < 92 || hlen > FF_MIN_SS) return 0;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b5b      	cmp	r3, #91	@ 0x5b
 800a368:	d903      	bls.n	800a372 <test_gpt_header+0x36>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a370:	d901      	bls.n	800a376 <test_gpt_header+0x3a>
 800a372:	2300      	movs	r3, #0
 800a374:	e03c      	b.n	800a3f0 <test_gpt_header+0xb4>
	for (i = 0, bcc = 0xFFFFFFFF; i < hlen; i++) {			/* Check header BCC */
 800a376:	2300      	movs	r3, #0
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	f04f 33ff 	mov.w	r3, #4294967295
 800a37e:	613b      	str	r3, [r7, #16]
 800a380:	e011      	b.n	800a3a6 <test_gpt_header+0x6a>
		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : gpth[i]);
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	3b10      	subs	r3, #16
 800a386:	2b03      	cmp	r3, #3
 800a388:	d904      	bls.n	800a394 <test_gpt_header+0x58>
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	4413      	add	r3, r2
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	e000      	b.n	800a396 <test_gpt_header+0x5a>
 800a394:	2300      	movs	r3, #0
 800a396:	4619      	mov	r1, r3
 800a398:	6938      	ldr	r0, [r7, #16]
 800a39a:	f7ff ffa1 	bl	800a2e0 <crc32>
 800a39e:	6138      	str	r0, [r7, #16]
	for (i = 0, bcc = 0xFFFFFFFF; i < hlen; i++) {			/* Check header BCC */
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	617b      	str	r3, [r7, #20]
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d3e9      	bcc.n	800a382 <test_gpt_header+0x46>
	}
	if (~bcc != ld_32(gpth + GPTH_Bcc)) return 0;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	43dc      	mvns	r4, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	3310      	adds	r3, #16
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fd f83f 	bl	800743a <ld_32>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	429c      	cmp	r4, r3
 800a3c0:	d001      	beq.n	800a3c6 <test_gpt_header+0x8a>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	e014      	b.n	800a3f0 <test_gpt_header+0xb4>
	if (ld_32(gpth + GPTH_PteSize) != SZ_GPTE) return 0;	/* Table entry size (must be SZ_GPTE bytes) */
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3354      	adds	r3, #84	@ 0x54
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fd f835 	bl	800743a <ld_32>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b80      	cmp	r3, #128	@ 0x80
 800a3d4:	d001      	beq.n	800a3da <test_gpt_header+0x9e>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e00a      	b.n	800a3f0 <test_gpt_header+0xb4>
	if (ld_32(gpth + GPTH_PtNum) > 128) return 0;			/* Table size (must be 128 entries or less) */
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	3350      	adds	r3, #80	@ 0x50
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fd f82b 	bl	800743a <ld_32>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b80      	cmp	r3, #128	@ 0x80
 800a3e8:	d901      	bls.n	800a3ee <test_gpt_header+0xb2>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e000      	b.n	800a3f0 <test_gpt_header+0xb4>

	return 1;
 800a3ee:	2301      	movs	r3, #1
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	371c      	adds	r7, #28
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd90      	pop	{r4, r7, pc}
 800a3f8:	08011294 	.word	0x08011294

0800a3fc <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	e9c7 2300 	strd	r2, r3, [r7]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	711a      	strb	r2, [r3, #4]
 800a40e:	68f9      	ldr	r1, [r7, #12]
 800a410:	f04f 32ff 	mov.w	r2, #4294967295
 800a414:	f04f 33ff 	mov.w	r3, #4294967295
 800a418:	e9c1 2308 	strd	r2, r3, [r1, #32]
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800a41c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f7fd fa94 	bl	800794e <move_window>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <check_fs+0x34>
 800a42c:	2304      	movs	r3, #4
 800a42e:	e099      	b.n	800a564 <check_fs+0x168>
	sign = ld_16(fs->win + BS_55AA);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	3354      	adds	r3, #84	@ 0x54
 800a434:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fc ffe5 	bl	8007408 <ld_16>
 800a43e:	4603      	mov	r3, r0
 800a440:	82fb      	strh	r3, [r7, #22]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800a442:	8afb      	ldrh	r3, [r7, #22]
 800a444:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800a448:	4293      	cmp	r3, r2
 800a44a:	d10b      	bne.n	800a464 <check_fs+0x68>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	3354      	adds	r3, #84	@ 0x54
 800a450:	220b      	movs	r2, #11
 800a452:	4946      	ldr	r1, [pc, #280]	@ (800a56c <check_fs+0x170>)
 800a454:	4618      	mov	r0, r3
 800a456:	f006 fcc4 	bl	8010de2 <memcmp>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <check_fs+0x68>
 800a460:	2301      	movs	r3, #1
 800a462:	e07f      	b.n	800a564 <check_fs+0x168>
#endif
	b = fs->win[BS_JmpBoot];
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800a46a:	757b      	strb	r3, [r7, #21]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800a46c:	7d7b      	ldrb	r3, [r7, #21]
 800a46e:	2beb      	cmp	r3, #235	@ 0xeb
 800a470:	d005      	beq.n	800a47e <check_fs+0x82>
 800a472:	7d7b      	ldrb	r3, [r7, #21]
 800a474:	2be9      	cmp	r3, #233	@ 0xe9
 800a476:	d002      	beq.n	800a47e <check_fs+0x82>
 800a478:	7d7b      	ldrb	r3, [r7, #21]
 800a47a:	2be8      	cmp	r3, #232	@ 0xe8
 800a47c:	d16a      	bne.n	800a554 <check_fs+0x158>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800a47e:	8afb      	ldrh	r3, [r7, #22]
 800a480:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800a484:	4293      	cmp	r3, r2
 800a486:	d10c      	bne.n	800a4a2 <check_fs+0xa6>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3354      	adds	r3, #84	@ 0x54
 800a48c:	3352      	adds	r3, #82	@ 0x52
 800a48e:	2208      	movs	r2, #8
 800a490:	4937      	ldr	r1, [pc, #220]	@ (800a570 <check_fs+0x174>)
 800a492:	4618      	mov	r0, r3
 800a494:	f006 fca5 	bl	8010de2 <memcmp>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <check_fs+0xa6>
			return 0;	/* It is an FAT32 VBR */
 800a49e:	2300      	movs	r3, #0
 800a4a0:	e060      	b.n	800a564 <check_fs+0x168>
		}
		/* FAT volumes created in the early MS-DOS era lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_16(fs->win + BPB_BytsPerSec);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3354      	adds	r3, #84	@ 0x54
 800a4a6:	330b      	adds	r3, #11
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fc ffad 	bl	8007408 <ld_16>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	827b      	strh	r3, [r7, #18]
		b = fs->win[BPB_SecPerClus];
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a4b8:	757b      	strb	r3, [r7, #21]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800a4ba:	8a7a      	ldrh	r2, [r7, #18]
 800a4bc:	8a7b      	ldrh	r3, [r7, #18]
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d146      	bne.n	800a554 <check_fs+0x158>
 800a4c6:	8a7b      	ldrh	r3, [r7, #18]
 800a4c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4cc:	d342      	bcc.n	800a554 <check_fs+0x158>
 800a4ce:	8a7b      	ldrh	r3, [r7, #18]
 800a4d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4d4:	d83e      	bhi.n	800a554 <check_fs+0x158>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800a4d6:	7d7b      	ldrb	r3, [r7, #21]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d03b      	beq.n	800a554 <check_fs+0x158>
 800a4dc:	7d7a      	ldrb	r2, [r7, #21]
 800a4de:	7d7b      	ldrb	r3, [r7, #21]
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d135      	bne.n	800a554 <check_fs+0x158>
			&& ld_16(fs->win + BPB_RsvdSecCnt) != 0		/* Properness of number of reserved sectors (MNBZ) */
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3354      	adds	r3, #84	@ 0x54
 800a4ec:	330e      	adds	r3, #14
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fc ff8a 	bl	8007408 <ld_16>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d02c      	beq.n	800a554 <check_fs+0x158>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800a500:	3b01      	subs	r3, #1
 800a502:	2b01      	cmp	r3, #1
 800a504:	d826      	bhi.n	800a554 <check_fs+0x158>
			&& ld_16(fs->win + BPB_RootEntCnt) != 0		/* Properness of root dir size (MNBZ) */
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3354      	adds	r3, #84	@ 0x54
 800a50a:	3311      	adds	r3, #17
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fc ff7b 	bl	8007408 <ld_16>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d01d      	beq.n	800a554 <check_fs+0x158>
			&& (ld_16(fs->win + BPB_TotSec16) >= 128 || ld_32(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3354      	adds	r3, #84	@ 0x54
 800a51c:	3313      	adds	r3, #19
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fc ff72 	bl	8007408 <ld_16>
 800a524:	4603      	mov	r3, r0
 800a526:	2b7f      	cmp	r3, #127	@ 0x7f
 800a528:	d809      	bhi.n	800a53e <check_fs+0x142>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	3354      	adds	r3, #84	@ 0x54
 800a52e:	3320      	adds	r3, #32
 800a530:	4618      	mov	r0, r3
 800a532:	f7fc ff82 	bl	800743a <ld_32>
 800a536:	4603      	mov	r3, r0
 800a538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a53c:	d30a      	bcc.n	800a554 <check_fs+0x158>
			&& ld_16(fs->win + BPB_FATSz16) != 0) {		/* Properness of FAT size (MNBZ) */
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3354      	adds	r3, #84	@ 0x54
 800a542:	3316      	adds	r3, #22
 800a544:	4618      	mov	r0, r3
 800a546:	f7fc ff5f 	bl	8007408 <ld_16>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d001      	beq.n	800a554 <check_fs+0x158>
				return 0;	/* It can be presumed an FAT VBR */
 800a550:	2300      	movs	r3, #0
 800a552:	e007      	b.n	800a564 <check_fs+0x168>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
 800a554:	8afb      	ldrh	r3, [r7, #22]
 800a556:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d101      	bne.n	800a562 <check_fs+0x166>
 800a55e:	2302      	movs	r3, #2
 800a560:	e000      	b.n	800a564 <check_fs+0x168>
 800a562:	2303      	movs	r3, #3
}
 800a564:	4618      	mov	r0, r3
 800a566:	3718      	adds	r7, #24
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	080112a0 	.word	0x080112a0
 800a570:	080112ac 	.word	0x080112ac

0800a574 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800a574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a578:	b08e      	sub	sp, #56	@ 0x38
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800a580:	f04f 0200 	mov.w	r2, #0
 800a584:	f04f 0300 	mov.w	r3, #0
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff ff37 	bl	800a3fc <check_fs>
 800a58e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800a590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a592:	2b02      	cmp	r3, #2
 800a594:	d007      	beq.n	800a5a6 <find_volume+0x32>
 800a596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d802      	bhi.n	800a5a2 <find_volume+0x2e>
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <find_volume+0x32>
 800a5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a4:	e0cc      	b.n	800a740 <find_volume+0x1cc>

	/* Sector 0 is not an FAT VBR or forced partition number wants a partitioned drive */

#if FF_LBA64
	if (fs->win[MBR_Table + PTE_System] == 0xEE) {	/* GPT protective MBR? */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 800a5ac:	2bee      	cmp	r3, #238	@ 0xee
 800a5ae:	d17d      	bne.n	800a6ac <find_volume+0x138>
		DWORD n_ent, v_ent, ofs;
		QWORD pt_lba;

		if (move_window(fs, 1) != FR_OK) return 4;	/* Load GPT header sector (next to MBR) */
 800a5b0:	f04f 0201 	mov.w	r2, #1
 800a5b4:	f04f 0300 	mov.w	r3, #0
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7fd f9c8 	bl	800794e <move_window>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d001      	beq.n	800a5c8 <find_volume+0x54>
 800a5c4:	2304      	movs	r3, #4
 800a5c6:	e0bb      	b.n	800a740 <find_volume+0x1cc>
		if (!test_gpt_header(fs->win)) return 3;	/* Check if GPT header is valid */
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3354      	adds	r3, #84	@ 0x54
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7ff feb5 	bl	800a33c <test_gpt_header>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <find_volume+0x68>
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e0b1      	b.n	800a740 <find_volume+0x1cc>
		n_ent = ld_32(fs->win + GPTH_PtNum);		/* Number of entries */
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3354      	adds	r3, #84	@ 0x54
 800a5e0:	3350      	adds	r3, #80	@ 0x50
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fc ff29 	bl	800743a <ld_32>
 800a5e8:	62b8      	str	r0, [r7, #40]	@ 0x28
		pt_lba = ld_64(fs->win + GPTH_PtOfs);		/* Table location */
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	3354      	adds	r3, #84	@ 0x54
 800a5ee:	3348      	adds	r3, #72	@ 0x48
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fc ff45 	bl	8007480 <ld_64>
 800a5f6:	e9c7 0108 	strd	r0, r1, [r7, #32]
		for (v_ent = i = 0; i < n_ent; i++) {		/* Find FAT partition */
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5fe:	2300      	movs	r3, #0
 800a600:	633b      	str	r3, [r7, #48]	@ 0x30
 800a602:	e04d      	b.n	800a6a0 <find_volume+0x12c>
			if (move_window(fs, pt_lba + i * SZ_GPTE / SS(fs)) != FR_OK) return 4;	/* PT sector */
 800a604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a606:	01db      	lsls	r3, r3, #7
 800a608:	0a5b      	lsrs	r3, r3, #9
 800a60a:	2200      	movs	r2, #0
 800a60c:	461c      	mov	r4, r3
 800a60e:	4615      	mov	r5, r2
 800a610:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a614:	eb14 0802 	adds.w	r8, r4, r2
 800a618:	eb45 0903 	adc.w	r9, r5, r3
 800a61c:	4642      	mov	r2, r8
 800a61e:	464b      	mov	r3, r9
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7fd f994 	bl	800794e <move_window>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <find_volume+0xbc>
 800a62c:	2304      	movs	r3, #4
 800a62e:	e087      	b.n	800a740 <find_volume+0x1cc>
			ofs = i * SZ_GPTE % SS(fs);												/* Offset in the sector */
 800a630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a632:	01db      	lsls	r3, r3, #7
 800a634:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800a638:	61fb      	str	r3, [r7, #28]
			if (!memcmp(fs->win + ofs + GPTE_PtGuid, GUID_MS_Basic, 16)) {	/* MS basic data partition? */
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	4413      	add	r3, r2
 800a644:	2210      	movs	r2, #16
 800a646:	4941      	ldr	r1, [pc, #260]	@ (800a74c <find_volume+0x1d8>)
 800a648:	4618      	mov	r0, r3
 800a64a:	f006 fbca 	bl	8010de2 <memcmp>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d122      	bne.n	800a69a <find_volume+0x126>
				v_ent++;	/* Order of MS BDP */
 800a654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a656:	3301      	adds	r3, #1
 800a658:	633b      	str	r3, [r7, #48]	@ 0x30
				fmt = check_fs(fs, ld_64(fs->win + ofs + GPTE_FstLba));	/* Load VBR and check status */
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	3320      	adds	r3, #32
 800a664:	4413      	add	r3, r2
 800a666:	4618      	mov	r0, r3
 800a668:	f7fc ff0a 	bl	8007480 <ld_64>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff fec3 	bl	800a3fc <check_fs>
 800a676:	62f8      	str	r0, [r7, #44]	@ 0x2c
				if (part == 0 && fmt <= 1) return fmt;			/* Auto search (valid FAT volume found first) */
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d104      	bne.n	800a688 <find_volume+0x114>
 800a67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a680:	2b01      	cmp	r3, #1
 800a682:	d801      	bhi.n	800a688 <find_volume+0x114>
 800a684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a686:	e05b      	b.n	800a740 <find_volume+0x1cc>
				if (part != 0 && v_ent == part) return fmt;		/* Forced partition order (regardless of it is valid or not) */
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d005      	beq.n	800a69a <find_volume+0x126>
 800a68e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	429a      	cmp	r2, r3
 800a694:	d101      	bne.n	800a69a <find_volume+0x126>
 800a696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a698:	e052      	b.n	800a740 <find_volume+0x1cc>
		for (v_ent = i = 0; i < n_ent; i++) {		/* Find FAT partition */
 800a69a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a69c:	3301      	adds	r3, #1
 800a69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d3ad      	bcc.n	800a604 <find_volume+0x90>
			}
		}
		return 3;	/* Not found */
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e049      	b.n	800a740 <find_volume+0x1cc>
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has four primary partitions max (FatFs does not support logical partition) */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6b0:	e014      	b.n	800a6dc <find_volume+0x168>
		mbr_pt[i] = ld_32(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800a6b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ba:	011b      	lsls	r3, r3, #4
 800a6bc:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800a6c0:	4413      	add	r3, r2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fc feb9 	bl	800743a <ld_32>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	3338      	adds	r3, #56	@ 0x38
 800a6d0:	443b      	add	r3, r7
 800a6d2:	f843 2c2c 	str.w	r2, [r3, #-44]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d8:	3301      	adds	r3, #1
 800a6da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6de:	2b03      	cmp	r3, #3
 800a6e0:	d9e7      	bls.n	800a6b2 <find_volume+0x13e>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d002      	beq.n	800a6ee <find_volume+0x17a>
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	e000      	b.n	800a6f0 <find_volume+0x17c>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	637b      	str	r3, [r7, #52]	@ 0x34
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800a6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	3338      	adds	r3, #56	@ 0x38
 800a6f8:	443b      	add	r3, r7
 800a6fa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00f      	beq.n	800a722 <find_volume+0x1ae>
 800a702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	3338      	adds	r3, #56	@ 0x38
 800a708:	443b      	add	r3, r7
 800a70a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800a70e:	2200      	movs	r2, #0
 800a710:	469a      	mov	sl, r3
 800a712:	4693      	mov	fp, r2
 800a714:	4652      	mov	r2, sl
 800a716:	465b      	mov	r3, fp
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f7ff fe6f 	bl	800a3fc <check_fs>
 800a71e:	4603      	mov	r3, r0
 800a720:	e000      	b.n	800a724 <find_volume+0x1b0>
 800a722:	2303      	movs	r3, #3
 800a724:	62fb      	str	r3, [r7, #44]	@ 0x2c
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d108      	bne.n	800a73e <find_volume+0x1ca>
 800a72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d905      	bls.n	800a73e <find_volume+0x1ca>
 800a732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a734:	3301      	adds	r3, #1
 800a736:	637b      	str	r3, [r7, #52]	@ 0x34
 800a738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d9d9      	bls.n	800a6f2 <find_volume+0x17e>
	return fmt;
 800a73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a740:	4618      	mov	r0, r3
 800a742:	3738      	adds	r7, #56	@ 0x38
 800a744:	46bd      	mov	sp, r7
 800a746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a74a:	bf00      	nop
 800a74c:	080112f0 	.word	0x080112f0

0800a750 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800a750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a754:	b0be      	sub	sp, #248	@ 0xf8
 800a756:	af00      	add	r7, sp, #0
 800a758:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800a75c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800a760:	4613      	mov	r3, r2
 800a762:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	LBA_t bsect;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800a766:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800a76a:	2300      	movs	r3, #0
 800a76c:	6013      	str	r3, [r2, #0]
	vol = get_ldnumber(path);
 800a76e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800a772:	f7ff fd73 	bl	800a25c <get_ldnumber>
 800a776:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
	if (vol < 0) return FR_INVALID_DRIVE;
 800a77a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a77e:	2b00      	cmp	r3, #0
 800a780:	da02      	bge.n	800a788 <mount_volume+0x38>
 800a782:	230b      	movs	r3, #11
 800a784:	f000 bc62 	b.w	800b04c <mount_volume+0x8fc>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800a788:	4ad3      	ldr	r2, [pc, #844]	@ (800aad8 <mount_volume+0x388>)
 800a78a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a792:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800a796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d102      	bne.n	800a7a4 <mount_volume+0x54>
 800a79e:	230c      	movs	r3, #12
 800a7a0:	f000 bc54 	b.w	800b04c <mount_volume+0x8fc>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800a7a4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800a7a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7ac:	6013      	str	r3, [r2, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a7ae:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800a7b2:	f023 0301 	bic.w	r3, r3, #1
 800a7b6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800a7ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d01e      	beq.n	800a802 <mount_volume+0xb2>
		stat = disk_status(fs->pdrv);
 800a7c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7c8:	785b      	ldrb	r3, [r3, #1]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7f6 fc8c 	bl	80010e8 <disk_status>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a7d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10f      	bne.n	800a802 <mount_volume+0xb2>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a7e2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d008      	beq.n	800a7fc <mount_volume+0xac>
 800a7ea:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800a7ee:	f003 0304 	and.w	r3, r3, #4
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d002      	beq.n	800a7fc <mount_volume+0xac>
				return FR_WRITE_PROTECTED;
 800a7f6:	230a      	movs	r3, #10
 800a7f8:	f000 bc28 	b.w	800b04c <mount_volume+0x8fc>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f000 bc25 	b.w	800b04c <mount_volume+0x8fc>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800a802:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800a806:	2300      	movs	r3, #0
 800a808:	7013      	strb	r3, [r2, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800a80a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a80e:	785b      	ldrb	r3, [r3, #1]
 800a810:	4618      	mov	r0, r3
 800a812:	f7f6 fc7f 	bl	8001114 <disk_initialize>
 800a816:	4603      	mov	r3, r0
 800a818:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a81c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800a820:	f003 0301 	and.w	r3, r3, #1
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <mount_volume+0xde>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a828:	2303      	movs	r3, #3
 800a82a:	f000 bc0f 	b.w	800b04c <mount_volume+0x8fc>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a82e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800a832:	2b00      	cmp	r3, #0
 800a834:	d008      	beq.n	800a848 <mount_volume+0xf8>
 800a836:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800a83a:	f003 0304 	and.w	r3, r3, #4
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d002      	beq.n	800a848 <mount_volume+0xf8>
		return FR_WRITE_PROTECTED;
 800a842:	230a      	movs	r3, #10
 800a844:	f000 bc02 	b.w	800b04c <mount_volume+0x8fc>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800a848:	2100      	movs	r1, #0
 800a84a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800a84e:	f7ff fe91 	bl	800a574 <find_volume>
 800a852:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800a856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d101      	bne.n	800a862 <mount_volume+0x112>
 800a85e:	2301      	movs	r3, #1
 800a860:	e3f4      	b.n	800b04c <mount_volume+0x8fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a866:	2b01      	cmp	r3, #1
 800a868:	d901      	bls.n	800a86e <mount_volume+0x11e>
 800a86a:	230d      	movs	r3, #13
 800a86c:	e3ee      	b.n	800b04c <mount_volume+0x8fc>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800a86e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a872:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a876:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 800a87a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a87e:	2b01      	cmp	r3, #1
 800a880:	f040 81d0 	bne.w	800ac24 <mount_volume+0x4d4>
		QWORD maxlba;
		DWORD so, cv, bcl, ncl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800a884:	230b      	movs	r3, #11
 800a886:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a88a:	e004      	b.n	800a896 <mount_volume+0x146>
 800a88c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a890:	3301      	adds	r3, #1
 800a892:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a896:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a89a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a89c:	d808      	bhi.n	800a8b0 <mount_volume+0x160>
 800a89e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800a8a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a8a6:	4413      	add	r3, r2
 800a8a8:	3354      	adds	r3, #84	@ 0x54
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d0ed      	beq.n	800a88c <mount_volume+0x13c>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800a8b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a8b4:	2b3f      	cmp	r3, #63	@ 0x3f
 800a8b6:	d801      	bhi.n	800a8bc <mount_volume+0x16c>
 800a8b8:	230d      	movs	r3, #13
 800a8ba:	e3c7      	b.n	800b04c <mount_volume+0x8fc>

		if (ld_16(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800a8bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a8c0:	3354      	adds	r3, #84	@ 0x54
 800a8c2:	3368      	adds	r3, #104	@ 0x68
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fc fd9f 	bl	8007408 <ld_16>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8d0:	d001      	beq.n	800a8d6 <mount_volume+0x186>
 800a8d2:	230d      	movs	r3, #13
 800a8d4:	e3ba      	b.n	800b04c <mount_volume+0x8fc>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800a8d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a8da:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800a8de:	2b09      	cmp	r3, #9
 800a8e0:	d001      	beq.n	800a8e6 <mount_volume+0x196>
			return FR_NO_FILESYSTEM;
 800a8e2:	230d      	movs	r3, #13
 800a8e4:	e3b2      	b.n	800b04c <mount_volume+0x8fc>
		}

		maxlba = ld_64(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 800a8e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a8ea:	3354      	adds	r3, #84	@ 0x54
 800a8ec:	3348      	adds	r3, #72	@ 0x48
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fc fdc6 	bl	8007480 <ld_64>
 800a8f4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800a8f8:	eb12 0800 	adds.w	r8, r2, r0
 800a8fc:	eb43 0901 	adc.w	r9, r3, r1
 800a900:	e9c7 892c 	strd	r8, r9, [r7, #176]	@ 0xb0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */

		fs->fsize = ld_32(fs->win + BPB_FatSzEx);		/* Number of sectors per FAT */
 800a904:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a908:	3354      	adds	r3, #84	@ 0x54
 800a90a:	3354      	adds	r3, #84	@ 0x54
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fc fd94 	bl	800743a <ld_32>
 800a912:	4602      	mov	r2, r0
 800a914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a918:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800a91a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a91e:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 800a922:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800a926:	70d3      	strb	r3, [r2, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800a928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a92c:	78db      	ldrb	r3, [r3, #3]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d001      	beq.n	800a936 <mount_volume+0x1e6>
 800a932:	230d      	movs	r3, #13
 800a934:	e38a      	b.n	800b04c <mount_volume+0x8fc>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800a936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a93a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800a93e:	461a      	mov	r2, r3
 800a940:	2301      	movs	r3, #1
 800a942:	4093      	lsls	r3, r2
 800a944:	b29b      	uxth	r3, r3
 800a946:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800a94a:	8153      	strh	r3, [r2, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 800a94c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a950:	895b      	ldrh	r3, [r3, #10]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <mount_volume+0x20a>
 800a956:	230d      	movs	r3, #13
 800a958:	e378      	b.n	800b04c <mount_volume+0x8fc>

		ncl = ld_32(fs->win + BPB_NumClusEx);			/* Number of clusters */
 800a95a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a95e:	3354      	adds	r3, #84	@ 0x54
 800a960:	335c      	adds	r3, #92	@ 0x5c
 800a962:	4618      	mov	r0, r3
 800a964:	f7fc fd69 	bl	800743a <ld_32>
 800a968:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
		if (ncl > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800a96c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a970:	4b5a      	ldr	r3, [pc, #360]	@ (800aadc <mount_volume+0x38c>)
 800a972:	429a      	cmp	r2, r3
 800a974:	d901      	bls.n	800a97a <mount_volume+0x22a>
 800a976:	230d      	movs	r3, #13
 800a978:	e368      	b.n	800b04c <mount_volume+0x8fc>
		fs->n_fatent = ncl + 2;
 800a97a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a97e:	1c9a      	adds	r2, r3, #2
 800a980:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a984:	619a      	str	r2, [r3, #24]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800a986:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800a98a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800a98e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		fs->database = bsect + ld_32(fs->win + BPB_DataOfsEx);
 800a992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a996:	3354      	adds	r3, #84	@ 0x54
 800a998:	3358      	adds	r3, #88	@ 0x58
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7fc fd4d 	bl	800743a <ld_32>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	469a      	mov	sl, r3
 800a9a6:	4693      	mov	fp, r2
 800a9a8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800a9ac:	eb1a 0102 	adds.w	r1, sl, r2
 800a9b0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800a9b4:	eb4b 0303 	adc.w	r3, fp, r3
 800a9b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a9bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a9c0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a9c4:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
		fs->fatbase = bsect + ld_32(fs->win + BPB_FatOfsEx);
 800a9c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a9cc:	3354      	adds	r3, #84	@ 0x54
 800a9ce:	3350      	adds	r3, #80	@ 0x50
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fc fd32 	bl	800743a <ld_32>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a9de:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a9e2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800a9e6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a9ea:	4641      	mov	r1, r8
 800a9ec:	1889      	adds	r1, r1, r2
 800a9ee:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	eb43 0101 	adc.w	r1, r3, r1
 800a9f8:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 800a9fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa00:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800aa04:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
		if (maxlba < (QWORD)fs->database + ncl * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800aa08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa0c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800aa10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa14:	895b      	ldrh	r3, [r3, #10]
 800aa16:	461a      	mov	r2, r3
 800aa18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa1c:	fb02 f303 	mul.w	r3, r2, r3
 800aa20:	2200      	movs	r2, #0
 800aa22:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aa24:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800aa26:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800aa2a:	4643      	mov	r3, r8
 800aa2c:	18c4      	adds	r4, r0, r3
 800aa2e:	464b      	mov	r3, r9
 800aa30:	eb41 0303 	adc.w	r3, r1, r3
 800aa34:	461d      	mov	r5, r3
 800aa36:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800aa3a:	42a2      	cmp	r2, r4
 800aa3c:	41ab      	sbcs	r3, r5
 800aa3e:	d201      	bcs.n	800aa44 <mount_volume+0x2f4>
 800aa40:	230d      	movs	r3, #13
 800aa42:	e303      	b.n	800b04c <mount_volume+0x8fc>
		fs->dirbase = ld_32(fs->win + BPB_RootClusEx);
 800aa44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa48:	3354      	adds	r3, #84	@ 0x54
 800aa4a:	3360      	adds	r3, #96	@ 0x60
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fc fcf4 	bl	800743a <ld_32>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2200      	movs	r2, #0
 800aa56:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa58:	677a      	str	r2, [r7, #116]	@ 0x74
 800aa5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa5e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800aa62:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 800aa66:	2300      	movs	r3, #0
 800aa68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aa6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800aa70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 800aa74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d136      	bne.n	800aaea <mount_volume+0x39a>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 800aa7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa80:	895b      	ldrh	r3, [r3, #10]
 800aa82:	461a      	mov	r2, r3
 800aa84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d301      	bcc.n	800aa90 <mount_volume+0x340>
 800aa8c:	230d      	movs	r3, #13
 800aa8e:	e2dd      	b.n	800b04c <mount_volume+0x8fc>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800aa90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa94:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800aa98:	4613      	mov	r3, r2
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800aaa0:	f7fd f888 	bl	8007bb4 <clst2sect>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 800aaac:	2000      	movs	r0, #0
 800aaae:	66b9      	str	r1, [r7, #104]	@ 0x68
 800aab0:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800aab2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800aab6:	4621      	mov	r1, r4
 800aab8:	1851      	adds	r1, r2, r1
 800aaba:	6639      	str	r1, [r7, #96]	@ 0x60
 800aabc:	4629      	mov	r1, r5
 800aabe:	414b      	adcs	r3, r1
 800aac0:	667b      	str	r3, [r7, #100]	@ 0x64
 800aac2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800aac6:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800aaca:	f7fc ff40 	bl	800794e <move_window>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d005      	beq.n	800aae0 <mount_volume+0x390>
 800aad4:	2301      	movs	r3, #1
 800aad6:	e2b9      	b.n	800b04c <mount_volume+0x8fc>
 800aad8:	240016bc 	.word	0x240016bc
 800aadc:	7ffffffd 	.word	0x7ffffffd
				so++;
 800aae0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800aae4:	3301      	adds	r3, #1
 800aae6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			}
			if (fs->win[i] == ET_BITMAP) break;		/* Is it a bitmap entry? */
 800aaea:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800aaee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800aaf2:	4413      	add	r3, r2
 800aaf4:	3354      	adds	r3, #84	@ 0x54
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b81      	cmp	r3, #129	@ 0x81
 800aafa:	d007      	beq.n	800ab0c <mount_volume+0x3bc>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800aafc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ab00:	3320      	adds	r3, #32
 800ab02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
			if (i == 0) {
 800ab0a:	e7b3      	b.n	800aa74 <mount_volume+0x324>
			if (fs->win[i] == ET_BITMAP) break;		/* Is it a bitmap entry? */
 800ab0c:	bf00      	nop
		}
		bcl = ld_32(fs->win + i + 20);				/* Bitmap cluster */
 800ab0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab12:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800ab16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ab1a:	3314      	adds	r3, #20
 800ab1c:	4413      	add	r3, r2
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fc fc8b 	bl	800743a <ld_32>
 800ab24:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 800ab28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d906      	bls.n	800ab3e <mount_volume+0x3ee>
 800ab30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d301      	bcc.n	800ab42 <mount_volume+0x3f2>
 800ab3e:	230d      	movs	r3, #13
 800ab40:	e284      	b.n	800b04c <mount_volume+0x8fc>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800ab42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab46:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800ab4a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800ab4e:	8949      	ldrh	r1, [r1, #10]
 800ab50:	4608      	mov	r0, r1
 800ab52:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 800ab56:	3902      	subs	r1, #2
 800ab58:	fb00 f101 	mul.w	r1, r0, r1
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ab60:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800ab62:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800ab66:	4621      	mov	r1, r4
 800ab68:	1851      	adds	r1, r2, r1
 800ab6a:	6539      	str	r1, [r7, #80]	@ 0x50
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	eb43 0101 	adc.w	r1, r3, r1
 800ab72:	6579      	str	r1, [r7, #84]	@ 0x54
 800ab74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab78:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ab7c:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800ab80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab84:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800ab88:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 800ab8c:	09c9      	lsrs	r1, r1, #7
 800ab8e:	2000      	movs	r0, #0
 800ab90:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ab92:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800ab94:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800ab98:	4621      	mov	r1, r4
 800ab9a:	1851      	adds	r1, r2, r1
 800ab9c:	6439      	str	r1, [r7, #64]	@ 0x40
 800ab9e:	4629      	mov	r1, r5
 800aba0:	414b      	adcs	r3, r1
 800aba2:	647b      	str	r3, [r7, #68]	@ 0x44
 800aba4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aba8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800abac:	f7fc fecf 	bl	800794e <move_window>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <mount_volume+0x46a>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e248      	b.n	800b04c <mount_volume+0x8fc>
			cv = ld_32(fs->win + bcl % (SS(fs) / 4) * 4);
 800abba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800abbe:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 800abc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800abc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fc fc33 	bl	800743a <ld_32>
 800abd4:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800abd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800abdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe0:	d00c      	beq.n	800abfc <mount_volume+0x4ac>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 800abe2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800abe6:	3301      	adds	r3, #1
 800abe8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800abec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800abf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d0c3      	beq.n	800ab80 <mount_volume+0x430>
 800abf8:	230d      	movs	r3, #13
 800abfa:	e227      	b.n	800b04c <mount_volume+0x8fc>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800abfc:	bf00      	nop
		}
#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 800abfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac02:	f04f 32ff 	mov.w	r2, #4294967295
 800ac06:	615a      	str	r2, [r3, #20]
 800ac08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac0c:	695a      	ldr	r2, [r3, #20]
 800ac0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac12:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0;	/* Enable to sync PercInUse value in VBR */
 800ac14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac18:	2200      	movs	r2, #0
 800ac1a:	715a      	strb	r2, [r3, #5]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800ac1c:	2304      	movs	r3, #4
 800ac1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ac22:	e1f9      	b.n	800b018 <mount_volume+0x8c8>
#endif	/* FF_FS_EXFAT */
	{
		DWORD tsect, sysect, fasize, nclst, szbfat;
		WORD nrsv;

		if (ld_16(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ac24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac28:	3354      	adds	r3, #84	@ 0x54
 800ac2a:	330b      	adds	r3, #11
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fc fbeb 	bl	8007408 <ld_16>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac38:	d001      	beq.n	800ac3e <mount_volume+0x4ee>
 800ac3a:	230d      	movs	r3, #13
 800ac3c:	e206      	b.n	800b04c <mount_volume+0x8fc>

		fasize = ld_16(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ac3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac42:	3354      	adds	r3, #84	@ 0x54
 800ac44:	3316      	adds	r3, #22
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fc fbde 	bl	8007408 <ld_16>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		if (fasize == 0) fasize = ld_32(fs->win + BPB_FATSz32);
 800ac52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d108      	bne.n	800ac6c <mount_volume+0x51c>
 800ac5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac5e:	3354      	adds	r3, #84	@ 0x54
 800ac60:	3324      	adds	r3, #36	@ 0x24
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fc fbe9 	bl	800743a <ld_32>
 800ac68:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
		fs->fsize = fasize;
 800ac6c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ac70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac74:	61d3      	str	r3, [r2, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ac76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac7a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800ac7e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ac82:	70d3      	strb	r3, [r2, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ac84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac88:	78db      	ldrb	r3, [r3, #3]
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d006      	beq.n	800ac9c <mount_volume+0x54c>
 800ac8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac92:	78db      	ldrb	r3, [r3, #3]
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d001      	beq.n	800ac9c <mount_volume+0x54c>
 800ac98:	230d      	movs	r3, #13
 800ac9a:	e1d7      	b.n	800b04c <mount_volume+0x8fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ac9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aca0:	78db      	ldrb	r3, [r3, #3]
 800aca2:	461a      	mov	r2, r3
 800aca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aca8:	fb02 f303 	mul.w	r3, r2, r3
 800acac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800acb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800acb4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800acb8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800acbc:	8153      	strh	r3, [r2, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800acbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800acc2:	895b      	ldrh	r3, [r3, #10]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00a      	beq.n	800acde <mount_volume+0x58e>
 800acc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800accc:	895b      	ldrh	r3, [r3, #10]
 800acce:	461a      	mov	r2, r3
 800acd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800acd4:	895b      	ldrh	r3, [r3, #10]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	4013      	ands	r3, r2
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <mount_volume+0x592>
 800acde:	230d      	movs	r3, #13
 800ace0:	e1b4      	b.n	800b04c <mount_volume+0x8fc>

		fs->n_rootdir = ld_16(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ace2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ace6:	3354      	adds	r3, #84	@ 0x54
 800ace8:	3311      	adds	r3, #17
 800acea:	4618      	mov	r0, r3
 800acec:	f7fc fb8c 	bl	8007408 <ld_16>
 800acf0:	4603      	mov	r3, r0
 800acf2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800acf6:	8113      	strh	r3, [r2, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800acf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800acfc:	891b      	ldrh	r3, [r3, #8]
 800acfe:	f003 030f 	and.w	r3, r3, #15
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <mount_volume+0x5bc>
 800ad08:	230d      	movs	r3, #13
 800ad0a:	e19f      	b.n	800b04c <mount_volume+0x8fc>

		tsect = ld_16(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 800ad0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad10:	3354      	adds	r3, #84	@ 0x54
 800ad12:	3313      	adds	r3, #19
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fc fb77 	bl	8007408 <ld_16>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		if (tsect == 0) tsect = ld_32(fs->win + BPB_TotSec32);
 800ad20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d108      	bne.n	800ad3a <mount_volume+0x5ea>
 800ad28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad2c:	3354      	adds	r3, #84	@ 0x54
 800ad2e:	3320      	adds	r3, #32
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fc fb82 	bl	800743a <ld_32>
 800ad36:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

		nrsv = ld_16(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800ad3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad3e:	3354      	adds	r3, #84	@ 0x54
 800ad40:	330e      	adds	r3, #14
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fc fb60 	bl	8007408 <ld_16>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ad4e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <mount_volume+0x60a>
 800ad56:	230d      	movs	r3, #13
 800ad58:	e178      	b.n	800b04c <mount_volume+0x8fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ad5a:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	@ 0xc6
 800ad5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad62:	441a      	add	r2, r3
 800ad64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad68:	891b      	ldrh	r3, [r3, #8]
 800ad6a:	091b      	lsrs	r3, r3, #4
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	4413      	add	r3, r2
 800ad70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ad74:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d201      	bcs.n	800ad84 <mount_volume+0x634>
 800ad80:	230d      	movs	r3, #13
 800ad82:	e163      	b.n	800b04c <mount_volume+0x8fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ad84:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ad8c:	1ad2      	subs	r2, r2, r3
 800ad8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad92:	895b      	ldrh	r3, [r3, #10]
 800ad94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ad9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <mount_volume+0x658>
 800ada4:	230d      	movs	r3, #13
 800ada6:	e151      	b.n	800b04c <mount_volume+0x8fc>
		fmt = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800adae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800adb2:	4ba9      	ldr	r3, [pc, #676]	@ (800b058 <mount_volume+0x908>)
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d802      	bhi.n	800adbe <mount_volume+0x66e>
 800adb8:	2303      	movs	r3, #3
 800adba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800adbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800adc2:	f64f 73f5 	movw	r3, #65525	@ 0xfff5
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d802      	bhi.n	800add0 <mount_volume+0x680>
 800adca:	2302      	movs	r3, #2
 800adcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800add0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800add4:	f640 73f5 	movw	r3, #4085	@ 0xff5
 800add8:	429a      	cmp	r2, r3
 800adda:	d802      	bhi.n	800ade2 <mount_volume+0x692>
 800addc:	2301      	movs	r3, #1
 800adde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800ade2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <mount_volume+0x69e>
 800adea:	230d      	movs	r3, #13
 800adec:	e12e      	b.n	800b04c <mount_volume+0x8fc>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800adee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800adf2:	1c9a      	adds	r2, r3, #2
 800adf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800adf8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800adfa:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800adfe:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800ae02:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ae06:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ae10:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800ae14:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800ae18:	4621      	mov	r1, r4
 800ae1a:	1889      	adds	r1, r1, r2
 800ae1c:	6339      	str	r1, [r7, #48]	@ 0x30
 800ae1e:	4629      	mov	r1, r5
 800ae20:	eb43 0101 	adc.w	r1, r3, r1
 800ae24:	6379      	str	r1, [r7, #52]	@ 0x34
 800ae26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ae2e:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800ae32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ae36:	2200      	movs	r2, #0
 800ae38:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae3c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800ae40:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800ae44:	4621      	mov	r1, r4
 800ae46:	1889      	adds	r1, r1, r2
 800ae48:	6239      	str	r1, [r7, #32]
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	eb43 0101 	adc.w	r1, r3, r1
 800ae50:	6279      	str	r1, [r7, #36]	@ 0x24
 800ae52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ae5a:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
		if (fmt == FS_FAT32) {
 800ae5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d12a      	bne.n	800aebc <mount_volume+0x76c>
			if (ld_16(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ae66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae6a:	3354      	adds	r3, #84	@ 0x54
 800ae6c:	332a      	adds	r3, #42	@ 0x2a
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fc faca 	bl	8007408 <ld_16>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <mount_volume+0x72e>
 800ae7a:	230d      	movs	r3, #13
 800ae7c:	e0e6      	b.n	800b04c <mount_volume+0x8fc>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ae7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae82:	891b      	ldrh	r3, [r3, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <mount_volume+0x73c>
 800ae88:	230d      	movs	r3, #13
 800ae8a:	e0df      	b.n	800b04c <mount_volume+0x8fc>
			fs->dirbase = ld_32(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ae8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae90:	3354      	adds	r3, #84	@ 0x54
 800ae92:	332c      	adds	r3, #44	@ 0x2c
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fc fad0 	bl	800743a <ld_32>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	61bb      	str	r3, [r7, #24]
 800aea0:	61fa      	str	r2, [r7, #28]
 800aea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aea6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aeaa:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800aeae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aeb2:	699b      	ldr	r3, [r3, #24]
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aeba:	e036      	b.n	800af2a <mount_volume+0x7da>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800aebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aec0:	891b      	ldrh	r3, [r3, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <mount_volume+0x77a>
 800aec6:	230d      	movs	r3, #13
 800aec8:	e0c0      	b.n	800b04c <mount_volume+0x8fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aeca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aece:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800aed2:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800aed6:	2000      	movs	r0, #0
 800aed8:	6139      	str	r1, [r7, #16]
 800aeda:	6178      	str	r0, [r7, #20]
 800aedc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800aee0:	4621      	mov	r1, r4
 800aee2:	1851      	adds	r1, r2, r1
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	4629      	mov	r1, r5
 800aee8:	eb43 0101 	adc.w	r1, r3, r1
 800aeec:	60f9      	str	r1, [r7, #12]
 800aeee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aef2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aef6:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aefa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d104      	bne.n	800af0c <mount_volume+0x7bc>
 800af02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	005b      	lsls	r3, r3, #1
 800af0a:	e00c      	b.n	800af26 <mount_volume+0x7d6>
 800af0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af10:	699a      	ldr	r2, [r3, #24]
 800af12:	4613      	mov	r3, r2
 800af14:	005b      	lsls	r3, r3, #1
 800af16:	4413      	add	r3, r2
 800af18:	085a      	lsrs	r2, r3, #1
 800af1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800af26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800af2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af2e:	69da      	ldr	r2, [r3, #28]
 800af30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af34:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800af38:	0a5b      	lsrs	r3, r3, #9
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d201      	bcs.n	800af42 <mount_volume+0x7f2>
 800af3e:	230d      	movs	r3, #13
 800af40:	e084      	b.n	800b04c <mount_volume+0x8fc>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 800af42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af46:	f04f 32ff 	mov.w	r2, #4294967295
 800af4a:	615a      	str	r2, [r3, #20]
 800af4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af50:	695a      	ldr	r2, [r3, #20]
 800af52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af56:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 800af58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af5c:	2280      	movs	r2, #128	@ 0x80
 800af5e:	715a      	strb	r2, [r3, #5]
		if (fmt == FS_FAT32
 800af60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af64:	2b03      	cmp	r3, #3
 800af66:	d157      	bne.n	800b018 <mount_volume+0x8c8>
			&& ld_16(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
 800af68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af6c:	3354      	adds	r3, #84	@ 0x54
 800af6e:	3330      	adds	r3, #48	@ 0x30
 800af70:	4618      	mov	r0, r3
 800af72:	f7fc fa49 	bl	8007408 <ld_16>
 800af76:	4603      	mov	r3, r0
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d14d      	bne.n	800b018 <mount_volume+0x8c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800af7c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 800af80:	1c51      	adds	r1, r2, #1
 800af82:	6039      	str	r1, [r7, #0]
 800af84:	f143 0300 	adc.w	r3, r3, #0
 800af88:	607b      	str	r3, [r7, #4]
 800af8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af8e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800af92:	f7fc fcdc 	bl	800794e <move_window>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d13d      	bne.n	800b018 <mount_volume+0x8c8>
		{
			fs->fsi_flag = 0;
 800af9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800afa0:	2200      	movs	r2, #0
 800afa2:	715a      	strb	r2, [r3, #5]
			if (   ld_32(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 800afa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800afa8:	3354      	adds	r3, #84	@ 0x54
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fc fa45 	bl	800743a <ld_32>
 800afb0:	4603      	mov	r3, r0
 800afb2:	4a2a      	ldr	r2, [pc, #168]	@ (800b05c <mount_volume+0x90c>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d12f      	bne.n	800b018 <mount_volume+0x8c8>
				&& ld_32(fs->win + FSI_StrucSig) == 0x61417272
 800afb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800afbc:	3354      	adds	r3, #84	@ 0x54
 800afbe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fc fa39 	bl	800743a <ld_32>
 800afc8:	4603      	mov	r3, r0
 800afca:	4a25      	ldr	r2, [pc, #148]	@ (800b060 <mount_volume+0x910>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d123      	bne.n	800b018 <mount_volume+0x8c8>
				&& ld_32(fs->win + FSI_TrailSig) == 0xAA550000)
 800afd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800afd4:	3354      	adds	r3, #84	@ 0x54
 800afd6:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fc fa2d 	bl	800743a <ld_32>
 800afe0:	4603      	mov	r3, r0
 800afe2:	4a20      	ldr	r2, [pc, #128]	@ (800b064 <mount_volume+0x914>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d117      	bne.n	800b018 <mount_volume+0x8c8>
			{
#if (FF_FS_NOFSINFO & 1) == 0	/* Get free cluster count if trust it */
				fs->free_clst = ld_32(fs->win + FSI_Free_Count);
 800afe8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800afec:	3354      	adds	r3, #84	@ 0x54
 800afee:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fc fa21 	bl	800743a <ld_32>
 800aff8:	4602      	mov	r2, r0
 800affa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800affe:	615a      	str	r2, [r3, #20]
#endif
#if (FF_FS_NOFSINFO & 2) == 0	/* Get next free cluster if rtust it */
				fs->last_clst = ld_32(fs->win + FSI_Nxt_Free);
 800b000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b004:	3354      	adds	r3, #84	@ 0x54
 800b006:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fc fa15 	bl	800743a <ld_32>
 800b010:	4602      	mov	r2, r0
 800b012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b016:	611a      	str	r2, [r3, #16]
			}
		}
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800b018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b01c:	b2da      	uxtb	r2, r3
 800b01e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b022:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800b024:	4b10      	ldr	r3, [pc, #64]	@ (800b068 <mount_volume+0x918>)
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	3301      	adds	r3, #1
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	4b0e      	ldr	r3, [pc, #56]	@ (800b068 <mount_volume+0x918>)
 800b02e:	801a      	strh	r2, [r3, #0]
 800b030:	4b0d      	ldr	r3, [pc, #52]	@ (800b068 <mount_volume+0x918>)
 800b032:	881a      	ldrh	r2, [r3, #0]
 800b034:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b038:	80da      	strh	r2, [r3, #6]

#if FF_USE_LFN == 1			/* Initilize pointers to the static working buffers */
	fs->lfnbuf = LfnBuf;	/* LFN working buffer */
 800b03a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b03e:	4a0b      	ldr	r2, [pc, #44]	@ (800b06c <mount_volume+0x91c>)
 800b040:	60da      	str	r2, [r3, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Directory block scratchpad buuffer */
 800b042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b046:	4a0a      	ldr	r2, [pc, #40]	@ (800b070 <mount_volume+0x920>)
 800b048:	651a      	str	r2, [r3, #80]	@ 0x50

#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif

	return FR_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	37f8      	adds	r7, #248	@ 0xf8
 800b050:	46bd      	mov	sp, r7
 800b052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b056:	bf00      	nop
 800b058:	0ffffff5 	.word	0x0ffffff5
 800b05c:	41615252 	.word	0x41615252
 800b060:	61417272 	.word	0x61417272
 800b064:	aa550000 	.word	0xaa550000
 800b068:	240016c0 	.word	0x240016c0
 800b06c:	24001924 	.word	0x24001924
 800b070:	240016c4 	.word	0x240016c4

0800b074 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b07e:	2309      	movs	r3, #9
 800b080:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d01c      	beq.n	800b0c2 <validate+0x4e>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d018      	beq.n	800b0c2 <validate+0x4e>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d013      	beq.n	800b0c2 <validate+0x4e>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	889a      	ldrh	r2, [r3, #4]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	88db      	ldrh	r3, [r3, #6]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d10c      	bne.n	800b0c2 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	785b      	ldrb	r3, [r3, #1]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7f6 f81a 	bl	80010e8 <disk_status>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d101      	bne.n	800b0c2 <validate+0x4e>
			res = FR_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d102      	bne.n	800b0ce <validate+0x5a>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	e000      	b.n	800b0d0 <validate+0x5c>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	6013      	str	r3, [r2, #0]
	return res;
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b088      	sub	sp, #32
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800b0f2:	f107 0310 	add.w	r3, r7, #16
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7ff f8b0 	bl	800a25c <get_ldnumber>
 800b0fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	2b00      	cmp	r3, #0
 800b102:	da01      	bge.n	800b108 <f_mount+0x28>
 800b104:	230b      	movs	r3, #11
 800b106:	e02e      	b.n	800b166 <f_mount+0x86>

	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800b108:	4a19      	ldr	r2, [pc, #100]	@ (800b170 <f_mount+0x90>)
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b110:	61bb      	str	r3, [r7, #24]
	if (cfs) {					/* Unregister current filesystem object */
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d007      	beq.n	800b128 <f_mount+0x48>
		FatFs[vol] = 0;
 800b118:	4a15      	ldr	r2, [pc, #84]	@ (800b170 <f_mount+0x90>)
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	2100      	movs	r1, #0
 800b11e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	2200      	movs	r2, #0
 800b126:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00b      	beq.n	800b146 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	69fa      	ldr	r2, [r7, #28]
 800b132:	b2d2      	uxtb	r2, r2
 800b134:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register it */
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	490c      	ldr	r1, [pc, #48]	@ (800b170 <f_mount+0x90>)
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <f_mount+0x70>
 800b14c:	2300      	movs	r3, #0
 800b14e:	e00a      	b.n	800b166 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume in this function */
 800b150:	f107 010c 	add.w	r1, r7, #12
 800b154:	f107 0308 	add.w	r3, r7, #8
 800b158:	2200      	movs	r2, #0
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff faf8 	bl	800a750 <mount_volume>
 800b160:	4603      	mov	r3, r0
 800b162:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b164:	7dfb      	ldrb	r3, [r7, #23]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3720      	adds	r7, #32
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	240016bc 	.word	0x240016bc

0800b174 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800b174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b178:	b0b2      	sub	sp, #200	@ 0xc8
 800b17a:	af02      	add	r7, sp, #8
 800b17c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b17e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b180:	4613      	mov	r3, r2
 800b182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	DIR dj;
	FATFS *fs;
	DEF_NAMEBUFF


	if (!fp) return FR_INVALID_OBJECT;	/* Reject null pointer */
 800b186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <f_open+0x1c>
 800b18c:	2309      	movs	r3, #9
 800b18e:	e24a      	b.n	800b626 <f_open+0x4b2>

	/* Get logical drive number and mount the volume if needed */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800b190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b198:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	res = mount_volume(&path, &fs, mode);
 800b19c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b1a0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800b1a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7ff fad1 	bl	800a750 <mount_volume>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

	if (res == FR_OK) {
 800b1b4:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f040 822b 	bne.w	800b614 <f_open+0x4a0>
		fp->obj.fs = fs;
 800b1be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c2:	601a      	str	r2, [r3, #0]
		dj.obj.fs = fs;
 800b1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c6:	63bb      	str	r3, [r7, #56]	@ 0x38
		INIT_NAMEBUFF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b1c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fe ffc7 	bl	800a164 <follow_path>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800b1dc:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d107      	bne.n	800b1f4 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b1e4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800b1e8:	b25b      	sxtb	r3, r3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	da02      	bge.n	800b1f4 <f_open+0x80>
				res = FR_INVALID_NAME;
 800b1ee:	2306      	movs	r3, #6
 800b1f0:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1f8:	f003 031c 	and.w	r3, r3, #28
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 80df 	beq.w	800b3c0 <f_open+0x24c>
			if (res != FR_OK) {					/* No file, create new */
 800b202:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b206:	2b00      	cmp	r3, #0
 800b208:	d012      	beq.n	800b230 <f_open+0xbc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b20a:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b20e:	2b04      	cmp	r3, #4
 800b210:	d107      	bne.n	800b222 <f_open+0xae>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800b212:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b216:	4618      	mov	r0, r3
 800b218:	f7fe fbba 	bl	8009990 <dir_register>
 800b21c:	4603      	mov	r3, r0
 800b21e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b222:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b226:	f043 0308 	orr.w	r3, r3, #8
 800b22a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b22e:	e012      	b.n	800b256 <f_open+0xe2>
			}
			else {								/* An object with the same name is already existing */
				if (mode & FA_CREATE_NEW) {
 800b230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d003      	beq.n	800b244 <f_open+0xd0>
					res = FR_EXIST;				/* Cannot create as new file */
 800b23c:	2308      	movs	r3, #8
 800b23e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 800b242:	e008      	b.n	800b256 <f_open+0xe2>
				} else {
					if (dj.obj.attr & (AM_RDO | AM_DIR)) res = FR_DENIED;	/* Cannot overwrite it (R/O or DIR) */
 800b244:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800b248:	f003 0311 	and.w	r3, r3, #17
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <f_open+0xe2>
 800b250:	2307      	movs	r3, #7
 800b252:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800b256:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f040 80cd 	bne.w	800b3fa <f_open+0x286>
 800b260:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b264:	f003 0308 	and.w	r3, r3, #8
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f000 80c6 	beq.w	800b3fa <f_open+0x286>
				DWORD tm = GET_FATTIME();
 800b26e:	4ba6      	ldr	r3, [pc, #664]	@ (800b508 <f_open+0x394>)
 800b270:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800b274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	2b04      	cmp	r3, #4
 800b27a:	d150      	bne.n	800b31e <f_open+0x1aa>
					/* Get current allocation info */
					init_alloc_info(&fp->obj, 0);
 800b27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27e:	2100      	movs	r1, #0
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe f851 	bl	8009328 <init_alloc_info>
					/* Set exFAT directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 800b286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b28a:	3302      	adds	r3, #2
 800b28c:	221e      	movs	r2, #30
 800b28e:	2100      	movs	r1, #0
 800b290:	4618      	mov	r0, r3
 800b292:	f005 fdb6 	bl	8010e02 <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 800b296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b29a:	3326      	adds	r3, #38	@ 0x26
 800b29c:	221a      	movs	r2, #26
 800b29e:	2100      	movs	r1, #0
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f005 fdae 	bl	8010e02 <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 800b2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2aa:	1d1a      	adds	r2, r3, #4
 800b2ac:	2320      	movs	r3, #32
 800b2ae:	7013      	strb	r3, [r2, #0]
					st_32(fs->dirbuf + XDIR_CrtTime, tm);	/* Set created time */
 800b2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fc f9d6 	bl	800766c <st_32>
					st_32(fs->dirbuf + XDIR_ModTime, tm);	/* Set modified time (tmp setting) */
 800b2c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2c4:	330c      	adds	r3, #12
 800b2c6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fc f9ce 	bl	800766c <st_32>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800b2d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2d4:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800b2d8:	2301      	movs	r3, #1
 800b2da:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800b2dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fe f89c 	bl	800941e <store_xdir>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 800b2ec:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f040 8082 	bne.w	800b3fa <f_open+0x286>
 800b2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d07d      	beq.n	800b3fa <f_open+0x286>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800b2fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	2200      	movs	r2, #0
 800b306:	4619      	mov	r1, r3
 800b308:	f7fd f87b 	bl	8008402 <remove_chain>
 800b30c:	4603      	mov	r3, r0
 800b30e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800b312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b318:	3b01      	subs	r3, #1
 800b31a:	6113      	str	r3, [r2, #16]
 800b31c:	e06d      	b.n	800b3fa <f_open+0x286>
				} else
#endif
				{
					DWORD cl;
					/* Set FAT directory entry initial state */
					st_32(dj.dir + DIR_CrtTime, tm);	/* Set created time */
 800b31e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b320:	330e      	adds	r3, #14
 800b322:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800b326:	4618      	mov	r0, r3
 800b328:	f7fc f9a0 	bl	800766c <st_32>
					st_32(dj.dir + DIR_ModTime, tm);	/* Set modified time (tmp setting) */
 800b32c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b32e:	3316      	adds	r3, #22
 800b330:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800b334:	4618      	mov	r0, r3
 800b336:	f7fc f999 	bl	800766c <st_32>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800b33a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b33c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b33e:	4619      	mov	r1, r3
 800b340:	4610      	mov	r0, r2
 800b342:	f7fd fc81 	bl	8008c48 <ld_clust>
 800b346:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b34a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b34c:	f103 020b 	add.w	r2, r3, #11
 800b350:	2320      	movs	r3, #32
 800b352:	7013      	strb	r3, [r2, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b354:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b356:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b358:	2200      	movs	r2, #0
 800b35a:	4619      	mov	r1, r3
 800b35c:	f7fd fc93 	bl	8008c86 <st_clust>
					st_32(dj.dir + DIR_FileSize, 0);
 800b360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b362:	331c      	adds	r3, #28
 800b364:	2100      	movs	r1, #0
 800b366:	4618      	mov	r0, r3
 800b368:	f7fc f980 	bl	800766c <st_32>
					fs->wflag = 1;
 800b36c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b36e:	2301      	movs	r3, #1
 800b370:	7113      	strb	r3, [r2, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800b372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b376:	2b00      	cmp	r3, #0
 800b378:	d03f      	beq.n	800b3fa <f_open+0x286>
						LBA_t sc = fs->winsect;
 800b37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b37c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b380:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

						res = remove_chain(&dj.obj, cl, 0);
 800b384:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b388:	2200      	movs	r2, #0
 800b38a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fd f837 	bl	8008402 <remove_chain>
 800b394:	4603      	mov	r3, r0
 800b396:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
						if (res == FR_OK) {
 800b39a:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d12b      	bne.n	800b3fa <f_open+0x286>
							res = move_window(fs, sc);
 800b3a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b3a4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800b3a8:	4608      	mov	r0, r1
 800b3aa:	f7fc fad0 	bl	800794e <move_window>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b3b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	6113      	str	r3, [r2, #16]
 800b3be:	e01c      	b.n	800b3fa <f_open+0x286>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800b3c0:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d118      	bne.n	800b3fa <f_open+0x286>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800b3c8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800b3cc:	f003 0310 	and.w	r3, r3, #16
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d003      	beq.n	800b3dc <f_open+0x268>
					res = FR_NO_FILE;
 800b3d4:	2304      	movs	r3, #4
 800b3d6:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 800b3da:	e00e      	b.n	800b3fa <f_open+0x286>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800b3dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3e0:	f003 0302 	and.w	r3, r3, #2
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d008      	beq.n	800b3fa <f_open+0x286>
 800b3e8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800b3ec:	f003 0301 	and.w	r3, r3, #1
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <f_open+0x286>
						res = FR_DENIED;
 800b3f4:	2307      	movs	r3, #7
 800b3f6:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
					}
				}
			}
		}
		if (res == FR_OK) {
 800b3fa:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d114      	bne.n	800b42c <f_open+0x2b8>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800b402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b406:	f003 0308 	and.w	r3, r3, #8
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d005      	beq.n	800b41a <f_open+0x2a6>
 800b40e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b41a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b41c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800b420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b422:	e9c3 0114 	strd	r0, r1, [r3, #80]	@ 0x50
			fp->dir_ptr = dj.dir;
 800b426:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b42a:	659a      	str	r2, [r3, #88]	@ 0x58
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b42c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b430:	2b00      	cmp	r3, #0
 800b432:	f040 80ef 	bne.w	800b614 <f_open+0x4a0>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	2b04      	cmp	r3, #4
 800b43c:	d107      	bne.n	800b44e <f_open+0x2da>
				init_alloc_info(&fp->obj, &dj);
 800b43e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b440:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800b444:	4619      	mov	r1, r3
 800b446:	4610      	mov	r0, r2
 800b448:	f7fd ff6e 	bl	8009328 <init_alloc_info>
 800b44c:	e016      	b.n	800b47c <f_open+0x308>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b44e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b452:	4619      	mov	r1, r3
 800b454:	4610      	mov	r0, r2
 800b456:	f7fd fbf7 	bl	8008c48 <ld_clust>
 800b45a:	4602      	mov	r2, r0
 800b45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_32(dj.dir + DIR_FileSize);
 800b460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b462:	331c      	adds	r3, #28
 800b464:	4618      	mov	r0, r3
 800b466:	f7fb ffe8 	bl	800743a <ld_32>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2200      	movs	r2, #0
 800b46e:	613b      	str	r3, [r7, #16]
 800b470:	617a      	str	r2, [r7, #20]
 800b472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b474:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b478:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.id = fs->id;	/* Set current volume mount ID */
 800b47c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47e:	88db      	ldrh	r3, [r3, #6]
 800b480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b482:	8093      	strh	r3, [r2, #4]
			fp->flag = mode;	/* Set file access mode */
 800b484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b486:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b48a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;		/* Clear error flag */
 800b48e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b490:	2300      	movs	r3, #0
 800b492:	f882 3031 	strb.w	r3, [r2, #49]	@ 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 800b496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b498:	f04f 0200 	mov.w	r2, #0
 800b49c:	f04f 0300 	mov.w	r3, #0
 800b4a0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
			fp->fptr = 0;		/* Set file pointer top of the file */
 800b4a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4a6:	f04f 0200 	mov.w	r2, #0
 800b4aa:	f04f 0300 	mov.w	r3, #0
 800b4ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800b4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b4:	335c      	adds	r3, #92	@ 0x5c
 800b4b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f005 fca0 	bl	8010e02 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4c6:	f003 0320 	and.w	r3, r3, #32
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f000 80a2 	beq.w	800b614 <f_open+0x4a0>
 800b4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	f000 809c 	beq.w	800b614 <f_open+0x4a0>
				DWORD bcs, clst;
				FSIZE_t ofs;

				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e4:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ea:	895b      	ldrh	r3, [r3, #10]
 800b4ec:	025b      	lsls	r3, r3, #9
 800b4ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b500:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
 800b504:	e02b      	b.n	800b55e <f_open+0x3ea>
 800b506:	bf00      	nop
 800b508:	5b010000 	.word	0x5b010000
					clst = get_fat(&fp->obj, clst);
 800b50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800b512:	4618      	mov	r0, r3
 800b514:	f7fc fb88 	bl	8007c28 <get_fat>
 800b518:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
					if (clst <= 1) res = FR_INT_ERR;
 800b51c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b520:	2b01      	cmp	r3, #1
 800b522:	d802      	bhi.n	800b52a <f_open+0x3b6>
 800b524:	2302      	movs	r3, #2
 800b526:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b52a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b532:	d102      	bne.n	800b53a <f_open+0x3c6>
 800b534:	2301      	movs	r3, #1
 800b536:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b53a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b53e:	2200      	movs	r2, #0
 800b540:	61bb      	str	r3, [r7, #24]
 800b542:	61fa      	str	r2, [r7, #28]
 800b544:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800b548:	69b9      	ldr	r1, [r7, #24]
 800b54a:	1a51      	subs	r1, r2, r1
 800b54c:	6039      	str	r1, [r7, #0]
 800b54e:	69f9      	ldr	r1, [r7, #28]
 800b550:	eb63 0301 	sbc.w	r3, r3, r1
 800b554:	607b      	str	r3, [r7, #4]
 800b556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b55a:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
 800b55e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10a      	bne.n	800b57c <f_open+0x408>
 800b566:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b56a:	2200      	movs	r2, #0
 800b56c:	469a      	mov	sl, r3
 800b56e:	4693      	mov	fp, r2
 800b570:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800b574:	4592      	cmp	sl, r2
 800b576:	eb7b 0303 	sbcs.w	r3, fp, r3
 800b57a:	d3c7      	bcc.n	800b50c <f_open+0x398>
				}
				fp->clust = clst;
 800b57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b582:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b584:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d143      	bne.n	800b614 <f_open+0x4a0>
 800b58c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800b590:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800b594:	2500      	movs	r5, #0
 800b596:	ea54 0305 	orrs.w	r3, r4, r5
 800b59a:	d03b      	beq.n	800b614 <f_open+0x4a0>
					LBA_t sec = clst2sect(fs, clst);
 800b59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b59e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fc fb06 	bl	8007bb4 <clst2sect>
 800b5a8:	e9c7 0124 	strd	r0, r1, [r7, #144]	@ 0x90

					if (sec == 0) {
 800b5ac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	d103      	bne.n	800b5bc <f_open+0x448>
						res = FR_INT_ERR;
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 800b5ba:	e02b      	b.n	800b614 <f_open+0x4a0>
					} else {
						fp->sect = sec + (DWORD)(ofs / SS(fs));
 800b5bc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b5c0:	f04f 0200 	mov.w	r2, #0
 800b5c4:	f04f 0300 	mov.w	r3, #0
 800b5c8:	0a42      	lsrs	r2, r0, #9
 800b5ca:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800b5ce:	0a4b      	lsrs	r3, r1, #9
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4690      	mov	r8, r2
 800b5d4:	4699      	mov	r9, r3
 800b5d6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800b5da:	eb18 0102 	adds.w	r1, r8, r2
 800b5de:	60b9      	str	r1, [r7, #8]
 800b5e0:	eb49 0303 	adc.w	r3, r9, r3
 800b5e4:	60fb      	str	r3, [r7, #12]
 800b5e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b5ec:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b5f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5f2:	7858      	ldrb	r0, [r3, #1]
 800b5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f6:	f103 015c 	add.w	r1, r3, #92	@ 0x5c
 800b5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5fc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800b600:	2401      	movs	r4, #1
 800b602:	9400      	str	r4, [sp, #0]
 800b604:	f7f5 fd92 	bl	800112c <disk_read>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d002      	beq.n	800b614 <f_open+0x4a0>
 800b60e:	2301      	movs	r3, #1
 800b610:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
		}

		FREE_NAMEBUFF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b614:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d002      	beq.n	800b622 <f_open+0x4ae>
 800b61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b61e:	2200      	movs	r2, #0
 800b620:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b622:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
}
 800b626:	4618      	mov	r0, r3
 800b628:	37c0      	adds	r7, #192	@ 0xc0
 800b62a:	46bd      	mov	sp, r7
 800b62c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b630 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800b630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b634:	b0a2      	sub	sp, #136	@ 0x88
 800b636:	af02      	add	r7, sp, #8
 800b638:	6478      	str	r0, [r7, #68]	@ 0x44
 800b63a:	6439      	str	r1, [r7, #64]	@ 0x40
 800b63c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b63e:	63bb      	str	r3, [r7, #56]	@ 0x38
	FRESULT res;
	FATFS *fs;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b642:	673b      	str	r3, [r7, #112]	@ 0x70


	*br = 0;	/* Clear read byte counter */
 800b644:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b646:	2300      	movs	r3, #0
 800b648:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b64a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b64c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800b650:	4619      	mov	r1, r3
 800b652:	4610      	mov	r0, r2
 800b654:	f7ff fd0e 	bl	800b074 <validate>
 800b658:	4603      	mov	r3, r0
 800b65a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b65e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b662:	2b00      	cmp	r3, #0
 800b664:	d108      	bne.n	800b678 <f_read+0x48>
 800b666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b668:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b66c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800b670:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b674:	2b00      	cmp	r3, #0
 800b676:	d002      	beq.n	800b67e <f_read+0x4e>
 800b678:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b67c:	e177      	b.n	800b96e <f_read+0x33e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b67e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b680:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b684:	f003 0301 	and.w	r3, r3, #1
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d101      	bne.n	800b690 <f_read+0x60>
 800b68c:	2307      	movs	r3, #7
 800b68e:	e16e      	b.n	800b96e <f_read+0x33e>
	remain = fp->obj.objsize - fp->fptr;
 800b690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b692:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b698:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b69c:	1a84      	subs	r4, r0, r2
 800b69e:	eb61 0503 	sbc.w	r5, r1, r3
 800b6a2:	e9c7 4518 	strd	r4, r5, [r7, #96]	@ 0x60
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	4698      	mov	r8, r3
 800b6ac:	4691      	mov	r9, r2
 800b6ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800b6b2:	4542      	cmp	r2, r8
 800b6b4:	eb73 0309 	sbcs.w	r3, r3, r9
 800b6b8:	f080 8154 	bcs.w	800b964 <f_read+0x334>
 800b6bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6be:	63fb      	str	r3, [r7, #60]	@ 0x3c

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800b6c0:	e150      	b.n	800b964 <f_read+0x334>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b6c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6c4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b6c8:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800b6cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	f040 8103 	bne.w	800b8e4 <f_read+0x2b4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b6de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b6e4:	f04f 0000 	mov.w	r0, #0
 800b6e8:	f04f 0100 	mov.w	r1, #0
 800b6ec:	0a50      	lsrs	r0, r2, #9
 800b6ee:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b6f2:	0a59      	lsrs	r1, r3, #9
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6f8:	895b      	ldrh	r3, [r3, #10]
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (csect == 0) {					/* On the cluster boundary? */
 800b700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b702:	2b00      	cmp	r3, #0
 800b704:	d126      	bne.n	800b754 <f_read+0x124>
				DWORD clst;

				if (fp->fptr == 0) {			/* On the top of the file? */
 800b706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b708:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b70c:	4313      	orrs	r3, r2
 800b70e:	d103      	bne.n	800b718 <f_read+0xe8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b716:	e007      	b.n	800b728 <f_read+0xf8>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b718:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b71a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b71c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b71e:	4619      	mov	r1, r3
 800b720:	4610      	mov	r0, r2
 800b722:	f7fc fa81 	bl	8007c28 <get_fat>
 800b726:	66f8      	str	r0, [r7, #108]	@ 0x6c
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d805      	bhi.n	800b73a <f_read+0x10a>
 800b72e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b730:	2202      	movs	r2, #2
 800b732:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b736:	2302      	movs	r3, #2
 800b738:	e119      	b.n	800b96e <f_read+0x33e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b73a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b740:	d105      	bne.n	800b74e <f_read+0x11e>
 800b742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b744:	2201      	movs	r2, #1
 800b746:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b74a:	2301      	movs	r3, #1
 800b74c:	e10f      	b.n	800b96e <f_read+0x33e>
				fp->clust = clst;				/* Update current cluster */
 800b74e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b750:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b752:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800b754:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b75a:	4619      	mov	r1, r3
 800b75c:	4610      	mov	r0, r2
 800b75e:	f7fc fa29 	bl	8007bb4 <clst2sect>
 800b762:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800b766:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b76a:	4313      	orrs	r3, r2
 800b76c:	d105      	bne.n	800b77a <f_read+0x14a>
 800b76e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b770:	2202      	movs	r2, #2
 800b772:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b776:	2302      	movs	r3, #2
 800b778:	e0f9      	b.n	800b96e <f_read+0x33e>
			sect += csect;
 800b77a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b77c:	2200      	movs	r2, #0
 800b77e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b780:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b782:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b786:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800b78a:	4621      	mov	r1, r4
 800b78c:	1851      	adds	r1, r2, r1
 800b78e:	6039      	str	r1, [r7, #0]
 800b790:	4629      	mov	r1, r5
 800b792:	414b      	adcs	r3, r1
 800b794:	607b      	str	r3, [r7, #4]
 800b796:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b79a:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b79e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a0:	0a5b      	lsrs	r3, r3, #9
 800b7a2:	677b      	str	r3, [r7, #116]	@ 0x74
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800b7a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d052      	beq.n	800b850 <f_read+0x220>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b7aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b7ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7ae:	441a      	add	r2, r3
 800b7b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7b2:	895b      	ldrh	r3, [r3, #10]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d905      	bls.n	800b7c4 <f_read+0x194>
					cc = fs->csize - csect;
 800b7b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7ba:	895b      	ldrh	r3, [r3, #10]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	677b      	str	r3, [r7, #116]	@ 0x74
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b7c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7c6:	7858      	ldrb	r0, [r3, #1]
 800b7c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b7d0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b7d2:	f7f5 fcab 	bl	800112c <disk_read>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d005      	beq.n	800b7e8 <f_read+0x1b8>
 800b7dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e0c2      	b.n	800b96e <f_read+0x33e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b7e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b7ee:	b25b      	sxtb	r3, r3
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	da29      	bge.n	800b848 <f_read+0x218>
 800b7f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7f6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800b7fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b7fe:	ebb0 0a02 	subs.w	sl, r0, r2
 800b802:	eb61 0b03 	sbc.w	fp, r1, r3
 800b806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b808:	2200      	movs	r2, #0
 800b80a:	623b      	str	r3, [r7, #32]
 800b80c:	627a      	str	r2, [r7, #36]	@ 0x24
 800b80e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b812:	460b      	mov	r3, r1
 800b814:	459a      	cmp	sl, r3
 800b816:	4613      	mov	r3, r2
 800b818:	eb7b 0303 	sbcs.w	r3, fp, r3
 800b81c:	d214      	bcs.n	800b848 <f_read+0x218>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b81e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b820:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800b824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b828:	1a84      	subs	r4, r0, r2
 800b82a:	61bc      	str	r4, [r7, #24]
 800b82c:	eb61 0303 	sbc.w	r3, r1, r3
 800b830:	61fb      	str	r3, [r7, #28]
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	025a      	lsls	r2, r3, #9
 800b836:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b838:	1898      	adds	r0, r3, r2
 800b83a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b83c:	335c      	adds	r3, #92	@ 0x5c
 800b83e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b842:	4619      	mov	r1, r3
 800b844:	f005 fb16 	bl	8010e74 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b848:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b84a:	025b      	lsls	r3, r3, #9
 800b84c:	67bb      	str	r3, [r7, #120]	@ 0x78
				continue;
 800b84e:	e067      	b.n	800b920 <f_read+0x2f0>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b852:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800b856:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b85a:	428b      	cmp	r3, r1
 800b85c:	bf08      	it	eq
 800b85e:	4282      	cmpeq	r2, r0
 800b860:	d03b      	beq.n	800b8da <f_read+0x2aa>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b864:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b868:	b25b      	sxtb	r3, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	da21      	bge.n	800b8b2 <f_read+0x282>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b86e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b870:	785d      	ldrb	r5, [r3, #1]
 800b872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b874:	f103 045c 	add.w	r4, r3, #92	@ 0x5c
 800b878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b87a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800b87e:	2301      	movs	r3, #1
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4621      	mov	r1, r4
 800b888:	4628      	mov	r0, r5
 800b88a:	f7f5 fc7b 	bl	8001184 <disk_write>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d005      	beq.n	800b8a0 <f_read+0x270>
 800b894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b896:	2201      	movs	r2, #1
 800b898:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b89c:	2301      	movs	r3, #1
 800b89e:	e066      	b.n	800b96e <f_read+0x33e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b8a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8ae:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b8b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8b4:	7858      	ldrb	r0, [r3, #1]
 800b8b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8b8:	f103 015c 	add.w	r1, r3, #92	@ 0x5c
 800b8bc:	2301      	movs	r3, #1
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b8c4:	f7f5 fc32 	bl	800112c <disk_read>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d005      	beq.n	800b8da <f_read+0x2aa>
 800b8ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e049      	b.n	800b96e <f_read+0x33e>
			}
#endif
			fp->sect = sect;
 800b8da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b8dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b8e0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800b8e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8f0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b8f4:	67bb      	str	r3, [r7, #120]	@ 0x78
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b8f6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b8f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d901      	bls.n	800b902 <f_read+0x2d2>
 800b8fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b900:	67bb      	str	r3, [r7, #120]	@ 0x78
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b904:	f103 015c 	add.w	r1, r3, #92	@ 0x5c
 800b908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b90a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b90e:	4613      	mov	r3, r2
 800b910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b914:	440b      	add	r3, r1
 800b916:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b918:	4619      	mov	r1, r3
 800b91a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800b91c:	f005 faaa 	bl	8010e74 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800b920:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b922:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b92e:	441a      	add	r2, r3
 800b930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b936:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b938:	4413      	add	r3, r2
 800b93a:	673b      	str	r3, [r7, #112]	@ 0x70
 800b93c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b93e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b942:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b944:	2000      	movs	r0, #0
 800b946:	6139      	str	r1, [r7, #16]
 800b948:	6178      	str	r0, [r7, #20]
 800b94a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b94e:	4621      	mov	r1, r4
 800b950:	1851      	adds	r1, r2, r1
 800b952:	60b9      	str	r1, [r7, #8]
 800b954:	4629      	mov	r1, r5
 800b956:	414b      	adcs	r3, r1
 800b958:	60fb      	str	r3, [r7, #12]
 800b95a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b95c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b960:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800b964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b966:	2b00      	cmp	r3, #0
 800b968:	f47f aeab 	bne.w	800b6c2 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3780      	adds	r7, #128	@ 0x80
 800b972:	46bd      	mov	sp, r7
 800b974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b978 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800b978:	b590      	push	{r4, r7, lr}
 800b97a:	b09f      	sub	sp, #124	@ 0x7c
 800b97c:	af02      	add	r7, sp, #8
 800b97e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800b986:	4611      	mov	r1, r2
 800b988:	4618      	mov	r0, r3
 800b98a:	f7ff fb73 	bl	800b074 <validate>
 800b98e:	4603      	mov	r3, r0
 800b990:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 800b994:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f040 810e 	bne.w	800bbba <f_sync+0x242>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b9a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f000 8106 	beq.w	800bbba <f_sync+0x242>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b9b4:	b25b      	sxtb	r3, r3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	da19      	bge.n	800b9ee <f_sync+0x76>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b9ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9bc:	7858      	ldrb	r0, [r3, #1]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f103 015c 	add.w	r1, r3, #92	@ 0x5c
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800b9ca:	2401      	movs	r4, #1
 800b9cc:	9400      	str	r4, [sp, #0]
 800b9ce:	f7f5 fbd9 	bl	8001184 <disk_write>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <f_sync+0x64>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e0f0      	b.n	800bbbe <f_sync+0x246>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b9e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b9ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b04      	cmp	r3, #4
 800b9f4:	f040 8096 	bne.w	800bb24 <f_sync+0x1ac>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fc fca1 	bl	8008342 <fill_first_frag>
 800ba00:	4603      	mov	r3, r0
 800ba02:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800ba06:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d10a      	bne.n	800ba24 <f_sync+0xac>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba14:	f04f 32ff 	mov.w	r2, #4294967295
 800ba18:	4619      	mov	r1, r3
 800ba1a:	f7fc fcc1 	bl	80083a0 <fill_last_frag>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 800ba24:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f040 80c6 	bne.w	800bbba <f_sync+0x242>
					DIR dj;
					DEF_NAMEBUFF

					INIT_NAMEBUFF(fs);
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	f107 0308 	add.w	r3, r7, #8
 800ba34:	4611      	mov	r1, r2
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fd fcb8 	bl	80093ac <load_obj_xdir>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 800ba42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f040 80b7 	bne.w	800bbba <f_sync+0x242>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 800ba4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba50:	3304      	adds	r3, #4
 800ba52:	781a      	ldrb	r2, [r3, #0]
 800ba54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba58:	3304      	adds	r3, #4
 800ba5a:	f042 0220 	orr.w	r2, r2, #32
 800ba5e:	b2d2      	uxtb	r2, r2
 800ba60:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;		/* Update file allocation information */
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	79da      	ldrb	r2, [r3, #7]
 800ba66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba6a:	3321      	adds	r3, #33	@ 0x21
 800ba6c:	f042 0201 	orr.w	r2, r2, #1
 800ba70:	b2d2      	uxtb	r2, r2
 800ba72:	701a      	strb	r2, [r3, #0]
						st_32(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);	/* Update start cluster */
 800ba74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba78:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	4619      	mov	r1, r3
 800ba82:	4610      	mov	r0, r2
 800ba84:	f7fb fdf2 	bl	800766c <st_32>
						st_64(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);	/* Update file size */
 800ba88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba8c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ba96:	4608      	mov	r0, r1
 800ba98:	f7fb fe14 	bl	80076c4 <st_64>
						st_64(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 800ba9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baa0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800baaa:	4608      	mov	r0, r1
 800baac:	f7fb fe0a 	bl	80076c4 <st_64>
						st_32(fs->dirbuf + XDIR_ModTime, GET_FATTIME());	/* Update modified time */
 800bab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bab4:	330c      	adds	r3, #12
 800bab6:	4944      	ldr	r1, [pc, #272]	@ (800bbc8 <f_sync+0x250>)
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fb fdd7 	bl	800766c <st_32>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800babe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bac2:	3315      	adds	r3, #21
 800bac4:	2200      	movs	r2, #0
 800bac6:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_ModTZ] = 0;
 800bac8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800baca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bacc:	3317      	adds	r3, #23
 800bace:	2200      	movs	r2, #0
 800bad0:	701a      	strb	r2, [r3, #0]
						st_32(fs->dirbuf + XDIR_AccTime, 0);				/* Invalidate last access time */
 800bad2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bad6:	3310      	adds	r3, #16
 800bad8:	2100      	movs	r1, #0
 800bada:	4618      	mov	r0, r3
 800badc:	f7fb fdc6 	bl	800766c <st_32>
						fs->dirbuf[XDIR_AccTZ] = 0;
 800bae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bae4:	3318      	adds	r3, #24
 800bae6:	2200      	movs	r2, #0
 800bae8:	701a      	strb	r2, [r3, #0]
						res = store_xdir(&dj);								/* Restore it to the directory */
 800baea:	f107 0308 	add.w	r3, r7, #8
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fd fc95 	bl	800941e <store_xdir>
 800baf4:	4603      	mov	r3, r0
 800baf6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800bafa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d15b      	bne.n	800bbba <f_sync+0x242>
							res = sync_fs(fs);
 800bb02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7fb ff5b 	bl	80079c0 <sync_fs>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb1a:	b2da      	uxtb	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800bb22:	e04a      	b.n	800bbba <f_sync+0x242>
					FREE_NAMEBUFF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bb24:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800bb2c:	4608      	mov	r0, r1
 800bb2e:	f7fb ff0e 	bl	800794e <move_window>
 800bb32:	4603      	mov	r3, r0
 800bb34:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800bb38:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d13c      	bne.n	800bbba <f_sync+0x242>
					BYTE *dir = fp->dir_ptr;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb44:	66bb      	str	r3, [r7, #104]	@ 0x68

					dir[DIR_Attr] |= AM_ARC;					/* Set archive attribute to indicate that the file has been changed */
 800bb46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb48:	330b      	adds	r3, #11
 800bb4a:	781a      	ldrb	r2, [r3, #0]
 800bb4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb4e:	330b      	adds	r3, #11
 800bb50:	f042 0220 	orr.w	r2, r2, #32
 800bb54:	b2d2      	uxtb	r2, r2
 800bb56:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);	/* Update file allocation information  */
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6818      	ldr	r0, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	461a      	mov	r2, r3
 800bb62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bb64:	f7fd f88f 	bl	8008c86 <st_clust>
					st_32(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bb68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb6a:	f103 001c 	add.w	r0, r3, #28
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bb74:	4613      	mov	r3, r2
 800bb76:	4619      	mov	r1, r3
 800bb78:	f7fb fd78 	bl	800766c <st_32>
					st_32(dir + DIR_ModTime, GET_FATTIME());	/* Update modified time */
 800bb7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb7e:	3316      	adds	r3, #22
 800bb80:	4911      	ldr	r1, [pc, #68]	@ (800bbc8 <f_sync+0x250>)
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7fb fd72 	bl	800766c <st_32>
					st_16(dir + DIR_LstAccDate, 0);				/* Invalidate last access date */
 800bb88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb8a:	3312      	adds	r3, #18
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7fb fd51 	bl	8007636 <st_16>
					fs->wflag = 1;
 800bb94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb96:	2201      	movs	r2, #1
 800bb98:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);							/* Restore it to the directory */
 800bb9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fb ff0f 	bl	80079c0 <sync_fs>
 800bba2:	4603      	mov	r3, r0
 800bba4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bbae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bbba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3774      	adds	r7, #116	@ 0x74
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd90      	pop	{r4, r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	5b010000 	.word	0x5b010000

0800bbcc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f7ff fecf 	bl	800b978 <f_sync>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bbde:	7bfb      	ldrb	r3, [r7, #15]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10e      	bne.n	800bc02 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f107 0208 	add.w	r2, r7, #8
 800bbea:	4611      	mov	r1, r2
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7ff fa41 	bl	800b074 <validate>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bbf6:	7bfb      	ldrb	r3, [r7, #15]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d102      	bne.n	800bc02 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bc0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc10:	b0ae      	sub	sp, #184	@ 0xb8
 800bc12:	af02      	add	r7, sp, #8
 800bc14:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800bc18:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	DWORD clst, bcs;
	LBA_t nsect;
	FSIZE_t ifptr;


	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bc1c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800bc20:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bc24:	4619      	mov	r1, r3
 800bc26:	4610      	mov	r0, r2
 800bc28:	f7ff fa24 	bl	800b074 <validate>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bc32:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d105      	bne.n	800bc46 <f_lseek+0x3a>
 800bc3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc3e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bc42:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800bc46:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d111      	bne.n	800bc72 <f_lseek+0x66>
 800bc4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	2b04      	cmp	r3, #4
 800bc56:	d10c      	bne.n	800bc72 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800bc58:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800bc5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc62:	f04f 32ff 	mov.w	r2, #4294967295
 800bc66:	4619      	mov	r1, r3
 800bc68:	f7fc fb9a 	bl	80083a0 <fill_last_frag>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bc72:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d002      	beq.n	800bc80 <f_lseek+0x74>
 800bc7a:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800bc7e:	e24f      	b.n	800c120 <f_lseek+0x514>
#endif

	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
 800bc80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2b04      	cmp	r3, #4
 800bc88:	d009      	beq.n	800bc9e <f_lseek+0x92>
 800bc8a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d305      	bcc.n	800bc9e <f_lseek+0x92>
 800bc92:	f04f 32ff 	mov.w	r2, #4294967295
 800bc96:	f04f 0300 	mov.w	r3, #0
 800bc9a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800bc9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bca2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bca6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800bcaa:	4290      	cmp	r0, r2
 800bcac:	eb71 0303 	sbcs.w	r3, r1, r3
 800bcb0:	d20d      	bcs.n	800bcce <f_lseek+0xc2>
 800bcb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bcba:	f003 0302 	and.w	r3, r3, #2
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d105      	bne.n	800bcce <f_lseek+0xc2>
			ofs = fp->obj.objsize;
 800bcc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcc6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bcca:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
		}
		ifptr = fp->fptr;
 800bcce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcd2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800bcd6:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		fp->fptr = nsect = 0;
 800bcda:	f04f 0200 	mov.w	r2, #0
 800bcde:	f04f 0300 	mov.w	r3, #0
 800bce2:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
 800bce6:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800bcea:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800bcee:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		if (ofs > 0) {
 800bcf2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	f000 8191 	beq.w	800c01e <f_lseek+0x412>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800bcfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bd00:	895b      	ldrh	r3, [r3, #10]
 800bd02:	025b      	lsls	r3, r3, #9
 800bd04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			if (ifptr > 0 &&
 800bd08:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	d060      	beq.n	800bdd2 <f_lseek+0x1c6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800bd10:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800bd14:	1e54      	subs	r4, r2, #1
 800bd16:	f143 35ff 	adc.w	r5, r3, #4294967295
 800bd1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bd1e:	2200      	movs	r2, #0
 800bd20:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bd22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bd24:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800bd28:	4620      	mov	r0, r4
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7f4 faee 	bl	800030c <__aeabi_uldivmod>
 800bd30:	4602      	mov	r2, r0
 800bd32:	460b      	mov	r3, r1
 800bd34:	4614      	mov	r4, r2
 800bd36:	461d      	mov	r5, r3
 800bd38:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bd3c:	1e51      	subs	r1, r2, #1
 800bd3e:	6739      	str	r1, [r7, #112]	@ 0x70
 800bd40:	f143 33ff 	adc.w	r3, r3, #4294967295
 800bd44:	677b      	str	r3, [r7, #116]	@ 0x74
 800bd46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bd50:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800bd54:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800bd58:	f7f4 fad8 	bl	800030c <__aeabi_uldivmod>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800bd60:	4294      	cmp	r4, r2
 800bd62:	eb75 0303 	sbcs.w	r3, r5, r3
 800bd66:	d334      	bcc.n	800bdd2 <f_lseek+0x1c6>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800bd68:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bd6c:	f112 3aff 	adds.w	sl, r2, #4294967295
 800bd70:	f143 3bff 	adc.w	fp, r3, #4294967295
 800bd74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd7e:	667a      	str	r2, [r7, #100]	@ 0x64
 800bd80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800bd84:	460b      	mov	r3, r1
 800bd86:	ea6f 0803 	mvn.w	r8, r3
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	ea6f 0903 	mvn.w	r9, r3
 800bd90:	ea0a 0308 	and.w	r3, sl, r8
 800bd94:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd96:	ea0b 0309 	and.w	r3, fp, r9
 800bd9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bda0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800bda4:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				ofs -= fp->fptr;
 800bda8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bdac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800bdb0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800bdb4:	1a14      	subs	r4, r2, r0
 800bdb6:	613c      	str	r4, [r7, #16]
 800bdb8:	eb63 0301 	sbc.w	r3, r3, r1
 800bdbc:	617b      	str	r3, [r7, #20]
 800bdbe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800bdc2:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
				clst = fp->clust;
 800bdc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bdca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bdd0:	e031      	b.n	800be36 <f_lseek+0x22a>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800bdd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800bddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d123      	bne.n	800be2c <f_lseek+0x220>
					clst = create_chain(&fp->obj, 0);
 800bde4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bde8:	2100      	movs	r1, #0
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7fc fbeb 	bl	80085c6 <create_chain>
 800bdf0:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bdf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d106      	bne.n	800be0a <f_lseek+0x1fe>
 800bdfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be00:	2202      	movs	r2, #2
 800be02:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800be06:	2302      	movs	r3, #2
 800be08:	e18a      	b.n	800c120 <f_lseek+0x514>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800be0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be12:	d106      	bne.n	800be22 <f_lseek+0x216>
 800be14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be18:	2201      	movs	r2, #1
 800be1a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800be1e:	2301      	movs	r3, #1
 800be20:	e17e      	b.n	800c120 <f_lseek+0x514>
					fp->obj.sclust = clst;
 800be22:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800be26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be2a:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800be2c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800be30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be34:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if (clst != 0) {
 800be36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f000 80ef 	beq.w	800c01e <f_lseek+0x412>
				while (ofs > bcs) {						/* Cluster following loop */
 800be40:	e090      	b.n	800bf64 <f_lseek+0x358>
					ofs -= bcs; fp->fptr += bcs;
 800be42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800be46:	2200      	movs	r2, #0
 800be48:	653b      	str	r3, [r7, #80]	@ 0x50
 800be4a:	657a      	str	r2, [r7, #84]	@ 0x54
 800be4c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800be50:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800be54:	4621      	mov	r1, r4
 800be56:	1a51      	subs	r1, r2, r1
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	4629      	mov	r1, r5
 800be5c:	eb63 0301 	sbc.w	r3, r3, r1
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800be66:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
 800be6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be6e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800be72:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800be76:	2000      	movs	r0, #0
 800be78:	64b9      	str	r1, [r7, #72]	@ 0x48
 800be7a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800be7c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800be80:	4621      	mov	r1, r4
 800be82:	1851      	adds	r1, r2, r1
 800be84:	6439      	str	r1, [r7, #64]	@ 0x40
 800be86:	4629      	mov	r1, r5
 800be88:	414b      	adcs	r3, r1
 800be8a:	647b      	str	r3, [r7, #68]	@ 0x44
 800be8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800be94:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800be98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bea0:	f003 0302 	and.w	r3, r3, #2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d031      	beq.n	800bf0c <f_lseek+0x300>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800bea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800beac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800beb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800beb4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800beb8:	4282      	cmp	r2, r0
 800beba:	418b      	sbcs	r3, r1
 800bebc:	d212      	bcs.n	800bee4 <f_lseek+0x2d8>
							fp->obj.objsize = fp->fptr;
 800bebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bec2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800bec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800beca:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800bece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bed2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800bee0:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800bee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bee8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800beec:	4618      	mov	r0, r3
 800beee:	f7fc fb6a 	bl	80085c6 <create_chain>
 800bef2:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
						if (clst == 0) {				/* Clip file size in case of disk full */
 800bef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800befa:	2b00      	cmp	r3, #0
 800befc:	d10f      	bne.n	800bf1e <f_lseek+0x312>
							ofs = 0; break;
 800befe:	f04f 0200 	mov.w	r2, #0
 800bf02:	f04f 0300 	mov.w	r3, #0
 800bf06:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 800bf0a:	e03b      	b.n	800bf84 <f_lseek+0x378>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800bf0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf10:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7fb fe87 	bl	8007c28 <get_fat>
 800bf1a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bf1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bf22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf26:	d106      	bne.n	800bf36 <f_lseek+0x32a>
 800bf28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bf32:	2301      	movs	r3, #1
 800bf34:	e0f4      	b.n	800c120 <f_lseek+0x514>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800bf36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d906      	bls.n	800bf4c <f_lseek+0x340>
 800bf3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bf42:	699a      	ldr	r2, [r3, #24]
 800bf44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d306      	bcc.n	800bf5a <f_lseek+0x34e>
 800bf4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf50:	2202      	movs	r2, #2
 800bf52:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bf56:	2302      	movs	r3, #2
 800bf58:	e0e2      	b.n	800c120 <f_lseek+0x514>
					fp->clust = clst;
 800bf5a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800bf5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bf62:	6413      	str	r3, [r2, #64]	@ 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800bf64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bf68:	2200      	movs	r2, #0
 800bf6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800bf6e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800bf72:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800bf76:	4621      	mov	r1, r4
 800bf78:	4291      	cmp	r1, r2
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	eb71 0303 	sbcs.w	r3, r1, r3
 800bf80:	f4ff af5f 	bcc.w	800be42 <f_lseek+0x236>
				}
				fp->fptr += ofs;
 800bf84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf88:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800bf8c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800bf90:	1884      	adds	r4, r0, r2
 800bf92:	633c      	str	r4, [r7, #48]	@ 0x30
 800bf94:	eb41 0303 	adc.w	r3, r1, r3
 800bf98:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800bfa2:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				if (ofs % SS(fs)) {
 800bfa6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800bfaa:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800bfae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfb4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800bfb8:	460b      	mov	r3, r1
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	d02f      	beq.n	800c01e <f_lseek+0x412>
					nsect = clst2sect(fs, clst);	/* Current sector */
 800bfbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bfc2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fb fdf4 	bl	8007bb4 <clst2sect>
 800bfcc:	e9c7 0128 	strd	r0, r1, [r7, #160]	@ 0xa0
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 800bfd0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	d106      	bne.n	800bfe6 <f_lseek+0x3da>
 800bfd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bfdc:	2202      	movs	r2, #2
 800bfde:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	e09c      	b.n	800c120 <f_lseek+0x514>
					nsect += (DWORD)(ofs / SS(fs));
 800bfe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bfea:	f04f 0200 	mov.w	r2, #0
 800bfee:	f04f 0300 	mov.w	r3, #0
 800bff2:	0a42      	lsrs	r2, r0, #9
 800bff4:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800bff8:	0a4b      	lsrs	r3, r1, #9
 800bffa:	2300      	movs	r3, #0
 800bffc:	623a      	str	r2, [r7, #32]
 800bffe:	627b      	str	r3, [r7, #36]	@ 0x24
 800c000:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800c004:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c008:	4621      	mov	r1, r4
 800c00a:	1851      	adds	r1, r2, r1
 800c00c:	6039      	str	r1, [r7, #0]
 800c00e:	4629      	mov	r1, r5
 800c010:	eb43 0101 	adc.w	r1, r3, r1
 800c014:	6079      	str	r1, [r7, #4]
 800c016:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c01a:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 800c01e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c022:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c026:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800c02a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800c02e:	4290      	cmp	r0, r2
 800c030:	eb71 0303 	sbcs.w	r3, r1, r3
 800c034:	d212      	bcs.n	800c05c <f_lseek+0x450>
			fp->obj.objsize = fp->fptr;
 800c036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c03a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c03e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800c042:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800c046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c04a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c04e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c052:	b2da      	uxtb	r2, r3
 800c054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c058:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c05c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c060:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c064:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800c068:	61bb      	str	r3, [r7, #24]
 800c06a:	2300      	movs	r3, #0
 800c06c:	61fb      	str	r3, [r7, #28]
 800c06e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c072:	460b      	mov	r3, r1
 800c074:	4313      	orrs	r3, r2
 800c076:	d051      	beq.n	800c11c <f_lseek+0x510>
 800c078:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c07c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800c080:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800c084:	4299      	cmp	r1, r3
 800c086:	bf08      	it	eq
 800c088:	4290      	cmpeq	r0, r2
 800c08a:	d047      	beq.n	800c11c <f_lseek+0x510>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c08c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c090:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c094:	b25b      	sxtb	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	da23      	bge.n	800c0e2 <f_lseek+0x4d6>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c09a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c09e:	7858      	ldrb	r0, [r3, #1]
 800c0a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0a4:	f103 015c 	add.w	r1, r3, #92	@ 0x5c
 800c0a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0ac:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800c0b0:	2401      	movs	r4, #1
 800c0b2:	9400      	str	r4, [sp, #0]
 800c0b4:	f7f5 f866 	bl	8001184 <disk_write>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d006      	beq.n	800c0cc <f_lseek+0x4c0>
 800c0be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e029      	b.n	800c120 <f_lseek+0x514>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c0cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c0d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c0e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c0e6:	7858      	ldrb	r0, [r3, #1]
 800c0e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c0ec:	f103 015c 	add.w	r1, r3, #92	@ 0x5c
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800c0f8:	f7f5 f818 	bl	800112c <disk_read>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d006      	beq.n	800c110 <f_lseek+0x504>
 800c102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c106:	2201      	movs	r2, #1
 800c108:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c10c:	2301      	movs	r3, #1
 800c10e:	e007      	b.n	800c120 <f_lseek+0x514>
#endif
			fp->sect = nsect;
 800c110:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800c114:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800c118:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
		}
	}

	LEAVE_FF(fs, res);
 800c11c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 800c120:	4618      	mov	r0, r3
 800c122:	37b0      	adds	r7, #176	@ 0xb0
 800c124:	46bd      	mov	sp, r7
 800c126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c12a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b0be      	sub	sp, #248	@ 0xf8
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;
	DIR dj, sdj;
	DWORD dclst = 0;
 800c132:	2300      	movs	r3, #0
 800c134:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
	FFOBJID obj;
#endif
	DEF_NAMEBUFF

	/* Get logical drive and mount the volume if needed */
	res = mount_volume(&path, &fs, FA_WRITE);
 800c138:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800c13c:	1d3b      	adds	r3, r7, #4
 800c13e:	2202      	movs	r2, #2
 800c140:	4618      	mov	r0, r3
 800c142:	f7fe fb05 	bl	800a750 <mount_volume>
 800c146:	4603      	mov	r3, r0
 800c148:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
	if (res == FR_OK) {
 800c14c:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800c150:	2b00      	cmp	r3, #0
 800c152:	f040 80ac 	bne.w	800c2ae <f_unlink+0x184>
		dj.obj.fs = fs;
 800c156:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c15a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		INIT_NAMEBUFF(fs);
		res = follow_path(&dj, path);	/* Follow the path to the object */
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c164:	4611      	mov	r1, r2
 800c166:	4618      	mov	r0, r3
 800c168:	f7fd fffc 	bl	800a164 <follow_path>
 800c16c:	4603      	mov	r3, r0
 800c16e:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
		if (res == FR_OK) {
 800c172:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800c176:	2b00      	cmp	r3, #0
 800c178:	d112      	bne.n	800c1a0 <f_unlink+0x76>
			if (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME)) {
 800c17a:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800c17e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d003      	beq.n	800c18e <f_unlink+0x64>
				res = FR_INVALID_NAME;	/* It must be a real object */
 800c186:	2306      	movs	r3, #6
 800c188:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
 800c18c:	e008      	b.n	800c1a0 <f_unlink+0x76>
			} else if (dj.obj.attr & AM_RDO) {
 800c18e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800c192:	f003 0301 	and.w	r3, r3, #1
 800c196:	2b00      	cmp	r3, #0
 800c198:	d002      	beq.n	800c1a0 <f_unlink+0x76>
				res = FR_DENIED;		/* The object must not be read-only */
 800c19a:	2307      	movs	r3, #7
 800c19c:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
			} else {
				res = chk_share(&dj, 2);	/* Check if the object is in use */
#endif
			}
		}
		if (res == FR_OK) {		/* The object is accessible */
 800c1a0:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d157      	bne.n	800c258 <f_unlink+0x12e>
#if FF_FS_EXFAT
			obj.fs = fs;
 800c1a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c1ac:	60bb      	str	r3, [r7, #8]
			if (fs->fs_type == FS_EXFAT) {
 800c1ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	2b04      	cmp	r3, #4
 800c1b6:	d109      	bne.n	800c1cc <f_unlink+0xa2>
				init_alloc_info(&obj, 0);
 800c1b8:	f107 0308 	add.w	r3, r7, #8
 800c1bc:	2100      	movs	r1, #0
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7fd f8b2 	bl	8009328 <init_alloc_info>
				dclst = obj.sclust;
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c1ca:	e009      	b.n	800c1e0 <f_unlink+0xb6>
			} else
#endif
			{
				dclst = ld_clust(fs, dj.dir);
 800c1cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c1d0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c1d4:	4611      	mov	r1, r2
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fc fd36 	bl	8008c48 <ld_clust>
 800c1dc:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
			}
			if (dj.obj.attr & AM_DIR) {		/* Is the object a sub-directory? */
 800c1e0:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800c1e4:	f003 0310 	and.w	r3, r3, #16
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d035      	beq.n	800c258 <f_unlink+0x12e>
				if (dclst == fs->cdir) {
					res = FR_DENIED;		/* Current directory cannot be removed */
				} else
#endif
				{
					sdj.obj.fs = fs;		/* Open the sub-directory */
 800c1ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c1f0:	63bb      	str	r3, [r7, #56]	@ 0x38
					sdj.obj.sclust = dclst;
 800c1f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c1f6:	643b      	str	r3, [r7, #64]	@ 0x40
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800c1f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	2b04      	cmp	r3, #4
 800c200:	d106      	bne.n	800c210 <f_unlink+0xe6>
						sdj.obj.objsize = obj.objsize;
 800c202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c206:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
						sdj.obj.stat = obj.stat;
 800c20a:	7bfb      	ldrb	r3, [r7, #15]
 800c20c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					}
#endif
					res = dir_sdi(&sdj, 0);
 800c210:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c214:	2100      	movs	r1, #0
 800c216:	4618      	mov	r0, r3
 800c218:	f7fc fb6b 	bl	80088f2 <dir_sdi>
 800c21c:	4603      	mov	r3, r0
 800c21e:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
					if (res == FR_OK) {
 800c222:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800c226:	2b00      	cmp	r3, #0
 800c228:	d116      	bne.n	800c258 <f_unlink+0x12e>
						res = DIR_READ_FILE(&sdj);			/* Check if the sub-directory is empty */
 800c22a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c22e:	2100      	movs	r1, #0
 800c230:	4618      	mov	r0, r3
 800c232:	f7fd f9b8 	bl	80095a6 <dir_read>
 800c236:	4603      	mov	r3, r0
 800c238:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
						if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800c23c:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800c240:	2b00      	cmp	r3, #0
 800c242:	d102      	bne.n	800c24a <f_unlink+0x120>
 800c244:	2307      	movs	r3, #7
 800c246:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800c24a:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800c24e:	2b04      	cmp	r3, #4
 800c250:	d102      	bne.n	800c258 <f_unlink+0x12e>
 800c252:	2300      	movs	r3, #0
 800c254:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
					}
				}
			}
		}
		if (res == FR_OK) {		/* It is ready to remove the object */
 800c258:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d126      	bne.n	800c2ae <f_unlink+0x184>
			res = dir_remove(&dj);				/* Remove the directory entry */
 800c260:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c264:	4618      	mov	r0, r3
 800c266:	f7fd fd47 	bl	8009cf8 <dir_remove>
 800c26a:	4603      	mov	r3, r0
 800c26c:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
			if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 800c270:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10e      	bne.n	800c296 <f_unlink+0x16c>
 800c278:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00a      	beq.n	800c296 <f_unlink+0x16c>
#if FF_FS_EXFAT
				res = remove_chain(&obj, dclst, 0);
 800c280:	f107 0308 	add.w	r3, r7, #8
 800c284:	2200      	movs	r2, #0
 800c286:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fc f8b9 	bl	8008402 <remove_chain>
 800c290:	4603      	mov	r3, r0
 800c292:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
#else
				res = remove_chain(&dj.obj, dclst, 0);
#endif
			}
			if (res == FR_OK) res = sync_fs(fs);
 800c296:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d107      	bne.n	800c2ae <f_unlink+0x184>
 800c29e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fb fb8c 	bl	80079c0 <sync_fs>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
		}
		FREE_NAMEBUFF();
	}

	LEAVE_FF(fs, res);
 800c2ae:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	37f8      	adds	r7, #248	@ 0xf8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800c2ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2bc:	b0c5      	sub	sp, #276	@ 0x114
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c2c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c2c8:	6018      	str	r0, [r3, #0]
 800c2ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c2ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c2d2:	6019      	str	r1, [r3, #0]
	DIR djo, djn;
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	DEF_NAMEBUFF


	get_ldnumber(&path_new);	/* Snip the drive number of new name off */
 800c2d4:	463b      	mov	r3, r7
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fd ffc0 	bl	800a25c <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800c2dc:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 800c2e0:	1d3b      	adds	r3, r7, #4
 800c2e2:	2202      	movs	r2, #2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fe fa33 	bl	800a750 <mount_volume>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	if (res == FR_OK) {
 800c2f0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f040 81b4 	bne.w	800c662 <f_rename+0x3a8>
		djo.obj.fs = fs;
 800c2fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c2fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		INIT_NAMEBUFF(fs);
		res = follow_path(&djo, path_old);	/* Check old object */
 800c302:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c306:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800c310:	4611      	mov	r1, r2
 800c312:	4618      	mov	r0, r3
 800c314:	f7fd ff26 	bl	800a164 <follow_path>
 800c318:	4603      	mov	r3, r0
 800c31a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		if (res == FR_OK) {
 800c31e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800c322:	2b00      	cmp	r3, #0
 800c324:	d108      	bne.n	800c338 <f_rename+0x7e>
			if (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME)) {
 800c326:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800c32a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d002      	beq.n	800c338 <f_rename+0x7e>
				res = FR_INVALID_NAME;		/* Object must not be a dot name or blank name */
 800c332:	2306      	movs	r3, #6
 800c334:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
			} else {
				res = chk_share(&djo, 2);	/* Check if the object is in use */
#endif
			}
		}
		if (res == FR_OK) {					/* It is ready to rename the object */
 800c338:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f040 8190 	bne.w	800c662 <f_rename+0x3a8>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
 800c342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	2b04      	cmp	r3, #4
 800c34a:	f040 80b6 	bne.w	800c4ba <f_rename+0x200>
				if (i <= fs->xcwds.depth) {
					res = FR_DENIED;	/* Reject to rename a sub-dir in the current dir path */
				} else
#endif
				{
					memcpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
 800c34e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c352:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c354:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c35c:	4614      	mov	r4, r2
 800c35e:	461e      	mov	r6, r3
 800c360:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 800c364:	4635      	mov	r5, r6
 800c366:	4623      	mov	r3, r4
 800c368:	6818      	ldr	r0, [r3, #0]
 800c36a:	6859      	ldr	r1, [r3, #4]
 800c36c:	689a      	ldr	r2, [r3, #8]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c372:	3410      	adds	r4, #16
 800c374:	3610      	adds	r6, #16
 800c376:	4564      	cmp	r4, ip
 800c378:	d1f4      	bne.n	800c364 <f_rename+0xaa>
					memcpy(&djn, &djo, sizeof djn);
 800c37a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c37e:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800c382:	2258      	movs	r2, #88	@ 0x58
 800c384:	4618      	mov	r0, r3
 800c386:	f004 fd75 	bl	8010e74 <memcpy>
					res = follow_path(&djn, path_new);		/* Check if new object name collides with an existing one */
 800c38a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c38e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c392:	681a      	ldr	r2, [r3, #0]
 800c394:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c398:	4611      	mov	r1, r2
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fd fee2 	bl	800a164 <follow_path>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
				}
				if (res == FR_OK) {					/* Is new name already in use by another object? */
 800c3a6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10e      	bne.n	800c3cc <f_rename+0x112>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800c3ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c3b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d106      	bne.n	800c3c6 <f_rename+0x10c>
 800c3b8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c3ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d101      	bne.n	800c3c6 <f_rename+0x10c>
 800c3c2:	2304      	movs	r3, #4
 800c3c4:	e000      	b.n	800c3c8 <f_rename+0x10e>
 800c3c6:	2308      	movs	r3, #8
 800c3c8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
				}
				if (res == FR_NO_FILE) { 			/* It is a valid path and no name collision */
 800c3cc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800c3d0:	2b04      	cmp	r3, #4
 800c3d2:	f040 812e 	bne.w	800c632 <f_rename+0x378>
					res = dir_register(&djn);		/* Register the new entry */
 800c3d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fd fad8 	bl	8009990 <dir_register>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
					if (res == FR_OK) {
 800c3e6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f040 8121 	bne.w	800c632 <f_rename+0x378>
						BYTE nf, nn;
						WORD nh;

						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];	/* Save name length and hash */
 800c3f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c3f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3f6:	785b      	ldrb	r3, [r3, #1]
 800c3f8:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800c3fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c402:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c406:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
						nh = ld_16(fs->dirbuf + XDIR_NameHash);
 800c40a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c40e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c410:	3324      	adds	r3, #36	@ 0x24
 800c412:	4618      	mov	r0, r3
 800c414:	f7fa fff8 	bl	8007408 <ld_16>
 800c418:	4603      	mov	r3, r0
 800c41a:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
						memcpy(fs->dirbuf, buf, SZDIRE * 2);	/* Restore 85+C0 entry */
 800c41e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c422:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c424:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c42c:	461c      	mov	r4, r3
 800c42e:	4694      	mov	ip, r2
 800c430:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 800c434:	4665      	mov	r5, ip
 800c436:	4626      	mov	r6, r4
 800c438:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c43a:	6028      	str	r0, [r5, #0]
 800c43c:	6069      	str	r1, [r5, #4]
 800c43e:	60aa      	str	r2, [r5, #8]
 800c440:	60eb      	str	r3, [r5, #12]
 800c442:	3410      	adds	r4, #16
 800c444:	f10c 0c10 	add.w	ip, ip, #16
 800c448:	4574      	cmp	r4, lr
 800c44a:	d1f3      	bne.n	800c434 <f_rename+0x17a>
						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;	/* Restore name length and hash */
 800c44c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c452:	3301      	adds	r3, #1
 800c454:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 800c458:	701a      	strb	r2, [r3, #0]
 800c45a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c45e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c460:	3323      	adds	r3, #35	@ 0x23
 800c462:	f897 20fe 	ldrb.w	r2, [r7, #254]	@ 0xfe
 800c466:	701a      	strb	r2, [r3, #0]
						st_16(fs->dirbuf + XDIR_NameHash, nh);
 800c468:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c46c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c46e:	3324      	adds	r3, #36	@ 0x24
 800c470:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 800c474:	4611      	mov	r1, r2
 800c476:	4618      	mov	r0, r3
 800c478:	f7fb f8dd 	bl	8007636 <st_16>
						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 800c47c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c482:	3304      	adds	r3, #4
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	f003 0310 	and.w	r3, r3, #16
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10c      	bne.n	800c4a8 <f_rename+0x1ee>
 800c48e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c494:	3304      	adds	r3, #4
 800c496:	781a      	ldrb	r2, [r3, #0]
 800c498:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c49c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c49e:	3304      	adds	r3, #4
 800c4a0:	f042 0220 	orr.w	r2, r2, #32
 800c4a4:	b2d2      	uxtb	r2, r2
 800c4a6:	701a      	strb	r2, [r3, #0]
/* Start of critical section where an interruption can cause a cross-link */
						res = store_xdir(&djn);
 800c4a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7fc ffb6 	bl	800941e <store_xdir>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800c4b8:	e0bb      	b.n	800c632 <f_rename+0x378>
					}
				}
			} else
#endif
			{	/* At FAT/FAT32 volume */
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
 800c4ba:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800c4be:	f107 0308 	add.w	r3, r7, #8
 800c4c2:	2220      	movs	r2, #32
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f004 fcd5 	bl	8010e74 <memcpy>
				memcpy(&djn, &djo, sizeof djn);			/* Duplicate the directory object */
 800c4ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c4ce:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800c4d2:	2258      	movs	r2, #88	@ 0x58
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f004 fccd 	bl	8010e74 <memcpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800c4da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c4de:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fd fe3a 	bl	800a164 <follow_path>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
				if (res == FR_OK) {						/* Is new name already in use by another object? */
 800c4f6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d10e      	bne.n	800c51c <f_rename+0x262>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800c4fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c500:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c504:	429a      	cmp	r2, r3
 800c506:	d106      	bne.n	800c516 <f_rename+0x25c>
 800c508:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c50a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c50e:	429a      	cmp	r2, r3
 800c510:	d101      	bne.n	800c516 <f_rename+0x25c>
 800c512:	2304      	movs	r3, #4
 800c514:	e000      	b.n	800c518 <f_rename+0x25e>
 800c516:	2308      	movs	r3, #8
 800c518:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800c51c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800c520:	2b04      	cmp	r3, #4
 800c522:	f040 8086 	bne.w	800c632 <f_rename+0x378>
					res = dir_register(&djn);			/* Register the new entry */
 800c526:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7fd fa30 	bl	8009990 <dir_register>
 800c530:	4603      	mov	r3, r0
 800c532:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
					if (res == FR_OK) {
 800c536:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d179      	bne.n	800c632 <f_rename+0x378>
						dir = djn.dir;					/* Copy directory entry of the object except name */
 800c53e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c542:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
						memcpy(dir + 13, buf + 13, SZDIRE - 13);
 800c546:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c54a:	f103 000d 	add.w	r0, r3, #13
 800c54e:	f107 0308 	add.w	r3, r7, #8
 800c552:	330d      	adds	r3, #13
 800c554:	2213      	movs	r2, #19
 800c556:	4619      	mov	r1, r3
 800c558:	f004 fc8c 	bl	8010e74 <memcpy>
						dir[DIR_Attr] = buf[DIR_Attr];
 800c55c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c560:	330b      	adds	r3, #11
 800c562:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800c566:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800c56a:	7ad2      	ldrb	r2, [r2, #11]
 800c56c:	701a      	strb	r2, [r3, #0]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 800c56e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c572:	330b      	adds	r3, #11
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	f003 0310 	and.w	r3, r3, #16
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10a      	bne.n	800c594 <f_rename+0x2da>
 800c57e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c582:	330b      	adds	r3, #11
 800c584:	781a      	ldrb	r2, [r3, #0]
 800c586:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c58a:	330b      	adds	r3, #11
 800c58c:	f042 0220 	orr.w	r2, r2, #32
 800c590:	b2d2      	uxtb	r2, r2
 800c592:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800c594:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c598:	2201      	movs	r2, #1
 800c59a:	711a      	strb	r2, [r3, #4]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory being moved if needed */
 800c59c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c5a0:	330b      	adds	r3, #11
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	f003 0310 	and.w	r3, r3, #16
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d042      	beq.n	800c632 <f_rename+0x378>
 800c5ac:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c5b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d03d      	beq.n	800c632 <f_rename+0x378>
							LBA_t sect = clst2sect(fs, ld_clust(fs, dir));
 800c5b6:	f8d7 40f8 	ldr.w	r4, [r7, #248]	@ 0xf8
 800c5ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c5be:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fc fb40 	bl	8008c48 <ld_clust>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f7fb faf1 	bl	8007bb4 <clst2sect>
 800c5d2:	e9c7 0140 	strd	r0, r1, [r7, #256]	@ 0x100

							if (sect == 0) {
 800c5d6:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	d103      	bne.n	800c5e6 <f_rename+0x32c>
								res = FR_INT_ERR;
 800c5de:	2302      	movs	r3, #2
 800c5e0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800c5e4:	e025      	b.n	800c632 <f_rename+0x378>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
 800c5e6:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800c5ea:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800c5ee:	4608      	mov	r0, r1
 800c5f0:	f7fb f9ad 	bl	800794e <move_window>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
								dir = fs->win + SZDIRE * 1;	/* Pointer to .. entry */
 800c5fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c5fe:	3354      	adds	r3, #84	@ 0x54
 800c600:	3320      	adds	r3, #32
 800c602:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
								if (res == FR_OK && dir[1] == '.') {
 800c606:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d111      	bne.n	800c632 <f_rename+0x378>
 800c60e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800c612:	3301      	adds	r3, #1
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	2b2e      	cmp	r3, #46	@ 0x2e
 800c618:	d10b      	bne.n	800c632 <f_rename+0x378>
									st_clust(fs, dir, djn.obj.sclust);
 800c61a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c61e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c620:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 800c624:	4618      	mov	r0, r3
 800c626:	f7fc fb2e 	bl	8008c86 <st_clust>
									fs->wflag = 1;
 800c62a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c62e:	2201      	movs	r2, #1
 800c630:	711a      	strb	r2, [r3, #4]
							}
						}
					}
				}
			}
			if (res == FR_OK) {		/* New entry has been created */
 800c632:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800c636:	2b00      	cmp	r3, #0
 800c638:	d113      	bne.n	800c662 <f_rename+0x3a8>
				res = dir_remove(&djo);	/* Remove old entry */
 800c63a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800c63e:	4618      	mov	r0, r3
 800c640:	f7fd fb5a 	bl	8009cf8 <dir_remove>
 800c644:	4603      	mov	r3, r0
 800c646:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
				if (res == FR_OK) {
 800c64a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d107      	bne.n	800c662 <f_rename+0x3a8>
					res = sync_fs(fs);
 800c652:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c656:	4618      	mov	r0, r3
 800c658:	f7fb f9b2 	bl	80079c0 <sync_fs>
 800c65c:	4603      	mov	r3, r0
 800c65e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
/* End of the critical section */
		}
		FREE_NAMEBUFF();
	}

	LEAVE_FF(fs, res);
 800c662:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
}
 800c666:	4618      	mov	r0, r3
 800c668:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c670 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 800c670:	b480      	push	{r7}
 800c672:	b085      	sub	sp, #20
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	460b      	mov	r3, r1
 800c67a:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 800c67c:	2300      	movs	r3, #0
 800c67e:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 800c680:	4b17      	ldr	r3, [pc, #92]	@ (800c6e0 <ff_uni2oem+0x70>)
 800c682:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b7f      	cmp	r3, #127	@ 0x7f
 800c688:	d802      	bhi.n	800c690 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	81fb      	strh	r3, [r7, #14]
 800c68e:	e01f      	b.n	800c6d0 <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c696:	d21b      	bcs.n	800c6d0 <ff_uni2oem+0x60>
 800c698:	887b      	ldrh	r3, [r7, #2]
 800c69a:	f240 12b5 	movw	r2, #437	@ 0x1b5
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d116      	bne.n	800c6d0 <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	81fb      	strh	r3, [r7, #14]
 800c6a6:	e002      	b.n	800c6ae <ff_uni2oem+0x3e>
 800c6a8:	89fb      	ldrh	r3, [r7, #14]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	81fb      	strh	r3, [r7, #14]
 800c6ae:	89fb      	ldrh	r3, [r7, #14]
 800c6b0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6b2:	d808      	bhi.n	800c6c6 <ff_uni2oem+0x56>
 800c6b4:	89fb      	ldrh	r3, [r7, #14]
 800c6b6:	005b      	lsls	r3, r3, #1
 800c6b8:	68ba      	ldr	r2, [r7, #8]
 800c6ba:	4413      	add	r3, r2
 800c6bc:	881b      	ldrh	r3, [r3, #0]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d1f0      	bne.n	800c6a8 <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 800c6c6:	89fb      	ldrh	r3, [r7, #14]
 800c6c8:	3380      	adds	r3, #128	@ 0x80
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c6d0:	89fb      	ldrh	r3, [r7, #14]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3714      	adds	r7, #20
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	08011390 	.word	0x08011390

0800c6e4 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	460a      	mov	r2, r1
 800c6ee:	80fb      	strh	r3, [r7, #6]
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c738 <ff_oem2uni+0x54>)
 800c6fa:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 800c6fc:	88fb      	ldrh	r3, [r7, #6]
 800c6fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800c700:	d802      	bhi.n	800c708 <ff_oem2uni+0x24>
		c = oem;
 800c702:	88fb      	ldrh	r3, [r7, #6]
 800c704:	81fb      	strh	r3, [r7, #14]
 800c706:	e00f      	b.n	800c728 <ff_oem2uni+0x44>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 800c708:	88bb      	ldrh	r3, [r7, #4]
 800c70a:	f240 12b5 	movw	r2, #437	@ 0x1b5
 800c70e:	4293      	cmp	r3, r2
 800c710:	d10a      	bne.n	800c728 <ff_oem2uni+0x44>
			if (oem < 0x100) c = p[oem - 0x80];
 800c712:	88fb      	ldrh	r3, [r7, #6]
 800c714:	2bff      	cmp	r3, #255	@ 0xff
 800c716:	d807      	bhi.n	800c728 <ff_oem2uni+0x44>
 800c718:	88fa      	ldrh	r2, [r7, #6]
 800c71a:	4b08      	ldr	r3, [pc, #32]	@ (800c73c <ff_oem2uni+0x58>)
 800c71c:	4413      	add	r3, r2
 800c71e:	005b      	lsls	r3, r3, #1
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	4413      	add	r3, r2
 800c724:	881b      	ldrh	r3, [r3, #0]
 800c726:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c728:	89fb      	ldrh	r3, [r7, #14]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3714      	adds	r7, #20
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	08011390 	.word	0x08011390
 800c73c:	7fffff80 	.word	0x7fffff80

0800c740 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 800c740:	b480      	push	{r7}
 800c742:	b087      	sub	sp, #28
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c74e:	d27d      	bcs.n	800c84c <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 800c754:	8a7b      	ldrh	r3, [r7, #18]
 800c756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c75a:	d201      	bcs.n	800c760 <ff_wtoupper+0x20>
 800c75c:	4b3f      	ldr	r3, [pc, #252]	@ (800c85c <ff_wtoupper+0x11c>)
 800c75e:	e000      	b.n	800c762 <ff_wtoupper+0x22>
 800c760:	4b3f      	ldr	r3, [pc, #252]	@ (800c860 <ff_wtoupper+0x120>)
 800c762:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	1c9a      	adds	r2, r3, #2
 800c768:	617a      	str	r2, [r7, #20]
 800c76a:	881b      	ldrh	r3, [r3, #0]
 800c76c:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 800c76e:	8a3b      	ldrh	r3, [r7, #16]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d069      	beq.n	800c848 <ff_wtoupper+0x108>
 800c774:	8a7a      	ldrh	r2, [r7, #18]
 800c776:	8a3b      	ldrh	r3, [r7, #16]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d365      	bcc.n	800c848 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	1c9a      	adds	r2, r3, #2
 800c780:	617a      	str	r2, [r7, #20]
 800c782:	881b      	ldrh	r3, [r3, #0]
 800c784:	81fb      	strh	r3, [r7, #14]
 800c786:	89fb      	ldrh	r3, [r7, #14]
 800c788:	0a1b      	lsrs	r3, r3, #8
 800c78a:	81bb      	strh	r3, [r7, #12]
 800c78c:	89fb      	ldrh	r3, [r7, #14]
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 800c792:	8a7a      	ldrh	r2, [r7, #18]
 800c794:	8a39      	ldrh	r1, [r7, #16]
 800c796:	89fb      	ldrh	r3, [r7, #14]
 800c798:	440b      	add	r3, r1
 800c79a:	429a      	cmp	r2, r3
 800c79c:	da4a      	bge.n	800c834 <ff_wtoupper+0xf4>
				switch (cmd) {
 800c79e:	89bb      	ldrh	r3, [r7, #12]
 800c7a0:	2b08      	cmp	r3, #8
 800c7a2:	d850      	bhi.n	800c846 <ff_wtoupper+0x106>
 800c7a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7ac <ff_wtoupper+0x6c>)
 800c7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7aa:	bf00      	nop
 800c7ac:	0800c7d1 	.word	0x0800c7d1
 800c7b0:	0800c7e3 	.word	0x0800c7e3
 800c7b4:	0800c7f9 	.word	0x0800c7f9
 800c7b8:	0800c801 	.word	0x0800c801
 800c7bc:	0800c809 	.word	0x0800c809
 800c7c0:	0800c811 	.word	0x0800c811
 800c7c4:	0800c819 	.word	0x0800c819
 800c7c8:	0800c821 	.word	0x0800c821
 800c7cc:	0800c829 	.word	0x0800c829
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 800c7d0:	8a7a      	ldrh	r2, [r7, #18]
 800c7d2:	8a3b      	ldrh	r3, [r7, #16]
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	005b      	lsls	r3, r3, #1
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	4413      	add	r3, r2
 800c7dc:	881b      	ldrh	r3, [r3, #0]
 800c7de:	827b      	strh	r3, [r7, #18]
 800c7e0:	e027      	b.n	800c832 <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 800c7e2:	8a7a      	ldrh	r2, [r7, #18]
 800c7e4:	8a3b      	ldrh	r3, [r7, #16]
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	8a7a      	ldrh	r2, [r7, #18]
 800c7f2:	1ad3      	subs	r3, r2, r3
 800c7f4:	827b      	strh	r3, [r7, #18]
 800c7f6:	e01c      	b.n	800c832 <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 800c7f8:	8a7b      	ldrh	r3, [r7, #18]
 800c7fa:	3b10      	subs	r3, #16
 800c7fc:	827b      	strh	r3, [r7, #18]
 800c7fe:	e018      	b.n	800c832 <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 800c800:	8a7b      	ldrh	r3, [r7, #18]
 800c802:	3b20      	subs	r3, #32
 800c804:	827b      	strh	r3, [r7, #18]
 800c806:	e014      	b.n	800c832 <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 800c808:	8a7b      	ldrh	r3, [r7, #18]
 800c80a:	3b30      	subs	r3, #48	@ 0x30
 800c80c:	827b      	strh	r3, [r7, #18]
 800c80e:	e010      	b.n	800c832 <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 800c810:	8a7b      	ldrh	r3, [r7, #18]
 800c812:	3b1a      	subs	r3, #26
 800c814:	827b      	strh	r3, [r7, #18]
 800c816:	e00c      	b.n	800c832 <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 800c818:	8a7b      	ldrh	r3, [r7, #18]
 800c81a:	3308      	adds	r3, #8
 800c81c:	827b      	strh	r3, [r7, #18]
 800c81e:	e008      	b.n	800c832 <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 800c820:	8a7b      	ldrh	r3, [r7, #18]
 800c822:	3b50      	subs	r3, #80	@ 0x50
 800c824:	827b      	strh	r3, [r7, #18]
 800c826:	e004      	b.n	800c832 <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 800c828:	8a7b      	ldrh	r3, [r7, #18]
 800c82a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800c82e:	827b      	strh	r3, [r7, #18]
 800c830:	bf00      	nop
				}
				break;
 800c832:	e008      	b.n	800c846 <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 800c834:	89bb      	ldrh	r3, [r7, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d194      	bne.n	800c764 <ff_wtoupper+0x24>
 800c83a:	89fb      	ldrh	r3, [r7, #14]
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	4413      	add	r3, r2
 800c842:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 800c844:	e78e      	b.n	800c764 <ff_wtoupper+0x24>
				break;
 800c846:	bf00      	nop
		}
		uni = uc;
 800c848:	8a7b      	ldrh	r3, [r7, #18]
 800c84a:	607b      	str	r3, [r7, #4]
	}

	return uni;
 800c84c:	687b      	ldr	r3, [r7, #4]
}
 800c84e:	4618      	mov	r0, r3
 800c850:	371c      	adds	r7, #28
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop
 800c85c:	08011490 	.word	0x08011490
 800c860:	08011684 	.word	0x08011684

0800c864 <tuh_msc_get_block_count>:
uint8_t tuh_msc_get_maxlun(uint8_t dev_addr) {
  msch_interface_t* p_msc = get_itf(dev_addr);
  return p_msc->max_lun;
}

uint32_t tuh_msc_get_block_count(uint8_t dev_addr, uint8_t lun) {
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	4603      	mov	r3, r0
 800c86c:	460a      	mov	r2, r1
 800c86e:	71fb      	strb	r3, [r7, #7]
 800c870:	4613      	mov	r3, r2
 800c872:	71bb      	strb	r3, [r7, #6]
 800c874:	79fb      	ldrb	r3, [r7, #7]
 800c876:	72fb      	strb	r3, [r7, #11]
  return &_msch_itf[daddr - 1];
 800c878:	7afb      	ldrb	r3, [r7, #11]
 800c87a:	1e5a      	subs	r2, r3, #1
 800c87c:	4613      	mov	r3, r2
 800c87e:	00db      	lsls	r3, r3, #3
 800c880:	1a9b      	subs	r3, r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4a07      	ldr	r2, [pc, #28]	@ (800c8a4 <tuh_msc_get_block_count+0x40>)
 800c886:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(dev_addr);
 800c888:	60fb      	str	r3, [r7, #12]
  return p_msc->capacity[lun].block_count;
 800c88a:	79bb      	ldrb	r3, [r7, #6]
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	3302      	adds	r3, #2
 800c890:	00db      	lsls	r3, r3, #3
 800c892:	4413      	add	r3, r2
 800c894:	689b      	ldr	r3, [r3, #8]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	24001b24 	.word	0x24001b24

0800c8a8 <tuh_msc_get_block_size>:

uint32_t tuh_msc_get_block_size(uint8_t dev_addr, uint8_t lun) {
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	460a      	mov	r2, r1
 800c8b2:	71fb      	strb	r3, [r7, #7]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	71bb      	strb	r3, [r7, #6]
 800c8b8:	79fb      	ldrb	r3, [r7, #7]
 800c8ba:	72fb      	strb	r3, [r7, #11]
  return &_msch_itf[daddr - 1];
 800c8bc:	7afb      	ldrb	r3, [r7, #11]
 800c8be:	1e5a      	subs	r2, r3, #1
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	00db      	lsls	r3, r3, #3
 800c8c4:	1a9b      	subs	r3, r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	4a07      	ldr	r2, [pc, #28]	@ (800c8e8 <tuh_msc_get_block_size+0x40>)
 800c8ca:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(dev_addr);
 800c8cc:	60fb      	str	r3, [r7, #12]
  return p_msc->capacity[lun].block_size;
 800c8ce:	79bb      	ldrb	r3, [r7, #6]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	3302      	adds	r3, #2
 800c8d4:	00db      	lsls	r3, r3, #3
 800c8d6:	4413      	add	r3, r2
 800c8d8:	685b      	ldr	r3, [r3, #4]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	24001b24 	.word	0x24001b24

0800c8ec <tuh_msc_mounted>:

bool tuh_msc_mounted(uint8_t dev_addr) {
 800c8ec:	b480      	push	{r7}
 800c8ee:	b085      	sub	sp, #20
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	71fb      	strb	r3, [r7, #7]
 800c8f6:	79fb      	ldrb	r3, [r7, #7]
 800c8f8:	72fb      	strb	r3, [r7, #11]
  return &_msch_itf[daddr - 1];
 800c8fa:	7afb      	ldrb	r3, [r7, #11]
 800c8fc:	1e5a      	subs	r2, r3, #1
 800c8fe:	4613      	mov	r3, r2
 800c900:	00db      	lsls	r3, r3, #3
 800c902:	1a9b      	subs	r3, r3, r2
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	4a06      	ldr	r2, [pc, #24]	@ (800c920 <tuh_msc_mounted+0x34>)
 800c908:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(dev_addr);
 800c90a:	60fb      	str	r3, [r7, #12]
  return p_msc->mounted;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	795b      	ldrb	r3, [r3, #5]
 800c910:	b2db      	uxtb	r3, r3
}
 800c912:	4618      	mov	r0, r3
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	24001b24 	.word	0x24001b24

0800c924 <cbw_init>:
}

//--------------------------------------------------------------------+
// PUBLIC API: SCSI COMMAND
//--------------------------------------------------------------------+
static inline void cbw_init(msc_cbw_t* cbw, uint8_t lun) {
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	460b      	mov	r3, r1
 800c92e:	70fb      	strb	r3, [r7, #3]
  tu_memclr(cbw, sizeof(msc_cbw_t));
 800c930:	221f      	movs	r2, #31
 800c932:	2100      	movs	r1, #0
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f004 fa64 	bl	8010e02 <memset>
  cbw->signature = MSC_CBW_SIGNATURE;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 800c942:	701a      	strb	r2, [r3, #0]
 800c944:	2200      	movs	r2, #0
 800c946:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 800c94a:	705a      	strb	r2, [r3, #1]
 800c94c:	2200      	movs	r2, #0
 800c94e:	f042 0242 	orr.w	r2, r2, #66	@ 0x42
 800c952:	709a      	strb	r2, [r3, #2]
 800c954:	2200      	movs	r2, #0
 800c956:	f042 0243 	orr.w	r2, r2, #67	@ 0x43
 800c95a:	70da      	strb	r2, [r3, #3]
  cbw->tag       = 0x54555342; // TUSB
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	f042 0242 	orr.w	r2, r2, #66	@ 0x42
 800c964:	711a      	strb	r2, [r3, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 800c96c:	715a      	strb	r2, [r3, #5]
 800c96e:	2200      	movs	r2, #0
 800c970:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 800c974:	719a      	strb	r2, [r3, #6]
 800c976:	2200      	movs	r2, #0
 800c978:	f042 0254 	orr.w	r2, r2, #84	@ 0x54
 800c97c:	71da      	strb	r2, [r3, #7]
  cbw->lun       = lun;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	78fa      	ldrb	r2, [r7, #3]
 800c982:	735a      	strb	r2, [r3, #13]
}
 800c984:	bf00      	nop
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <tuh_msc_scsi_command>:

bool tuh_msc_scsi_command(uint8_t daddr, msc_cbw_t const* cbw, void* data,
                          tuh_msc_complete_cb_t complete_cb, uintptr_t arg) {
 800c98c:	b5b0      	push	{r4, r5, r7, lr}
 800c98e:	b08c      	sub	sp, #48	@ 0x30
 800c990:	af02      	add	r7, sp, #8
 800c992:	60b9      	str	r1, [r7, #8]
 800c994:	607a      	str	r2, [r7, #4]
 800c996:	603b      	str	r3, [r7, #0]
 800c998:	4603      	mov	r3, r0
 800c99a:	73fb      	strb	r3, [r7, #15]
 800c99c:	7bfb      	ldrb	r3, [r7, #15]
 800c99e:	77fb      	strb	r3, [r7, #31]
  return &_msch_itf[daddr - 1];
 800c9a0:	7ffb      	ldrb	r3, [r7, #31]
 800c9a2:	1e5a      	subs	r2, r3, #1
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	00db      	lsls	r3, r3, #3
 800c9a8:	1a9b      	subs	r3, r3, r2
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	4a36      	ldr	r2, [pc, #216]	@ (800ca88 <tuh_msc_scsi_command+0xfc>)
 800c9ae:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(daddr);
 800c9b0:	627b      	str	r3, [r7, #36]	@ 0x24
  TU_VERIFY(p_msc->configured);
 800c9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b4:	791b      	ldrb	r3, [r3, #4]
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	f083 0301 	eor.w	r3, r3, #1
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d001      	beq.n	800c9c6 <tuh_msc_scsi_command+0x3a>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	e05b      	b.n	800ca7e <tuh_msc_scsi_command+0xf2>

  // claim endpoint
  TU_VERIFY(usbh_edpt_claim(daddr, p_msc->ep_out));
 800c9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c8:	789a      	ldrb	r2, [r3, #2]
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
 800c9cc:	4611      	mov	r1, r2
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f001 fd34 	bl	800e43c <usbh_edpt_claim>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	f083 0301 	eor.w	r3, r3, #1
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <tuh_msc_scsi_command+0x58>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	e04c      	b.n	800ca7e <tuh_msc_scsi_command+0xf2>
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
 800c9e6:	757b      	strb	r3, [r7, #21]
  return &_msch_epbuf[daddr - 1];
 800c9e8:	7d7b      	ldrb	r3, [r7, #21]
 800c9ea:	1e5a      	subs	r2, r3, #1
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	4413      	add	r3, r2
 800c9f2:	011b      	lsls	r3, r3, #4
 800c9f4:	4a25      	ldr	r2, [pc, #148]	@ (800ca8c <tuh_msc_scsi_command+0x100>)
 800c9f6:	4413      	add	r3, r2
  msch_epbuf_t* epbuf = get_epbuf(daddr);
 800c9f8:	623b      	str	r3, [r7, #32]

  epbuf->cbw = *cbw;
 800c9fa:	6a3a      	ldr	r2, [r7, #32]
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	4614      	mov	r4, r2
 800ca00:	461d      	mov	r5, r3
 800ca02:	6828      	ldr	r0, [r5, #0]
 800ca04:	6869      	ldr	r1, [r5, #4]
 800ca06:	68aa      	ldr	r2, [r5, #8]
 800ca08:	68eb      	ldr	r3, [r5, #12]
 800ca0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca0c:	6928      	ldr	r0, [r5, #16]
 800ca0e:	6969      	ldr	r1, [r5, #20]
 800ca10:	69aa      	ldr	r2, [r5, #24]
 800ca12:	c407      	stmia	r4!, {r0, r1, r2}
 800ca14:	8bab      	ldrh	r3, [r5, #28]
 800ca16:	7faa      	ldrb	r2, [r5, #30]
 800ca18:	8023      	strh	r3, [r4, #0]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	70a3      	strb	r3, [r4, #2]
  p_msc->buffer = data;
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	609a      	str	r2, [r3, #8]
  p_msc->complete_cb = complete_cb;
 800ca24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca26:	683a      	ldr	r2, [r7, #0]
 800ca28:	60da      	str	r2, [r3, #12]
  p_msc->complete_arg = arg;
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca2e:	611a      	str	r2, [r3, #16]
  p_msc->stage = MSC_STAGE_CMD;
 800ca30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca32:	2201      	movs	r2, #1
 800ca34:	719a      	strb	r2, [r3, #6]

  if (!usbh_edpt_xfer(daddr, p_msc->ep_out, (uint8_t*) &epbuf->cbw, sizeof(msc_cbw_t))) {
 800ca36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca38:	7899      	ldrb	r1, [r3, #2]
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	7bfa      	ldrb	r2, [r7, #15]
 800ca3e:	77ba      	strb	r2, [r7, #30]
 800ca40:	460a      	mov	r2, r1
 800ca42:	777a      	strb	r2, [r7, #29]
 800ca44:	61bb      	str	r3, [r7, #24]
 800ca46:	231f      	movs	r3, #31
 800ca48:	82fb      	strh	r3, [r7, #22]
bool usbh_edpt_xfer_with_callback(uint8_t dev_addr, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes,
                                  tuh_xfer_cb_t complete_cb, uintptr_t user_data);

TU_ATTR_ALWAYS_INLINE
static inline bool usbh_edpt_xfer(uint8_t dev_addr, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes) {
  return usbh_edpt_xfer_with_callback(dev_addr, ep_addr, buffer, total_bytes, NULL, 0);
 800ca4a:	8afb      	ldrh	r3, [r7, #22]
 800ca4c:	7f79      	ldrb	r1, [r7, #29]
 800ca4e:	7fb8      	ldrb	r0, [r7, #30]
 800ca50:	2200      	movs	r2, #0
 800ca52:	9201      	str	r2, [sp, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	9200      	str	r2, [sp, #0]
 800ca58:	69ba      	ldr	r2, [r7, #24]
 800ca5a:	f001 fd97 	bl	800e58c <usbh_edpt_xfer_with_callback>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	f083 0301 	eor.w	r3, r3, #1
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d008      	beq.n	800ca7c <tuh_msc_scsi_command+0xf0>
    usbh_edpt_release(daddr, p_msc->ep_out);
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6c:	789a      	ldrb	r2, [r3, #2]
 800ca6e:	7bfb      	ldrb	r3, [r7, #15]
 800ca70:	4611      	mov	r1, r2
 800ca72:	4618      	mov	r0, r3
 800ca74:	f001 fd3c 	bl	800e4f0 <usbh_edpt_release>
    return false;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e000      	b.n	800ca7e <tuh_msc_scsi_command+0xf2>
  }

  return true;
 800ca7c:	2301      	movs	r3, #1
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3728      	adds	r7, #40	@ 0x28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bdb0      	pop	{r4, r5, r7, pc}
 800ca86:	bf00      	nop
 800ca88:	24001b24 	.word	0x24001b24
 800ca8c:	24001b40 	.word	0x24001b40

0800ca90 <tuh_msc_read_capacity>:

bool tuh_msc_read_capacity(uint8_t dev_addr, uint8_t lun, scsi_read_capacity10_resp_t* response,
                           tuh_msc_complete_cb_t complete_cb, uintptr_t arg) {
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b090      	sub	sp, #64	@ 0x40
 800ca94:	af02      	add	r7, sp, #8
 800ca96:	60ba      	str	r2, [r7, #8]
 800ca98:	607b      	str	r3, [r7, #4]
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	73fb      	strb	r3, [r7, #15]
 800ca9e:	460b      	mov	r3, r1
 800caa0:	73bb      	strb	r3, [r7, #14]
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
 800caa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  return &_msch_itf[daddr - 1];
 800caa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800caac:	1e5a      	subs	r2, r3, #1
 800caae:	4613      	mov	r3, r2
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	1a9b      	subs	r3, r3, r2
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	4a16      	ldr	r2, [pc, #88]	@ (800cb10 <tuh_msc_read_capacity+0x80>)
 800cab8:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(dev_addr);
 800caba:	637b      	str	r3, [r7, #52]	@ 0x34
  TU_VERIFY(p_msc->configured);
 800cabc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cabe:	791b      	ldrb	r3, [r3, #4]
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	f083 0301 	eor.w	r3, r3, #1
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d001      	beq.n	800cad0 <tuh_msc_read_capacity+0x40>
 800cacc:	2300      	movs	r3, #0
 800cace:	e01b      	b.n	800cb08 <tuh_msc_read_capacity+0x78>

  msc_cbw_t cbw;
  cbw_init(&cbw, lun);
 800cad0:	7bba      	ldrb	r2, [r7, #14]
 800cad2:	f107 0314 	add.w	r3, r7, #20
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f7ff ff23 	bl	800c924 <cbw_init>

  cbw.total_bytes = sizeof(scsi_read_capacity10_resp_t);
 800cade:	2308      	movs	r3, #8
 800cae0:	61fb      	str	r3, [r7, #28]
  cbw.dir        = TUSB_DIR_IN_MASK;
 800cae2:	2380      	movs	r3, #128	@ 0x80
 800cae4:	f887 3020 	strb.w	r3, [r7, #32]
  cbw.cmd_len    = sizeof(scsi_read_capacity10_t);
 800cae8:	230a      	movs	r3, #10
 800caea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  cbw.command[0] = SCSI_CMD_READ_CAPACITY_10;
 800caee:	2325      	movs	r3, #37	@ 0x25
 800caf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  return tuh_msc_scsi_command(dev_addr, &cbw, response, complete_cb, arg);
 800caf4:	f107 0114 	add.w	r1, r7, #20
 800caf8:	7bf8      	ldrb	r0, [r7, #15]
 800cafa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	f7ff ff43 	bl	800c98c <tuh_msc_scsi_command>
 800cb06:	4603      	mov	r3, r0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3738      	adds	r7, #56	@ 0x38
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	24001b24 	.word	0x24001b24

0800cb14 <tuh_msc_inquiry>:

bool tuh_msc_inquiry(uint8_t dev_addr, uint8_t lun, scsi_inquiry_resp_t* response,
                     tuh_msc_complete_cb_t complete_cb, uintptr_t arg) {
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b092      	sub	sp, #72	@ 0x48
 800cb18:	af02      	add	r7, sp, #8
 800cb1a:	60ba      	str	r2, [r7, #8]
 800cb1c:	607b      	str	r3, [r7, #4]
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73fb      	strb	r3, [r7, #15]
 800cb22:	460b      	mov	r3, r1
 800cb24:	73bb      	strb	r3, [r7, #14]
 800cb26:	7bfb      	ldrb	r3, [r7, #15]
 800cb28:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  return &_msch_itf[daddr - 1];
 800cb2c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800cb30:	1e5a      	subs	r2, r3, #1
 800cb32:	4613      	mov	r3, r2
 800cb34:	00db      	lsls	r3, r3, #3
 800cb36:	1a9b      	subs	r3, r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	4a1f      	ldr	r2, [pc, #124]	@ (800cbb8 <tuh_msc_inquiry+0xa4>)
 800cb3c:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(dev_addr);
 800cb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TU_VERIFY(p_msc->mounted);
 800cb40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb42:	795b      	ldrb	r3, [r3, #5]
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	f083 0301 	eor.w	r3, r3, #1
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d001      	beq.n	800cb54 <tuh_msc_inquiry+0x40>
 800cb50:	2300      	movs	r3, #0
 800cb52:	e02c      	b.n	800cbae <tuh_msc_inquiry+0x9a>

  msc_cbw_t cbw;
  cbw_init(&cbw, lun);
 800cb54:	7bba      	ldrb	r2, [r7, #14]
 800cb56:	f107 031c 	add.w	r3, r7, #28
 800cb5a:	4611      	mov	r1, r2
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7ff fee1 	bl	800c924 <cbw_init>

  cbw.total_bytes = sizeof(scsi_inquiry_resp_t);
 800cb62:	2324      	movs	r3, #36	@ 0x24
 800cb64:	627b      	str	r3, [r7, #36]	@ 0x24
  cbw.dir         = TUSB_DIR_IN_MASK;
 800cb66:	2380      	movs	r3, #128	@ 0x80
 800cb68:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  cbw.cmd_len     = sizeof(scsi_inquiry_t);
 800cb6c:	2306      	movs	r3, #6
 800cb6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

  scsi_inquiry_t const cmd_inquiry = {
 800cb72:	f107 0314 	add.w	r3, r7, #20
 800cb76:	2200      	movs	r2, #0
 800cb78:	601a      	str	r2, [r3, #0]
 800cb7a:	809a      	strh	r2, [r3, #4]
 800cb7c:	2312      	movs	r3, #18
 800cb7e:	753b      	strb	r3, [r7, #20]
 800cb80:	2324      	movs	r3, #36	@ 0x24
 800cb82:	763b      	strb	r3, [r7, #24]
      .cmd_code     = SCSI_CMD_INQUIRY,
      .alloc_length = sizeof(scsi_inquiry_resp_t)
  };
  memcpy(cbw.command, &cmd_inquiry, cbw.cmd_len);
 800cb84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800cb88:	461a      	mov	r2, r3
 800cb8a:	f107 0114 	add.w	r1, r7, #20
 800cb8e:	f107 031c 	add.w	r3, r7, #28
 800cb92:	330f      	adds	r3, #15
 800cb94:	4618      	mov	r0, r3
 800cb96:	f004 f96d 	bl	8010e74 <memcpy>

  return tuh_msc_scsi_command(dev_addr, &cbw, response, complete_cb, arg);
 800cb9a:	f107 011c 	add.w	r1, r7, #28
 800cb9e:	7bf8      	ldrb	r0, [r7, #15]
 800cba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cba2:	9300      	str	r3, [sp, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	68ba      	ldr	r2, [r7, #8]
 800cba8:	f7ff fef0 	bl	800c98c <tuh_msc_scsi_command>
 800cbac:	4603      	mov	r3, r0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3740      	adds	r7, #64	@ 0x40
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	24001b24 	.word	0x24001b24

0800cbbc <tuh_msc_test_unit_ready>:

bool tuh_msc_test_unit_ready(uint8_t dev_addr, uint8_t lun, tuh_msc_complete_cb_t complete_cb, uintptr_t arg) {
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b090      	sub	sp, #64	@ 0x40
 800cbc0:	af02      	add	r7, sp, #8
 800cbc2:	60ba      	str	r2, [r7, #8]
 800cbc4:	607b      	str	r3, [r7, #4]
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	73fb      	strb	r3, [r7, #15]
 800cbca:	460b      	mov	r3, r1
 800cbcc:	73bb      	strb	r3, [r7, #14]
 800cbce:	7bfb      	ldrb	r3, [r7, #15]
 800cbd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  return &_msch_itf[daddr - 1];
 800cbd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cbd8:	1e5a      	subs	r2, r3, #1
 800cbda:	4613      	mov	r3, r2
 800cbdc:	00db      	lsls	r3, r3, #3
 800cbde:	1a9b      	subs	r3, r3, r2
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4a18      	ldr	r2, [pc, #96]	@ (800cc44 <tuh_msc_test_unit_ready+0x88>)
 800cbe4:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(dev_addr);
 800cbe6:	637b      	str	r3, [r7, #52]	@ 0x34
  TU_VERIFY(p_msc->configured);
 800cbe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbea:	791b      	ldrb	r3, [r3, #4]
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	f083 0301 	eor.w	r3, r3, #1
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <tuh_msc_test_unit_ready+0x40>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	e01e      	b.n	800cc3a <tuh_msc_test_unit_ready+0x7e>

  msc_cbw_t cbw;
  cbw_init(&cbw, lun);
 800cbfc:	7bba      	ldrb	r2, [r7, #14]
 800cbfe:	f107 0314 	add.w	r3, r7, #20
 800cc02:	4611      	mov	r1, r2
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff fe8d 	bl	800c924 <cbw_init>

  cbw.total_bytes = 0;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	61fb      	str	r3, [r7, #28]
  cbw.dir        = TUSB_DIR_OUT;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	f887 3020 	strb.w	r3, [r7, #32]
  cbw.cmd_len    = sizeof(scsi_test_unit_ready_t);
 800cc14:	2306      	movs	r3, #6
 800cc16:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  cbw.command[0] = SCSI_CMD_TEST_UNIT_READY;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  cbw.command[1] = lun; // according to wiki TODO need verification
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
 800cc22:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

  return tuh_msc_scsi_command(dev_addr, &cbw, NULL, complete_cb, arg);
 800cc26:	f107 0114 	add.w	r1, r7, #20
 800cc2a:	7bf8      	ldrb	r0, [r7, #15]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	2200      	movs	r2, #0
 800cc34:	f7ff feaa 	bl	800c98c <tuh_msc_scsi_command>
 800cc38:	4603      	mov	r3, r0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3738      	adds	r7, #56	@ 0x38
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	24001b24 	.word	0x24001b24

0800cc48 <tuh_msc_request_sense>:

bool tuh_msc_request_sense(uint8_t dev_addr, uint8_t lun, void* response,
                           tuh_msc_complete_cb_t complete_cb, uintptr_t arg) {
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b090      	sub	sp, #64	@ 0x40
 800cc4c:	af02      	add	r7, sp, #8
 800cc4e:	60ba      	str	r2, [r7, #8]
 800cc50:	607b      	str	r3, [r7, #4]
 800cc52:	4603      	mov	r3, r0
 800cc54:	73fb      	strb	r3, [r7, #15]
 800cc56:	460b      	mov	r3, r1
 800cc58:	73bb      	strb	r3, [r7, #14]
  msc_cbw_t cbw;
  cbw_init(&cbw, lun);
 800cc5a:	7bba      	ldrb	r2, [r7, #14]
 800cc5c:	f107 0318 	add.w	r3, r7, #24
 800cc60:	4611      	mov	r1, r2
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7ff fe5e 	bl	800c924 <cbw_init>

  cbw.total_bytes = 18; // TODO sense response
 800cc68:	2312      	movs	r3, #18
 800cc6a:	623b      	str	r3, [r7, #32]
  cbw.dir         = TUSB_DIR_IN_MASK;
 800cc6c:	2380      	movs	r3, #128	@ 0x80
 800cc6e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  cbw.cmd_len     = sizeof(scsi_request_sense_t);
 800cc72:	2306      	movs	r3, #6
 800cc74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  scsi_request_sense_t const cmd_request_sense = {
 800cc78:	f107 0310 	add.w	r3, r7, #16
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	601a      	str	r2, [r3, #0]
 800cc80:	809a      	strh	r2, [r3, #4]
 800cc82:	2303      	movs	r3, #3
 800cc84:	743b      	strb	r3, [r7, #16]
 800cc86:	2312      	movs	r3, #18
 800cc88:	753b      	strb	r3, [r7, #20]
      .cmd_code     = SCSI_CMD_REQUEST_SENSE,
      .alloc_length = 18
  };
  memcpy(cbw.command, &cmd_request_sense, cbw.cmd_len);
 800cc8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc8e:	461a      	mov	r2, r3
 800cc90:	f107 0110 	add.w	r1, r7, #16
 800cc94:	f107 0318 	add.w	r3, r7, #24
 800cc98:	330f      	adds	r3, #15
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f004 f8ea 	bl	8010e74 <memcpy>

  return tuh_msc_scsi_command(dev_addr, &cbw, response, complete_cb, arg);
 800cca0:	f107 0118 	add.w	r1, r7, #24
 800cca4:	7bf8      	ldrb	r0, [r7, #15]
 800cca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	f7ff fe6d 	bl	800c98c <tuh_msc_scsi_command>
 800ccb2:	4603      	mov	r3, r0
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3738      	adds	r7, #56	@ 0x38
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <tuh_msc_read10>:

bool tuh_msc_read10(uint8_t dev_addr, uint8_t lun, void* buffer, uint32_t lba, uint16_t block_count,
                    tuh_msc_complete_cb_t complete_cb, uintptr_t arg) {
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b092      	sub	sp, #72	@ 0x48
 800ccc0:	af02      	add	r7, sp, #8
 800ccc2:	60ba      	str	r2, [r7, #8]
 800ccc4:	607b      	str	r3, [r7, #4]
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	73fb      	strb	r3, [r7, #15]
 800ccca:	460b      	mov	r3, r1
 800cccc:	73bb      	strb	r3, [r7, #14]
 800ccce:	7bfb      	ldrb	r3, [r7, #15]
 800ccd0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  return &_msch_itf[daddr - 1];
 800ccd4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ccd8:	1e5a      	subs	r2, r3, #1
 800ccda:	4613      	mov	r3, r2
 800ccdc:	00db      	lsls	r3, r3, #3
 800ccde:	1a9b      	subs	r3, r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4a28      	ldr	r2, [pc, #160]	@ (800cd84 <tuh_msc_read10+0xc8>)
 800cce4:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(dev_addr);
 800cce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TU_VERIFY(p_msc->mounted);
 800cce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccea:	795b      	ldrb	r3, [r3, #5]
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	f083 0301 	eor.w	r3, r3, #1
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <tuh_msc_read10+0x40>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	e03e      	b.n	800cd7a <tuh_msc_read10+0xbe>

  msc_cbw_t cbw;
  cbw_init(&cbw, lun);
 800ccfc:	7bba      	ldrb	r2, [r7, #14]
 800ccfe:	f107 031c 	add.w	r3, r7, #28
 800cd02:	4611      	mov	r1, r2
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7ff fe0d 	bl	800c924 <cbw_init>

  cbw.total_bytes = block_count * p_msc->capacity[lun].block_size;
 800cd0a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800cd0e:	7bbb      	ldrb	r3, [r7, #14]
 800cd10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cd12:	3302      	adds	r3, #2
 800cd14:	00db      	lsls	r3, r3, #3
 800cd16:	440b      	add	r3, r1
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	fb02 f303 	mul.w	r3, r2, r3
 800cd1e:	627b      	str	r3, [r7, #36]	@ 0x24
  cbw.dir = TUSB_DIR_IN_MASK;
 800cd20:	2380      	movs	r3, #128	@ 0x80
 800cd22:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  cbw.cmd_len = sizeof(scsi_read10_t);
 800cd26:	230a      	movs	r3, #10
 800cd28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

  scsi_read10_t const cmd_read10 = {
 800cd2c:	f107 0310 	add.w	r3, r7, #16
 800cd30:	2200      	movs	r2, #0
 800cd32:	601a      	str	r2, [r3, #0]
 800cd34:	605a      	str	r2, [r3, #4]
 800cd36:	811a      	strh	r2, [r3, #8]
 800cd38:	2328      	movs	r3, #40	@ 0x28
 800cd3a:	743b      	strb	r3, [r7, #16]
      .cmd_code    = SCSI_CMD_READ_10,
      .lba         = tu_htonl(lba),
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	ba1b      	rev	r3, r3
  scsi_read10_t const cmd_read10 = {
 800cd40:	f8c7 3012 	str.w	r3, [r7, #18]
      .block_count = tu_htons(block_count)
 800cd44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800cd48:	ba5b      	rev16	r3, r3
 800cd4a:	b29b      	uxth	r3, r3
  scsi_read10_t const cmd_read10 = {
 800cd4c:	f8a7 3017 	strh.w	r3, [r7, #23]
  };
  memcpy(cbw.command, &cmd_read10, cbw.cmd_len);
 800cd50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800cd54:	461a      	mov	r2, r3
 800cd56:	f107 0110 	add.w	r1, r7, #16
 800cd5a:	f107 031c 	add.w	r3, r7, #28
 800cd5e:	330f      	adds	r3, #15
 800cd60:	4618      	mov	r0, r3
 800cd62:	f004 f887 	bl	8010e74 <memcpy>

  return tuh_msc_scsi_command(dev_addr, &cbw, buffer, complete_cb, arg);
 800cd66:	f107 011c 	add.w	r1, r7, #28
 800cd6a:	7bf8      	ldrb	r0, [r7, #15]
 800cd6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	f7ff fe0a 	bl	800c98c <tuh_msc_scsi_command>
 800cd78:	4603      	mov	r3, r0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3740      	adds	r7, #64	@ 0x40
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	24001b24 	.word	0x24001b24

0800cd88 <tuh_msc_write10>:

bool tuh_msc_write10(uint8_t dev_addr, uint8_t lun, void const* buffer, uint32_t lba, uint16_t block_count,
                     tuh_msc_complete_cb_t complete_cb, uintptr_t arg) {
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b092      	sub	sp, #72	@ 0x48
 800cd8c:	af02      	add	r7, sp, #8
 800cd8e:	60ba      	str	r2, [r7, #8]
 800cd90:	607b      	str	r3, [r7, #4]
 800cd92:	4603      	mov	r3, r0
 800cd94:	73fb      	strb	r3, [r7, #15]
 800cd96:	460b      	mov	r3, r1
 800cd98:	73bb      	strb	r3, [r7, #14]
 800cd9a:	7bfb      	ldrb	r3, [r7, #15]
 800cd9c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  return &_msch_itf[daddr - 1];
 800cda0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800cda4:	1e5a      	subs	r2, r3, #1
 800cda6:	4613      	mov	r3, r2
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	1a9b      	subs	r3, r3, r2
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	4a28      	ldr	r2, [pc, #160]	@ (800ce50 <tuh_msc_write10+0xc8>)
 800cdb0:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(dev_addr);
 800cdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TU_VERIFY(p_msc->mounted);
 800cdb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdb6:	795b      	ldrb	r3, [r3, #5]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	f083 0301 	eor.w	r3, r3, #1
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <tuh_msc_write10+0x40>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	e03e      	b.n	800ce46 <tuh_msc_write10+0xbe>

  msc_cbw_t cbw;
  cbw_init(&cbw, lun);
 800cdc8:	7bba      	ldrb	r2, [r7, #14]
 800cdca:	f107 031c 	add.w	r3, r7, #28
 800cdce:	4611      	mov	r1, r2
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7ff fda7 	bl	800c924 <cbw_init>

  cbw.total_bytes = block_count * p_msc->capacity[lun].block_size;
 800cdd6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800cdda:	7bbb      	ldrb	r3, [r7, #14]
 800cddc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cdde:	3302      	adds	r3, #2
 800cde0:	00db      	lsls	r3, r3, #3
 800cde2:	440b      	add	r3, r1
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	fb02 f303 	mul.w	r3, r2, r3
 800cdea:	627b      	str	r3, [r7, #36]	@ 0x24
  cbw.dir         = TUSB_DIR_OUT;
 800cdec:	2300      	movs	r3, #0
 800cdee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  cbw.cmd_len     = sizeof(scsi_write10_t);
 800cdf2:	230a      	movs	r3, #10
 800cdf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

  scsi_write10_t const cmd_write10 = {
 800cdf8:	f107 0310 	add.w	r3, r7, #16
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	601a      	str	r2, [r3, #0]
 800ce00:	605a      	str	r2, [r3, #4]
 800ce02:	811a      	strh	r2, [r3, #8]
 800ce04:	232a      	movs	r3, #42	@ 0x2a
 800ce06:	743b      	strb	r3, [r7, #16]
      .cmd_code    = SCSI_CMD_WRITE_10,
      .lba         = tu_htonl(lba),
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	ba1b      	rev	r3, r3
  scsi_write10_t const cmd_write10 = {
 800ce0c:	f8c7 3012 	str.w	r3, [r7, #18]
      .block_count = tu_htons(block_count)
 800ce10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800ce14:	ba5b      	rev16	r3, r3
 800ce16:	b29b      	uxth	r3, r3
  scsi_write10_t const cmd_write10 = {
 800ce18:	f8a7 3017 	strh.w	r3, [r7, #23]
  };
  memcpy(cbw.command, &cmd_write10, cbw.cmd_len);
 800ce1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ce20:	461a      	mov	r2, r3
 800ce22:	f107 0110 	add.w	r1, r7, #16
 800ce26:	f107 031c 	add.w	r3, r7, #28
 800ce2a:	330f      	adds	r3, #15
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f004 f821 	bl	8010e74 <memcpy>

  return tuh_msc_scsi_command(dev_addr, &cbw, (void*) (uintptr_t) buffer, complete_cb, arg);
 800ce32:	f107 011c 	add.w	r1, r7, #28
 800ce36:	7bf8      	ldrb	r0, [r7, #15]
 800ce38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce3e:	68ba      	ldr	r2, [r7, #8]
 800ce40:	f7ff fda4 	bl	800c98c <tuh_msc_scsi_command>
 800ce44:	4603      	mov	r3, r0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3740      	adds	r7, #64	@ 0x40
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	24001b24 	.word	0x24001b24

0800ce54 <msch_init>:
#endif

//--------------------------------------------------------------------+
// CLASS-USBH API
//--------------------------------------------------------------------+
bool msch_init(void) {
 800ce54:	b580      	push	{r7, lr}
 800ce56:	af00      	add	r7, sp, #0
  TU_LOG_DRV("sizeof(msch_interface_t) = %u\r\n", sizeof(msch_interface_t));
  TU_LOG_DRV("sizeof(msch_epbuf_t) = %u\r\n", sizeof(msch_epbuf_t));
  tu_memclr(_msch_itf, sizeof(_msch_itf));
 800ce58:	221c      	movs	r2, #28
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	4802      	ldr	r0, [pc, #8]	@ (800ce68 <msch_init+0x14>)
 800ce5e:	f003 ffd0 	bl	8010e02 <memset>
  return true;
 800ce62:	2301      	movs	r3, #1
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	24001b24 	.word	0x24001b24

0800ce6c <msch_deinit>:

bool msch_deinit(void) {
 800ce6c:	b480      	push	{r7}
 800ce6e:	af00      	add	r7, sp, #0
  return true;
 800ce70:	2301      	movs	r3, #1
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <msch_close>:

void msch_close(uint8_t dev_addr) {
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	71fb      	strb	r3, [r7, #7]
  TU_VERIFY(dev_addr <= CFG_TUH_DEVICE_MAX,);
 800ce86:	79fb      	ldrb	r3, [r7, #7]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d823      	bhi.n	800ced4 <msch_close+0x58>
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	72fb      	strb	r3, [r7, #11]
  return &_msch_itf[daddr - 1];
 800ce90:	7afb      	ldrb	r3, [r7, #11]
 800ce92:	1e5a      	subs	r2, r3, #1
 800ce94:	4613      	mov	r3, r2
 800ce96:	00db      	lsls	r3, r3, #3
 800ce98:	1a9b      	subs	r3, r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	4a0f      	ldr	r2, [pc, #60]	@ (800cedc <msch_close+0x60>)
 800ce9e:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(dev_addr);
 800cea0:	60fb      	str	r3, [r7, #12]
  TU_VERIFY(p_msc->configured,);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	791b      	ldrb	r3, [r3, #4]
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	f083 0301 	eor.w	r3, r3, #1
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d110      	bne.n	800ced4 <msch_close+0x58>

  TU_LOG_DRV("  MSCh close addr = %d\r\n", dev_addr);

  // invoke Application Callback
  if (p_msc->mounted) {
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	795b      	ldrb	r3, [r3, #5]
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d006      	beq.n	800ceca <msch_close+0x4e>
    if (tuh_msc_umount_cb) {
 800cebc:	4b08      	ldr	r3, [pc, #32]	@ (800cee0 <msch_close+0x64>)
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d003      	beq.n	800ceca <msch_close+0x4e>
      tuh_msc_umount_cb(dev_addr);
 800cec2:	79fb      	ldrb	r3, [r7, #7]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f3af 8000 	nop.w
    }
  }

  tu_memclr(p_msc, sizeof(msch_interface_t));
 800ceca:	221c      	movs	r2, #28
 800cecc:	2100      	movs	r1, #0
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f003 ff97 	bl	8010e02 <memset>
}
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	24001b24 	.word	0x24001b24
 800cee0:	00000000 	.word	0x00000000

0800cee4 <msch_xfer_cb>:

bool msch_xfer_cb(uint8_t dev_addr, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes) {
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b096      	sub	sp, #88	@ 0x58
 800cee8:	af02      	add	r7, sp, #8
 800ceea:	603b      	str	r3, [r7, #0]
 800ceec:	4603      	mov	r3, r0
 800ceee:	71fb      	strb	r3, [r7, #7]
 800cef0:	460b      	mov	r3, r1
 800cef2:	71bb      	strb	r3, [r7, #6]
 800cef4:	4613      	mov	r3, r2
 800cef6:	717b      	strb	r3, [r7, #5]
 800cef8:	79fb      	ldrb	r3, [r7, #7]
 800cefa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  return &_msch_itf[daddr - 1];
 800cefe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cf02:	1e5a      	subs	r2, r3, #1
 800cf04:	4613      	mov	r3, r2
 800cf06:	00db      	lsls	r3, r3, #3
 800cf08:	1a9b      	subs	r3, r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	4a65      	ldr	r2, [pc, #404]	@ (800d0a4 <msch_xfer_cb+0x1c0>)
 800cf0e:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(dev_addr);
 800cf10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf12:	79fb      	ldrb	r3, [r7, #7]
 800cf14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  return &_msch_epbuf[daddr - 1];
 800cf18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf1c:	1e5a      	subs	r2, r3, #1
 800cf1e:	4613      	mov	r3, r2
 800cf20:	005b      	lsls	r3, r3, #1
 800cf22:	4413      	add	r3, r2
 800cf24:	011b      	lsls	r3, r3, #4
 800cf26:	4a60      	ldr	r2, [pc, #384]	@ (800d0a8 <msch_xfer_cb+0x1c4>)
 800cf28:	4413      	add	r3, r2
  msch_epbuf_t* epbuf = get_epbuf(dev_addr);
 800cf2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  msc_cbw_t const * cbw = &epbuf->cbw;
 800cf2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf2e:	647b      	str	r3, [r7, #68]	@ 0x44
  msc_csw_t       * csw = &epbuf->csw;
 800cf30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf32:	3320      	adds	r3, #32
 800cf34:	643b      	str	r3, [r7, #64]	@ 0x40

  switch (p_msc->stage) {
 800cf36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf38:	799b      	ldrb	r3, [r3, #6]
 800cf3a:	2b03      	cmp	r3, #3
 800cf3c:	f000 808d 	beq.w	800d05a <msch_xfer_cb+0x176>
 800cf40:	2b03      	cmp	r3, #3
 800cf42:	f300 80a3 	bgt.w	800d08c <msch_xfer_cb+0x1a8>
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d002      	beq.n	800cf50 <msch_xfer_cb+0x6c>
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d059      	beq.n	800d002 <msch_xfer_cb+0x11e>
      }
      break;

      // unknown state
    default:
      break;
 800cf4e:	e09d      	b.n	800d08c <msch_xfer_cb+0x1a8>
      TU_ASSERT(ep_addr == p_msc->ep_out && event == XFER_RESULT_SUCCESS && xferred_bytes == sizeof(msc_cbw_t));
 800cf50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf52:	789b      	ldrb	r3, [r3, #2]
 800cf54:	79ba      	ldrb	r2, [r7, #6]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d105      	bne.n	800cf66 <msch_xfer_cb+0x82>
 800cf5a:	797b      	ldrb	r3, [r7, #5]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d102      	bne.n	800cf66 <msch_xfer_cb+0x82>
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	2b1f      	cmp	r3, #31
 800cf64:	d00a      	beq.n	800cf7c <msch_xfer_cb+0x98>
 800cf66:	4b51      	ldr	r3, [pc, #324]	@ (800d0ac <msch_xfer_cb+0x1c8>)
 800cf68:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f003 0301 	and.w	r3, r3, #1
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d000      	beq.n	800cf78 <msch_xfer_cb+0x94>
 800cf76:	be00      	bkpt	0x0000
 800cf78:	2300      	movs	r3, #0
 800cf7a:	e08f      	b.n	800d09c <msch_xfer_cb+0x1b8>
      if (cbw->total_bytes && p_msc->buffer) {
 800cf7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d03e      	beq.n	800d002 <msch_xfer_cb+0x11e>
 800cf84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d03a      	beq.n	800d002 <msch_xfer_cb+0x11e>
        p_msc->stage = MSC_STAGE_DATA;
 800cf8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf8e:	2202      	movs	r2, #2
 800cf90:	719a      	strb	r2, [r3, #6]
        uint8_t const ep_data = (cbw->dir & TUSB_DIR_IN_MASK) ? p_msc->ep_in : p_msc->ep_out;
 800cf92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf94:	7b1b      	ldrb	r3, [r3, #12]
 800cf96:	b25b      	sxtb	r3, r3
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	da02      	bge.n	800cfa2 <msch_xfer_cb+0xbe>
 800cf9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf9e:	785b      	ldrb	r3, [r3, #1]
 800cfa0:	e001      	b.n	800cfa6 <msch_xfer_cb+0xc2>
 800cfa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfa4:	789b      	ldrb	r3, [r3, #2]
 800cfa6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_ASSERT(usbh_edpt_xfer(dev_addr, ep_data, p_msc->buffer, (uint16_t) cbw->total_bytes));
 800cfaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfb0:	6892      	ldr	r2, [r2, #8]
 800cfb2:	b291      	uxth	r1, r2
 800cfb4:	79fa      	ldrb	r2, [r7, #7]
 800cfb6:	f887 202d 	strb.w	r2, [r7, #45]	@ 0x2d
 800cfba:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cfbe:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 800cfc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cfc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cfca:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800cfce:	f897 002d 	ldrb.w	r0, [r7, #45]	@ 0x2d
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	9201      	str	r2, [sp, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	9200      	str	r2, [sp, #0]
 800cfda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cfdc:	f001 fad6 	bl	800e58c <usbh_edpt_xfer_with_callback>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	f083 0301 	eor.w	r3, r3, #1
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d051      	beq.n	800d090 <msch_xfer_cb+0x1ac>
 800cfec:	4b2f      	ldr	r3, [pc, #188]	@ (800d0ac <msch_xfer_cb+0x1c8>)
 800cfee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f003 0301 	and.w	r3, r3, #1
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d000      	beq.n	800cffe <msch_xfer_cb+0x11a>
 800cffc:	be00      	bkpt	0x0000
 800cffe:	2300      	movs	r3, #0
 800d000:	e04c      	b.n	800d09c <msch_xfer_cb+0x1b8>
      p_msc->stage = MSC_STAGE_STATUS;
 800d002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d004:	2203      	movs	r2, #3
 800d006:	719a      	strb	r2, [r3, #6]
      TU_ASSERT(usbh_edpt_xfer(dev_addr, p_msc->ep_in, (uint8_t*) csw, (uint16_t) sizeof(msc_csw_t)));
 800d008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d00a:	785a      	ldrb	r2, [r3, #1]
 800d00c:	79fb      	ldrb	r3, [r7, #7]
 800d00e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d012:	4613      	mov	r3, r2
 800d014:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800d018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d01a:	623b      	str	r3, [r7, #32]
 800d01c:	230d      	movs	r3, #13
 800d01e:	83fb      	strh	r3, [r7, #30]
 800d020:	8bfb      	ldrh	r3, [r7, #30]
 800d022:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800d026:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 800d02a:	2200      	movs	r2, #0
 800d02c:	9201      	str	r2, [sp, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	9200      	str	r2, [sp, #0]
 800d032:	6a3a      	ldr	r2, [r7, #32]
 800d034:	f001 faaa 	bl	800e58c <usbh_edpt_xfer_with_callback>
 800d038:	4603      	mov	r3, r0
 800d03a:	f083 0301 	eor.w	r3, r3, #1
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	2b00      	cmp	r3, #0
 800d042:	d027      	beq.n	800d094 <msch_xfer_cb+0x1b0>
 800d044:	4b19      	ldr	r3, [pc, #100]	@ (800d0ac <msch_xfer_cb+0x1c8>)
 800d046:	633b      	str	r3, [r7, #48]	@ 0x30
 800d048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f003 0301 	and.w	r3, r3, #1
 800d050:	2b00      	cmp	r3, #0
 800d052:	d000      	beq.n	800d056 <msch_xfer_cb+0x172>
 800d054:	be00      	bkpt	0x0000
 800d056:	2300      	movs	r3, #0
 800d058:	e020      	b.n	800d09c <msch_xfer_cb+0x1b8>
      p_msc->stage = MSC_STAGE_IDLE;
 800d05a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d05c:	2200      	movs	r2, #0
 800d05e:	719a      	strb	r2, [r3, #6]
      if (p_msc->complete_cb) {
 800d060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d017      	beq.n	800d098 <msch_xfer_cb+0x1b4>
        tuh_msc_complete_data_t const cb_data = {
 800d068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d06a:	60fb      	str	r3, [r7, #12]
 800d06c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d06e:	613b      	str	r3, [r7, #16]
            .scsi_data = p_msc->buffer,
 800d070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d072:	689b      	ldr	r3, [r3, #8]
        tuh_msc_complete_data_t const cb_data = {
 800d074:	617b      	str	r3, [r7, #20]
            .user_arg = p_msc->complete_arg
 800d076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d078:	691b      	ldr	r3, [r3, #16]
        tuh_msc_complete_data_t const cb_data = {
 800d07a:	61bb      	str	r3, [r7, #24]
        p_msc->complete_cb(dev_addr, &cb_data);
 800d07c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	f107 010c 	add.w	r1, r7, #12
 800d084:	79fa      	ldrb	r2, [r7, #7]
 800d086:	4610      	mov	r0, r2
 800d088:	4798      	blx	r3
      break;
 800d08a:	e005      	b.n	800d098 <msch_xfer_cb+0x1b4>
      break;
 800d08c:	bf00      	nop
 800d08e:	e004      	b.n	800d09a <msch_xfer_cb+0x1b6>
        break;
 800d090:	bf00      	nop
 800d092:	e002      	b.n	800d09a <msch_xfer_cb+0x1b6>
      break;
 800d094:	bf00      	nop
 800d096:	e000      	b.n	800d09a <msch_xfer_cb+0x1b6>
      break;
 800d098:	bf00      	nop
  }

  return true;
 800d09a:	2301      	movs	r3, #1
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3750      	adds	r7, #80	@ 0x50
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	24001b24 	.word	0x24001b24
 800d0a8:	24001b40 	.word	0x24001b40
 800d0ac:	e000edf0 	.word	0xe000edf0

0800d0b0 <msch_open>:
static void config_get_maxlun_complete(tuh_xfer_t* xfer);
static bool config_test_unit_ready_complete(uint8_t dev_addr, tuh_msc_complete_data_t const* cb_data);
static bool config_request_sense_complete(uint8_t dev_addr, tuh_msc_complete_data_t const* cb_data);
static bool config_read_capacity_complete(uint8_t dev_addr, tuh_msc_complete_data_t const* cb_data);

bool msch_open(uint8_t rhport, uint8_t dev_addr, tusb_desc_interface_t const* desc_itf, uint16_t max_len) {
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b08e      	sub	sp, #56	@ 0x38
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	603a      	str	r2, [r7, #0]
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	71fb      	strb	r3, [r7, #7]
 800d0be:	460b      	mov	r3, r1
 800d0c0:	71bb      	strb	r3, [r7, #6]
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	80bb      	strh	r3, [r7, #4]
  (void) rhport;
  TU_VERIFY (MSC_SUBCLASS_SCSI == desc_itf->bInterfaceSubClass &&
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	799b      	ldrb	r3, [r3, #6]
 800d0ca:	2b06      	cmp	r3, #6
 800d0cc:	d103      	bne.n	800d0d6 <msch_open+0x26>
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	79db      	ldrb	r3, [r3, #7]
 800d0d2:	2b50      	cmp	r3, #80	@ 0x50
 800d0d4:	d001      	beq.n	800d0da <msch_open+0x2a>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	e080      	b.n	800d1dc <msch_open+0x12c>
             MSC_PROTOCOL_BOT == desc_itf->bInterfaceProtocol);

  // msc driver length is fixed
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	791b      	ldrb	r3, [r3, #4]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	00d2      	lsls	r2, r2, #3
 800d0e2:	1ad3      	subs	r3, r2, r3
 800d0e4:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) +
 800d0e6:	3309      	adds	r3, #9
 800d0e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  TU_ASSERT(drv_len <= max_len);
 800d0ea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d0ec:	88bb      	ldrh	r3, [r7, #4]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d90a      	bls.n	800d108 <msch_open+0x58>
 800d0f2:	4b3c      	ldr	r3, [pc, #240]	@ (800d1e4 <msch_open+0x134>)
 800d0f4:	61fb      	str	r3, [r7, #28]
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f003 0301 	and.w	r3, r3, #1
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d000      	beq.n	800d104 <msch_open+0x54>
 800d102:	be00      	bkpt	0x0000
 800d104:	2300      	movs	r3, #0
 800d106:	e069      	b.n	800d1dc <msch_open+0x12c>
 800d108:	79bb      	ldrb	r3, [r7, #6]
 800d10a:	74fb      	strb	r3, [r7, #19]
  return &_msch_itf[daddr - 1];
 800d10c:	7cfb      	ldrb	r3, [r7, #19]
 800d10e:	1e5a      	subs	r2, r3, #1
 800d110:	4613      	mov	r3, r2
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	1a9b      	subs	r3, r3, r2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	4a33      	ldr	r2, [pc, #204]	@ (800d1e8 <msch_open+0x138>)
 800d11a:	4413      	add	r3, r2

  msch_interface_t* p_msc = get_itf(dev_addr);
 800d11c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	61bb      	str	r3, [r7, #24]
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	461a      	mov	r2, r3
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	4413      	add	r3, r2
  tusb_desc_endpoint_t const* ep_desc = (tusb_desc_endpoint_t const*) tu_desc_next(desc_itf);
 800d130:	637b      	str	r3, [r7, #52]	@ 0x34

  for (uint32_t i = 0; i < 2; i++) {
 800d132:	2300      	movs	r3, #0
 800d134:	633b      	str	r3, [r7, #48]	@ 0x30
 800d136:	e049      	b.n	800d1cc <msch_open+0x11c>
    TU_ASSERT(TUSB_DESC_ENDPOINT == ep_desc->bDescriptorType && TUSB_XFER_BULK == ep_desc->bmAttributes.xfer);
 800d138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d13a:	785b      	ldrb	r3, [r3, #1]
 800d13c:	2b05      	cmp	r3, #5
 800d13e:	d106      	bne.n	800d14e <msch_open+0x9e>
 800d140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d142:	78db      	ldrb	r3, [r3, #3]
 800d144:	f003 0303 	and.w	r3, r3, #3
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	2b02      	cmp	r3, #2
 800d14c:	d00a      	beq.n	800d164 <msch_open+0xb4>
 800d14e:	4b25      	ldr	r3, [pc, #148]	@ (800d1e4 <msch_open+0x134>)
 800d150:	623b      	str	r3, [r7, #32]
 800d152:	6a3b      	ldr	r3, [r7, #32]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f003 0301 	and.w	r3, r3, #1
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d000      	beq.n	800d160 <msch_open+0xb0>
 800d15e:	be00      	bkpt	0x0000
 800d160:	2300      	movs	r3, #0
 800d162:	e03b      	b.n	800d1dc <msch_open+0x12c>
    TU_ASSERT(tuh_edpt_open(dev_addr, ep_desc));
 800d164:	79bb      	ldrb	r3, [r7, #6]
 800d166:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d168:	4618      	mov	r0, r3
 800d16a:	f001 faa5 	bl	800e6b8 <tuh_edpt_open>
 800d16e:	4603      	mov	r3, r0
 800d170:	f083 0301 	eor.w	r3, r3, #1
 800d174:	b2db      	uxtb	r3, r3
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00a      	beq.n	800d190 <msch_open+0xe0>
 800d17a:	4b1a      	ldr	r3, [pc, #104]	@ (800d1e4 <msch_open+0x134>)
 800d17c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f003 0301 	and.w	r3, r3, #1
 800d186:	2b00      	cmp	r3, #0
 800d188:	d000      	beq.n	800d18c <msch_open+0xdc>
 800d18a:	be00      	bkpt	0x0000
 800d18c:	2300      	movs	r3, #0
 800d18e:	e025      	b.n	800d1dc <msch_open+0x12c>

    if (TUSB_DIR_IN == tu_edpt_dir(ep_desc->bEndpointAddress)) {
 800d190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d192:	789b      	ldrb	r3, [r3, #2]
 800d194:	74bb      	strb	r3, [r7, #18]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800d196:	7cbb      	ldrb	r3, [r7, #18]
 800d198:	09db      	lsrs	r3, r3, #7
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d104      	bne.n	800d1aa <msch_open+0xfa>
      p_msc->ep_in = ep_desc->bEndpointAddress;
 800d1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a2:	789a      	ldrb	r2, [r3, #2]
 800d1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a6:	705a      	strb	r2, [r3, #1]
 800d1a8:	e003      	b.n	800d1b2 <msch_open+0x102>
    } else {
      p_msc->ep_out = ep_desc->bEndpointAddress;
 800d1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ac:	789a      	ldrb	r2, [r3, #2]
 800d1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b0:	709a      	strb	r2, [r3, #2]
 800d1b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1b4:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	461a      	mov	r2, r3
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	4413      	add	r3, r2
    }

    ep_desc = (tusb_desc_endpoint_t const*) tu_desc_next(ep_desc);
 800d1c4:	637b      	str	r3, [r7, #52]	@ 0x34
  for (uint32_t i = 0; i < 2; i++) {
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d9b2      	bls.n	800d138 <msch_open+0x88>
  }

  p_msc->itf_num = desc_itf->bInterfaceNumber;
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	789a      	ldrb	r2, [r3, #2]
 800d1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d8:	701a      	strb	r2, [r3, #0]

  return true;
 800d1da:	2301      	movs	r3, #1
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3738      	adds	r7, #56	@ 0x38
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	e000edf0 	.word	0xe000edf0
 800d1e8:	24001b24 	.word	0x24001b24

0800d1ec <msch_set_config>:

bool msch_set_config(uint8_t daddr, uint8_t itf_num) {
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b090      	sub	sp, #64	@ 0x40
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	460a      	mov	r2, r1
 800d1f6:	71fb      	strb	r3, [r7, #7]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	71bb      	strb	r3, [r7, #6]
 800d1fc:	79fb      	ldrb	r3, [r7, #7]
 800d1fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  return &_msch_itf[daddr - 1];
 800d202:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d206:	1e5a      	subs	r2, r3, #1
 800d208:	4613      	mov	r3, r2
 800d20a:	00db      	lsls	r3, r3, #3
 800d20c:	1a9b      	subs	r3, r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	4a31      	ldr	r2, [pc, #196]	@ (800d2d8 <msch_set_config+0xec>)
 800d212:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(daddr);
 800d214:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TU_ASSERT(p_msc->itf_num == itf_num);
 800d216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	79ba      	ldrb	r2, [r7, #6]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d00a      	beq.n	800d236 <msch_set_config+0x4a>
 800d220:	4b2e      	ldr	r3, [pc, #184]	@ (800d2dc <msch_set_config+0xf0>)
 800d222:	633b      	str	r3, [r7, #48]	@ 0x30
 800d224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 0301 	and.w	r3, r3, #1
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d000      	beq.n	800d232 <msch_set_config+0x46>
 800d230:	be00      	bkpt	0x0000
 800d232:	2300      	movs	r3, #0
 800d234:	e04c      	b.n	800d2d0 <msch_set_config+0xe4>
  p_msc->configured = true;
 800d236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d238:	2201      	movs	r2, #1
 800d23a:	711a      	strb	r2, [r3, #4]

  //------------- Get Max Lun -------------//
  TU_LOG_DRV("MSC Get Max Lun\r\n");
  tusb_control_request_t const request = {
 800d23c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d240:	2201      	movs	r2, #1
 800d242:	f362 0304 	bfi	r3, r2, #0, #5
 800d246:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800d24a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d24e:	2201      	movs	r2, #1
 800d250:	f362 1346 	bfi	r3, r2, #5, #2
 800d254:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800d258:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d25c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d260:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800d264:	23fe      	movs	r3, #254	@ 0xfe
 800d266:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d26a:	2300      	movs	r3, #0
 800d26c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d26e:	79bb      	ldrb	r3, [r7, #6]
 800d270:	b29b      	uxth	r3, r3
 800d272:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d274:	2301      	movs	r3, #1
 800d276:	857b      	strh	r3, [r7, #42]	@ 0x2a
      .wValue   = 0,
      .wIndex   = itf_num,
      .wLength  = 1
  };

  uint8_t* enum_buf = usbh_get_enum_buf();
 800d278:	f001 f8bc 	bl	800e3f4 <usbh_get_enum_buf>
 800d27c:	63b8      	str	r0, [r7, #56]	@ 0x38
  tuh_xfer_t xfer = {
 800d27e:	f107 030c 	add.w	r3, r7, #12
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]
 800d286:	605a      	str	r2, [r3, #4]
 800d288:	609a      	str	r2, [r3, #8]
 800d28a:	60da      	str	r2, [r3, #12]
 800d28c:	611a      	str	r2, [r3, #16]
 800d28e:	615a      	str	r2, [r3, #20]
 800d290:	79fb      	ldrb	r3, [r7, #7]
 800d292:	733b      	strb	r3, [r7, #12]
 800d294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d298:	617b      	str	r3, [r7, #20]
 800d29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d29c:	61bb      	str	r3, [r7, #24]
 800d29e:	4b10      	ldr	r3, [pc, #64]	@ (800d2e0 <msch_set_config+0xf4>)
 800d2a0:	61fb      	str	r3, [r7, #28]
      .setup       = &request,
      .buffer      = enum_buf,
      .complete_cb = config_get_maxlun_complete,
      .user_data    = 0
  };
  TU_ASSERT(tuh_control_xfer(&xfer));
 800d2a2:	f107 030c 	add.w	r3, r7, #12
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f000 fde6 	bl	800de78 <tuh_control_xfer>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	f083 0301 	eor.w	r3, r3, #1
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d00a      	beq.n	800d2ce <msch_set_config+0xe2>
 800d2b8:	4b08      	ldr	r3, [pc, #32]	@ (800d2dc <msch_set_config+0xf0>)
 800d2ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d000      	beq.n	800d2ca <msch_set_config+0xde>
 800d2c8:	be00      	bkpt	0x0000
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	e000      	b.n	800d2d0 <msch_set_config+0xe4>

  return true;
 800d2ce:	2301      	movs	r3, #1
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3740      	adds	r7, #64	@ 0x40
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	24001b24 	.word	0x24001b24
 800d2dc:	e000edf0 	.word	0xe000edf0
 800d2e0:	0800d2e5 	.word	0x0800d2e5

0800d2e4 <config_get_maxlun_complete>:

static void config_get_maxlun_complete(tuh_xfer_t* xfer) {
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b086      	sub	sp, #24
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  uint8_t const daddr = xfer->daddr;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	75fb      	strb	r3, [r7, #23]
 800d2f2:	7dfb      	ldrb	r3, [r7, #23]
 800d2f4:	72bb      	strb	r3, [r7, #10]
  return &_msch_itf[daddr - 1];
 800d2f6:	7abb      	ldrb	r3, [r7, #10]
 800d2f8:	1e5a      	subs	r2, r3, #1
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	00db      	lsls	r3, r3, #3
 800d2fe:	1a9b      	subs	r3, r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	4a10      	ldr	r2, [pc, #64]	@ (800d344 <config_get_maxlun_complete+0x60>)
 800d304:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(daddr);
 800d306:	613b      	str	r3, [r7, #16]

  // MAXLUN's response is minus 1 by specs, STALL means 1
  if (XFER_RESULT_SUCCESS == xfer->result) {
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	78db      	ldrb	r3, [r3, #3]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d109      	bne.n	800d324 <config_get_maxlun_complete+0x40>
    uint8_t* enum_buf = usbh_get_enum_buf();
 800d310:	f001 f870 	bl	800e3f4 <usbh_get_enum_buf>
 800d314:	60f8      	str	r0, [r7, #12]
    p_msc->max_lun = enum_buf[0] + 1;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	3301      	adds	r3, #1
 800d31c:	b2da      	uxtb	r2, r3
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	70da      	strb	r2, [r3, #3]
 800d322:	e002      	b.n	800d32a <config_get_maxlun_complete+0x46>
  } else {
    p_msc->max_lun = 1;
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	2201      	movs	r2, #1
 800d328:	70da      	strb	r2, [r3, #3]

  TU_LOG_DRV("  Max LUN = %u\r\n", p_msc->max_lun);

  // TODO multiple LUN support
  TU_LOG_DRV("SCSI Test Unit Ready\r\n");
  uint8_t const lun = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	72fb      	strb	r3, [r7, #11]
  tuh_msc_test_unit_ready(daddr, lun, config_test_unit_ready_complete, 0);
 800d32e:	7af9      	ldrb	r1, [r7, #11]
 800d330:	7df8      	ldrb	r0, [r7, #23]
 800d332:	2300      	movs	r3, #0
 800d334:	4a04      	ldr	r2, [pc, #16]	@ (800d348 <config_get_maxlun_complete+0x64>)
 800d336:	f7ff fc41 	bl	800cbbc <tuh_msc_test_unit_ready>
}
 800d33a:	bf00      	nop
 800d33c:	3718      	adds	r7, #24
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	24001b24 	.word	0x24001b24
 800d348:	0800d34d 	.word	0x0800d34d

0800d34c <config_test_unit_ready_complete>:

static bool config_test_unit_ready_complete(uint8_t dev_addr, tuh_msc_complete_data_t const* cb_data) {
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b088      	sub	sp, #32
 800d350:	af02      	add	r7, sp, #8
 800d352:	4603      	mov	r3, r0
 800d354:	6039      	str	r1, [r7, #0]
 800d356:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const* cbw = cb_data->cbw;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	617b      	str	r3, [r7, #20]
  msc_csw_t const* csw = cb_data->csw;
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	613b      	str	r3, [r7, #16]
  uint8_t* enum_buf = usbh_get_enum_buf();
 800d364:	f001 f846 	bl	800e3f4 <usbh_get_enum_buf>
 800d368:	60f8      	str	r0, [r7, #12]

  if (csw->status == 0) {
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	7b1b      	ldrb	r3, [r3, #12]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d109      	bne.n	800d386 <config_test_unit_ready_complete+0x3a>
    // Unit is ready, read its capacity
    TU_LOG_DRV("SCSI Read Capacity\r\n");
    tuh_msc_read_capacity(dev_addr, cbw->lun, (scsi_read_capacity10_resp_t*) (uintptr_t) enum_buf,
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	7b59      	ldrb	r1, [r3, #13]
 800d376:	79f8      	ldrb	r0, [r7, #7]
 800d378:	2300      	movs	r3, #0
 800d37a:	9300      	str	r3, [sp, #0]
 800d37c:	4b11      	ldr	r3, [pc, #68]	@ (800d3c4 <config_test_unit_ready_complete+0x78>)
 800d37e:	68fa      	ldr	r2, [r7, #12]
 800d380:	f7ff fb86 	bl	800ca90 <tuh_msc_read_capacity>
 800d384:	e019      	b.n	800d3ba <config_test_unit_ready_complete+0x6e>
  } else {
    // Note: During enumeration, some device fails Test Unit Ready and require a few retries
    // with Request Sense to start working !!
    // TODO limit number of retries
    TU_LOG_DRV("SCSI Request Sense\r\n");
    TU_ASSERT(tuh_msc_request_sense(dev_addr, cbw->lun, enum_buf, config_request_sense_complete, 0));
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	7b59      	ldrb	r1, [r3, #13]
 800d38a:	79f8      	ldrb	r0, [r7, #7]
 800d38c:	2300      	movs	r3, #0
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c8 <config_test_unit_ready_complete+0x7c>)
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	f7ff fc58 	bl	800cc48 <tuh_msc_request_sense>
 800d398:	4603      	mov	r3, r0
 800d39a:	f083 0301 	eor.w	r3, r3, #1
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00a      	beq.n	800d3ba <config_test_unit_ready_complete+0x6e>
 800d3a4:	4b09      	ldr	r3, [pc, #36]	@ (800d3cc <config_test_unit_ready_complete+0x80>)
 800d3a6:	60bb      	str	r3, [r7, #8]
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f003 0301 	and.w	r3, r3, #1
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d000      	beq.n	800d3b6 <config_test_unit_ready_complete+0x6a>
 800d3b4:	be00      	bkpt	0x0000
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	e000      	b.n	800d3bc <config_test_unit_ready_complete+0x70>
  }

  return true;
 800d3ba:	2301      	movs	r3, #1
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3718      	adds	r7, #24
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	0800d449 	.word	0x0800d449
 800d3c8:	0800d3d1 	.word	0x0800d3d1
 800d3cc:	e000edf0 	.word	0xe000edf0

0800d3d0 <config_request_sense_complete>:

static bool config_request_sense_complete(uint8_t dev_addr, tuh_msc_complete_data_t const* cb_data) {
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	6039      	str	r1, [r7, #0]
 800d3da:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const* cbw = cb_data->cbw;
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	617b      	str	r3, [r7, #20]
  msc_csw_t const* csw = cb_data->csw;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	613b      	str	r3, [r7, #16]

  TU_ASSERT(csw->status == 0);
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	7b1b      	ldrb	r3, [r3, #12]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00a      	beq.n	800d406 <config_request_sense_complete+0x36>
 800d3f0:	4b13      	ldr	r3, [pc, #76]	@ (800d440 <config_request_sense_complete+0x70>)
 800d3f2:	60bb      	str	r3, [r7, #8]
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f003 0301 	and.w	r3, r3, #1
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d000      	beq.n	800d402 <config_request_sense_complete+0x32>
 800d400:	be00      	bkpt	0x0000
 800d402:	2300      	movs	r3, #0
 800d404:	e018      	b.n	800d438 <config_request_sense_complete+0x68>
  TU_ASSERT(tuh_msc_test_unit_ready(dev_addr, cbw->lun, config_test_unit_ready_complete, 0));
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	7b59      	ldrb	r1, [r3, #13]
 800d40a:	79f8      	ldrb	r0, [r7, #7]
 800d40c:	2300      	movs	r3, #0
 800d40e:	4a0d      	ldr	r2, [pc, #52]	@ (800d444 <config_request_sense_complete+0x74>)
 800d410:	f7ff fbd4 	bl	800cbbc <tuh_msc_test_unit_ready>
 800d414:	4603      	mov	r3, r0
 800d416:	f083 0301 	eor.w	r3, r3, #1
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00a      	beq.n	800d436 <config_request_sense_complete+0x66>
 800d420:	4b07      	ldr	r3, [pc, #28]	@ (800d440 <config_request_sense_complete+0x70>)
 800d422:	60fb      	str	r3, [r7, #12]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f003 0301 	and.w	r3, r3, #1
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d000      	beq.n	800d432 <config_request_sense_complete+0x62>
 800d430:	be00      	bkpt	0x0000
 800d432:	2300      	movs	r3, #0
 800d434:	e000      	b.n	800d438 <config_request_sense_complete+0x68>
  return true;
 800d436:	2301      	movs	r3, #1
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3718      	adds	r7, #24
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	e000edf0 	.word	0xe000edf0
 800d444:	0800d34d 	.word	0x0800d34d

0800d448 <config_read_capacity_complete>:

static bool config_read_capacity_complete(uint8_t dev_addr, tuh_msc_complete_data_t const* cb_data) {
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08a      	sub	sp, #40	@ 0x28
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	4603      	mov	r3, r0
 800d450:	6039      	str	r1, [r7, #0]
 800d452:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const* cbw = cb_data->cbw;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	627b      	str	r3, [r7, #36]	@ 0x24
  msc_csw_t const* csw = cb_data->csw;
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	623b      	str	r3, [r7, #32]
  TU_ASSERT(csw->status == 0);
 800d460:	6a3b      	ldr	r3, [r7, #32]
 800d462:	7b1b      	ldrb	r3, [r3, #12]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00a      	beq.n	800d47e <config_read_capacity_complete+0x36>
 800d468:	4b23      	ldr	r3, [pc, #140]	@ (800d4f8 <config_read_capacity_complete+0xb0>)
 800d46a:	613b      	str	r3, [r7, #16]
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f003 0301 	and.w	r3, r3, #1
 800d474:	2b00      	cmp	r3, #0
 800d476:	d000      	beq.n	800d47a <config_read_capacity_complete+0x32>
 800d478:	be00      	bkpt	0x0000
 800d47a:	2300      	movs	r3, #0
 800d47c:	e038      	b.n	800d4f0 <config_read_capacity_complete+0xa8>
 800d47e:	79fb      	ldrb	r3, [r7, #7]
 800d480:	73fb      	strb	r3, [r7, #15]
  return &_msch_itf[daddr - 1];
 800d482:	7bfb      	ldrb	r3, [r7, #15]
 800d484:	1e5a      	subs	r2, r3, #1
 800d486:	4613      	mov	r3, r2
 800d488:	00db      	lsls	r3, r3, #3
 800d48a:	1a9b      	subs	r3, r3, r2
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	4a1b      	ldr	r2, [pc, #108]	@ (800d4fc <config_read_capacity_complete+0xb4>)
 800d490:	4413      	add	r3, r2
  msch_interface_t* p_msc = get_itf(dev_addr);
 800d492:	61fb      	str	r3, [r7, #28]
  uint8_t* enum_buf = usbh_get_enum_buf();
 800d494:	f000 ffae 	bl	800e3f4 <usbh_get_enum_buf>
 800d498:	61b8      	str	r0, [r7, #24]

  // Capacity response field: Block size and Last LBA are both Big-Endian
  scsi_read_capacity10_resp_t* resp = (scsi_read_capacity10_resp_t*) (uintptr_t) enum_buf;
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	617b      	str	r3, [r7, #20]
  p_msc->capacity[cbw->lun].block_count = tu_ntohl(resp->last_lba) + 1;
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	ba1b      	rev	r3, r3
 800d4a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4a6:	7b52      	ldrb	r2, [r2, #13]
 800d4a8:	4610      	mov	r0, r2
 800d4aa:	1c5a      	adds	r2, r3, #1
 800d4ac:	69f9      	ldr	r1, [r7, #28]
 800d4ae:	1c83      	adds	r3, r0, #2
 800d4b0:	00db      	lsls	r3, r3, #3
 800d4b2:	440b      	add	r3, r1
 800d4b4:	609a      	str	r2, [r3, #8]
  p_msc->capacity[cbw->lun].block_size  = tu_ntohl(resp->block_size);
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4bc:	7b52      	ldrb	r2, [r2, #13]
 800d4be:	4610      	mov	r0, r2
 800d4c0:	ba1a      	rev	r2, r3
 800d4c2:	69f9      	ldr	r1, [r7, #28]
 800d4c4:	1c83      	adds	r3, r0, #2
 800d4c6:	00db      	lsls	r3, r3, #3
 800d4c8:	440b      	add	r3, r1
 800d4ca:	605a      	str	r2, [r3, #4]

  // Mark enumeration is complete
  p_msc->mounted = true;
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	715a      	strb	r2, [r3, #5]
  if (tuh_msc_mount_cb) {
 800d4d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d500 <config_read_capacity_complete+0xb8>)
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d003      	beq.n	800d4e0 <config_read_capacity_complete+0x98>
    tuh_msc_mount_cb(dev_addr);
 800d4d8:	79fb      	ldrb	r3, [r7, #7]
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7f3 fdc2 	bl	8001064 <tuh_msc_mount_cb>
  }

  // notify usbh that driver enumeration is complete
  usbh_driver_set_config_complete(dev_addr, p_msc->itf_num);
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	781a      	ldrb	r2, [r3, #0]
 800d4e4:	79fb      	ldrb	r3, [r7, #7]
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f001 ff55 	bl	800f398 <usbh_driver_set_config_complete>

  return true;
 800d4ee:	2301      	movs	r3, #1
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3728      	adds	r7, #40	@ 0x28
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	e000edf0 	.word	0xe000edf0
 800d4fc:	24001b24 	.word	0x24001b24
 800d500:	08001065 	.word	0x08001065

0800d504 <_ff_push>:
}
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	4613      	mov	r3, r2
 800d510:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	88fa      	ldrh	r2, [r7, #6]
 800d518:	68f9      	ldr	r1, [r7, #12]
 800d51a:	88c9      	ldrh	r1, [r1, #6]
 800d51c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800d520:	b289      	uxth	r1, r1
 800d522:	fb01 f202 	mul.w	r2, r1, r2
 800d526:	1898      	adds	r0, r3, r2
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	88db      	ldrh	r3, [r3, #6]
 800d52c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d530:	b29b      	uxth	r3, r3
 800d532:	461a      	mov	r2, r3
 800d534:	68b9      	ldr	r1, [r7, #8]
 800d536:	f003 fc9d 	bl	8010e74 <memcpy>
}
 800d53a:	bf00      	nop
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <_ff_pull>:
  }
}

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b084      	sub	sp, #16
 800d546:	af00      	add	r7, sp, #0
 800d548:	60f8      	str	r0, [r7, #12]
 800d54a:	60b9      	str	r1, [r7, #8]
 800d54c:	4613      	mov	r3, r2
 800d54e:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	88fa      	ldrh	r2, [r7, #6]
 800d556:	68f9      	ldr	r1, [r7, #12]
 800d558:	88c9      	ldrh	r1, [r1, #6]
 800d55a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800d55e:	b289      	uxth	r1, r1
 800d560:	fb01 f202 	mul.w	r2, r1, r2
 800d564:	1899      	adds	r1, r3, r2
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	88db      	ldrh	r3, [r3, #6]
 800d56a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d56e:	b29b      	uxth	r3, r3
 800d570:	461a      	mov	r2, r3
 800d572:	68b8      	ldr	r0, [r7, #8]
 800d574:	f003 fc7e 	bl	8010e74 <memcpy>
}
 800d578:	bf00      	nop
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 800d580:	b480      	push	{r7}
 800d582:	b085      	sub	sp, #20
 800d584:	af00      	add	r7, sp, #0
 800d586:	4603      	mov	r3, r0
 800d588:	80fb      	strh	r3, [r7, #6]
 800d58a:	460b      	mov	r3, r1
 800d58c:	80bb      	strh	r3, [r7, #4]
 800d58e:	4613      	mov	r3, r2
 800d590:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 800d592:	88ba      	ldrh	r2, [r7, #4]
 800d594:	887b      	ldrh	r3, [r7, #2]
 800d596:	4413      	add	r3, r2
 800d598:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800d59a:	88ba      	ldrh	r2, [r7, #4]
 800d59c:	89fb      	ldrh	r3, [r7, #14]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d804      	bhi.n	800d5ac <advance_index+0x2c>
 800d5a2:	89fa      	ldrh	r2, [r7, #14]
 800d5a4:	88fb      	ldrh	r3, [r7, #6]
 800d5a6:	005b      	lsls	r3, r3, #1
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	db08      	blt.n	800d5be <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 800d5ac:	88fb      	ldrh	r3, [r7, #6]
 800d5ae:	005b      	lsls	r3, r3, #1
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	425b      	negs	r3, r3
 800d5b4:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800d5b6:	89fa      	ldrh	r2, [r7, #14]
 800d5b8:	89bb      	ldrh	r3, [r7, #12]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 800d5be:	89fb      	ldrh	r3, [r7, #14]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b08a      	sub	sp, #40	@ 0x28
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	461a      	mov	r2, r3
 800d5da:	460b      	mov	r3, r1
 800d5dc:	80fb      	strh	r3, [r7, #6]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	889b      	ldrh	r3, [r3, #4]
 800d5e6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d5e8:	88fb      	ldrh	r3, [r7, #6]
 800d5ea:	843b      	strh	r3, [r7, #32]
 800d5ec:	88bb      	ldrh	r3, [r7, #4]
 800d5ee:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 800d5f0:	8c3a      	ldrh	r2, [r7, #32]
 800d5f2:	8bfb      	ldrh	r3, [r7, #30]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d304      	bcc.n	800d602 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800d5f8:	8c3a      	ldrh	r2, [r7, #32]
 800d5fa:	8bfb      	ldrh	r3, [r7, #30]
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	e008      	b.n	800d614 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800d602:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d604:	005b      	lsls	r3, r3, #1
 800d606:	b29a      	uxth	r2, r3
 800d608:	8c39      	ldrh	r1, [r7, #32]
 800d60a:	8bfb      	ldrh	r3, [r7, #30]
 800d60c:	1acb      	subs	r3, r1, r3
 800d60e:	b29b      	uxth	r3, r3
 800d610:	4413      	add	r3, r2
 800d612:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800d614:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 800d616:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d101      	bne.n	800d620 <_tu_fifo_peek+0x54>
 800d61c:	2300      	movs	r3, #0
 800d61e:	e037      	b.n	800d690 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	889b      	ldrh	r3, [r3, #4]
 800d624:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d626:	429a      	cmp	r2, r3
 800d628:	d91b      	bls.n	800d662 <_tu_fifo_peek+0x96>
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	61bb      	str	r3, [r7, #24]
 800d62e:	88fb      	ldrh	r3, [r7, #6]
 800d630:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	889b      	ldrh	r3, [r3, #4]
 800d636:	8afa      	ldrh	r2, [r7, #22]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d305      	bcc.n	800d648 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	889b      	ldrh	r3, [r3, #4]
 800d640:	8afa      	ldrh	r2, [r7, #22]
 800d642:	1ad3      	subs	r3, r2, r3
 800d644:	82bb      	strh	r3, [r7, #20]
 800d646:	e004      	b.n	800d652 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	889a      	ldrh	r2, [r3, #4]
 800d64c:	8afb      	ldrh	r3, [r7, #22]
 800d64e:	4413      	add	r3, r2
 800d650:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	8aba      	ldrh	r2, [r7, #20]
 800d656:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800d658:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800d65a:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	889b      	ldrh	r3, [r3, #4]
 800d660:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	889b      	ldrh	r3, [r3, #4]
 800d666:	827b      	strh	r3, [r7, #18]
 800d668:	88bb      	ldrh	r3, [r7, #4]
 800d66a:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 800d66c:	e003      	b.n	800d676 <_tu_fifo_peek+0xaa>
 800d66e:	8a3a      	ldrh	r2, [r7, #16]
 800d670:	8a7b      	ldrh	r3, [r7, #18]
 800d672:	1ad3      	subs	r3, r2, r3
 800d674:	823b      	strh	r3, [r7, #16]
 800d676:	8a7a      	ldrh	r2, [r7, #18]
 800d678:	8a3b      	ldrh	r3, [r7, #16]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d9f7      	bls.n	800d66e <_tu_fifo_peek+0xa2>
  return idx;
 800d67e:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800d680:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 800d682:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d684:	461a      	mov	r2, r3
 800d686:	68b9      	ldr	r1, [r7, #8]
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	f7ff ff5a 	bl	800d542 <_ff_pull>

  return true;
 800d68e:	2301      	movs	r3, #1
}
 800d690:	4618      	mov	r0, r3
 800d692:	3728      	adds	r7, #40	@ 0x28
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	891b      	ldrh	r3, [r3, #8]
 800d6a4:	b29a      	uxth	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	895b      	ldrh	r3, [r3, #10]
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	bf0c      	ite	eq
 800d6b0:	2301      	moveq	r3, #1
 800d6b2:	2300      	movne	r3, #0
 800d6b4:	b2db      	uxtb	r3, r3
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	370c      	adds	r7, #12
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr

0800d6c2 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 800d6c2:	b480      	push	{r7}
 800d6c4:	b085      	sub	sp, #20
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	8899      	ldrh	r1, [r3, #4]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	891b      	ldrh	r3, [r3, #8]
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	895b      	ldrh	r3, [r3, #10]
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	81f9      	strh	r1, [r7, #14]
 800d6dc:	81ba      	strh	r2, [r7, #12]
 800d6de:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 800d6e0:	89ba      	ldrh	r2, [r7, #12]
 800d6e2:	897b      	ldrh	r3, [r7, #10]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d304      	bcc.n	800d6f2 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800d6e8:	89ba      	ldrh	r2, [r7, #12]
 800d6ea:	897b      	ldrh	r3, [r7, #10]
 800d6ec:	1ad3      	subs	r3, r2, r3
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	e008      	b.n	800d704 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800d6f2:	89fb      	ldrh	r3, [r7, #14]
 800d6f4:	005b      	lsls	r3, r3, #1
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	89b9      	ldrh	r1, [r7, #12]
 800d6fa:	897b      	ldrh	r3, [r7, #10]
 800d6fc:	1acb      	subs	r3, r1, r3
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	4413      	add	r3, r2
 800d702:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	8892      	ldrh	r2, [r2, #4]
 800d708:	4293      	cmp	r3, r2
 800d70a:	bf2c      	ite	cs
 800d70c:	2301      	movcs	r3, #1
 800d70e:	2300      	movcc	r3, #0
 800d710:	b2db      	uxtb	r3, r3
}
 800d712:	4618      	mov	r0, r3
 800d714:	3714      	adds	r7, #20
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr

0800d71e <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 800d71e:	b580      	push	{r7, lr}
 800d720:	b084      	sub	sp, #16
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
 800d726:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	891b      	ldrh	r3, [r3, #8]
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	895b      	ldrh	r3, [r3, #10]
 800d732:	b29b      	uxth	r3, r3
 800d734:	6839      	ldr	r1, [r7, #0]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f7ff ff48 	bl	800d5cc <_tu_fifo_peek>
 800d73c:	4603      	mov	r3, r0
 800d73e:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	8898      	ldrh	r0, [r3, #4]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	895b      	ldrh	r3, [r3, #10]
 800d748:	b29b      	uxth	r3, r3
 800d74a:	7bfa      	ldrb	r2, [r7, #15]
 800d74c:	b292      	uxth	r2, r2
 800d74e:	4619      	mov	r1, r3
 800d750:	f7ff ff16 	bl	800d580 <advance_index>
 800d754:	4603      	mov	r3, r0
 800d756:	461a      	mov	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 800d75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b086      	sub	sp, #24
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	891b      	ldrh	r3, [r3, #8]
 800d774:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f7ff ffa3 	bl	800d6c2 <tu_fifo_full>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00c      	beq.n	800d79c <tu_fifo_write+0x36>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	79db      	ldrb	r3, [r3, #7]
 800d786:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	f083 0301 	eor.w	r3, r3, #1
 800d790:	b2db      	uxtb	r3, r3
 800d792:	2b00      	cmp	r3, #0
 800d794:	d002      	beq.n	800d79c <tu_fifo_write+0x36>
  {
    ret = false;
 800d796:	2300      	movs	r3, #0
 800d798:	75fb      	strb	r3, [r7, #23]
 800d79a:	e022      	b.n	800d7e2 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	889b      	ldrh	r3, [r3, #4]
 800d7a0:	823b      	strh	r3, [r7, #16]
 800d7a2:	8abb      	ldrh	r3, [r7, #20]
 800d7a4:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 800d7a6:	e003      	b.n	800d7b0 <tu_fifo_write+0x4a>
 800d7a8:	89fa      	ldrh	r2, [r7, #14]
 800d7aa:	8a3b      	ldrh	r3, [r7, #16]
 800d7ac:	1ad3      	subs	r3, r2, r3
 800d7ae:	81fb      	strh	r3, [r7, #14]
 800d7b0:	8a3a      	ldrh	r2, [r7, #16]
 800d7b2:	89fb      	ldrh	r3, [r7, #14]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d9f7      	bls.n	800d7a8 <tu_fifo_write+0x42>
  return idx;
 800d7b8:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800d7ba:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 800d7bc:	8a7b      	ldrh	r3, [r7, #18]
 800d7be:	461a      	mov	r2, r3
 800d7c0:	6839      	ldr	r1, [r7, #0]
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7ff fe9e 	bl	800d504 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	889b      	ldrh	r3, [r3, #4]
 800d7cc:	8ab9      	ldrh	r1, [r7, #20]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff fed5 	bl	800d580 <advance_index>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	461a      	mov	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	811a      	strh	r2, [r3, #8]

    ret = true;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 800d7e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3718      	adds	r7, #24
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 800d800:	2301      	movs	r3, #1
}
 800d802:	4618      	mov	r0, r3
 800d804:	370c      	adds	r7, #12
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr

0800d80e <tuh_event_hook_cb>:
  (void) cfg_id;
  (void) cfg_param;
  return false;
}

TU_ATTR_WEAK void tuh_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 800d80e:	b480      	push	{r7}
 800d810:	b083      	sub	sp, #12
 800d812:	af00      	add	r7, sp, #0
 800d814:	4603      	mov	r3, r0
 800d816:	6039      	str	r1, [r7, #0]
 800d818:	71fb      	strb	r3, [r7, #7]
 800d81a:	4613      	mov	r3, r2
 800d81c:	71bb      	strb	r3, [r7, #6]
  (void) rhport;
  (void) eventid;
  (void) in_isr;
}
 800d81e:	bf00      	nop
 800d820:	370c      	adds	r7, #12
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
	...

0800d82c <get_driver>:
tu_static usbh_class_driver_t const * _app_driver = NULL;
tu_static uint8_t _app_driver_count = 0;

#define TOTAL_DRIVER_COUNT    (_app_driver_count + BUILTIN_DRIVER_COUNT)

static inline usbh_class_driver_t const *get_driver(uint8_t drv_id) {
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	4603      	mov	r3, r0
 800d834:	71fb      	strb	r3, [r7, #7]
  usbh_class_driver_t const *driver = NULL;
 800d836:	2300      	movs	r3, #0
 800d838:	60fb      	str	r3, [r7, #12]

  if ( drv_id < _app_driver_count ) {
 800d83a:	4b13      	ldr	r3, [pc, #76]	@ (800d888 <get_driver+0x5c>)
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	79fa      	ldrb	r2, [r7, #7]
 800d840:	429a      	cmp	r2, r3
 800d842:	d209      	bcs.n	800d858 <get_driver+0x2c>
    driver = &_app_driver[drv_id];
 800d844:	4b11      	ldr	r3, [pc, #68]	@ (800d88c <get_driver+0x60>)
 800d846:	6819      	ldr	r1, [r3, #0]
 800d848:	79fa      	ldrb	r2, [r7, #7]
 800d84a:	4613      	mov	r3, r2
 800d84c:	00db      	lsls	r3, r3, #3
 800d84e:	1a9b      	subs	r3, r3, r2
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	440b      	add	r3, r1
 800d854:	60fb      	str	r3, [r7, #12]
 800d856:	e00f      	b.n	800d878 <get_driver+0x4c>
  } else if ( drv_id < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 800d858:	4b0b      	ldr	r3, [pc, #44]	@ (800d888 <get_driver+0x5c>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	79fa      	ldrb	r2, [r7, #7]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d80a      	bhi.n	800d878 <get_driver+0x4c>
    driver = &usbh_class_drivers[drv_id - _app_driver_count];
 800d862:	79fb      	ldrb	r3, [r7, #7]
 800d864:	4a08      	ldr	r2, [pc, #32]	@ (800d888 <get_driver+0x5c>)
 800d866:	7812      	ldrb	r2, [r2, #0]
 800d868:	1a9a      	subs	r2, r3, r2
 800d86a:	4613      	mov	r3, r2
 800d86c:	00db      	lsls	r3, r3, #3
 800d86e:	1a9b      	subs	r3, r3, r2
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	4a07      	ldr	r2, [pc, #28]	@ (800d890 <get_driver+0x64>)
 800d874:	4413      	add	r3, r2
 800d876:	60fb      	str	r3, [r7, #12]
  }

  return driver;
 800d878:	68fb      	ldr	r3, [r7, #12]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3714      	adds	r7, #20
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr
 800d886:	bf00      	nop
 800d888:	24001b74 	.word	0x24001b74
 800d88c:	24001b70 	.word	0x24001b70
 800d890:	08011740 	.word	0x08011740

0800d894 <tuh_speed_get>:
  *pid = dev->pid;

  return true;
}

tusb_speed_t tuh_speed_get(uint8_t dev_addr) {
 800d894:	b480      	push	{r7}
 800d896:	b085      	sub	sp, #20
 800d898:	af00      	add	r7, sp, #0
 800d89a:	4603      	mov	r3, r0
 800d89c:	71fb      	strb	r3, [r7, #7]
 800d89e:	79fb      	ldrb	r3, [r7, #7]
 800d8a0:	72fb      	strb	r3, [r7, #11]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800d8a2:	7afb      	ldrb	r3, [r7, #11]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <tuh_speed_get+0x1a>
 800d8a8:	7afb      	ldrb	r3, [r7, #11]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d901      	bls.n	800d8b2 <tuh_speed_get+0x1e>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	e006      	b.n	800d8c0 <tuh_speed_get+0x2c>
  return &_usbh_devices[dev_addr-1];
 800d8b2:	7afb      	ldrb	r3, [r7, #11]
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	2256      	movs	r2, #86	@ 0x56
 800d8b8:	fb02 f303 	mul.w	r3, r2, r3
 800d8bc:	4a11      	ldr	r2, [pc, #68]	@ (800d904 <tuh_speed_get+0x70>)
 800d8be:	4413      	add	r3, r2
  usbh_device_t *dev = get_device(dev_addr);
 800d8c0:	60fb      	str	r3, [r7, #12]
  return (tusb_speed_t) (dev ? get_device(dev_addr)->speed : _dev0.speed);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d012      	beq.n	800d8ee <tuh_speed_get+0x5a>
 800d8c8:	79fb      	ldrb	r3, [r7, #7]
 800d8ca:	72bb      	strb	r3, [r7, #10]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800d8cc:	7abb      	ldrb	r3, [r7, #10]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d002      	beq.n	800d8d8 <tuh_speed_get+0x44>
 800d8d2:	7abb      	ldrb	r3, [r7, #10]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d901      	bls.n	800d8dc <tuh_speed_get+0x48>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	e006      	b.n	800d8ea <tuh_speed_get+0x56>
  return &_usbh_devices[dev_addr-1];
 800d8dc:	7abb      	ldrb	r3, [r7, #10]
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	2256      	movs	r2, #86	@ 0x56
 800d8e2:	fb02 f303 	mul.w	r3, r2, r3
 800d8e6:	4a07      	ldr	r2, [pc, #28]	@ (800d904 <tuh_speed_get+0x70>)
 800d8e8:	4413      	add	r3, r2
  return (tusb_speed_t) (dev ? get_device(dev_addr)->speed : _dev0.speed);
 800d8ea:	78db      	ldrb	r3, [r3, #3]
 800d8ec:	e004      	b.n	800d8f8 <tuh_speed_get+0x64>
 800d8ee:	4b06      	ldr	r3, [pc, #24]	@ (800d908 <tuh_speed_get+0x74>)
 800d8f0:	78db      	ldrb	r3, [r3, #3]
 800d8f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d8f6:	b2db      	uxtb	r3, r3
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3714      	adds	r7, #20
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr
 800d904:	24001b7c 	.word	0x24001b7c
 800d908:	24001b78 	.word	0x24001b78

0800d90c <tuh_rhport_is_active>:

bool tuh_rhport_is_active(uint8_t rhport) {
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	4603      	mov	r3, r0
 800d914:	71fb      	strb	r3, [r7, #7]
  return _usbh_controller == rhport;
 800d916:	4b07      	ldr	r3, [pc, #28]	@ (800d934 <tuh_rhport_is_active+0x28>)
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	79fa      	ldrb	r2, [r7, #7]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	bf0c      	ite	eq
 800d920:	2301      	moveq	r3, #1
 800d922:	2300      	movne	r3, #0
 800d924:	b2db      	uxtb	r3, r3
}
 800d926:	4618      	mov	r0, r3
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	2400000d 	.word	0x2400000d

0800d938 <clear_device>:

bool tuh_configure(uint8_t rhport, uint32_t cfg_id, const void *cfg_param) {
  return hcd_configure(rhport, cfg_id, cfg_param);
}

static void clear_device(usbh_device_t* dev) {
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  tu_memclr(dev, sizeof(usbh_device_t));
 800d940:	2256      	movs	r2, #86	@ 0x56
 800d942:	2100      	movs	r1, #0
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f003 fa5c 	bl	8010e02 <memset>
  memset(dev->itf2drv, TUSB_INDEX_INVALID_8, sizeof(dev->itf2drv)); // invalid mapping
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	330d      	adds	r3, #13
 800d94e:	2208      	movs	r2, #8
 800d950:	21ff      	movs	r1, #255	@ 0xff
 800d952:	4618      	mov	r0, r3
 800d954:	f003 fa55 	bl	8010e02 <memset>
  memset(dev->ep2drv , TUSB_INDEX_INVALID_8, sizeof(dev->ep2drv )); // invalid mapping
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	3315      	adds	r3, #21
 800d95c:	2220      	movs	r2, #32
 800d95e:	21ff      	movs	r1, #255	@ 0xff
 800d960:	4618      	mov	r0, r3
 800d962:	f003 fa4e 	bl	8010e02 <memset>
}
 800d966:	bf00      	nop
 800d968:	3708      	adds	r7, #8
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
	...

0800d970 <tuh_inited>:

bool tuh_inited(void) {
 800d970:	b480      	push	{r7}
 800d972:	af00      	add	r7, sp, #0
  return _usbh_controller != TUSB_INDEX_INVALID_8;
 800d974:	4b05      	ldr	r3, [pc, #20]	@ (800d98c <tuh_inited+0x1c>)
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	2bff      	cmp	r3, #255	@ 0xff
 800d97a:	bf14      	ite	ne
 800d97c:	2301      	movne	r3, #1
 800d97e:	2300      	moveq	r3, #0
 800d980:	b2db      	uxtb	r3, r3
}
 800d982:	4618      	mov	r0, r3
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr
 800d98c:	2400000d 	.word	0x2400000d

0800d990 <tuh_rhport_init>:

bool tuh_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800d990:	b580      	push	{r7, lr}
 800d992:	b088      	sub	sp, #32
 800d994:	af00      	add	r7, sp, #0
 800d996:	4603      	mov	r3, r0
 800d998:	6039      	str	r1, [r7, #0]
 800d99a:	71fb      	strb	r3, [r7, #7]
  if (tuh_rhport_is_active(rhport)) {
 800d99c:	79fb      	ldrb	r3, [r7, #7]
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7ff ffb4 	bl	800d90c <tuh_rhport_is_active>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d001      	beq.n	800d9ae <tuh_rhport_init+0x1e>
    return true; // skip if already initialized
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	e07e      	b.n	800daac <tuh_rhport_init+0x11c>

  TU_LOG_USBH("USBH init on controller %u, speed = %s\r\n", rhport,
    rh_init->speed == TUSB_SPEED_HIGH ? "High" : "Full");

  // Init host stack if not already
  if (!tuh_inited()) {
 800d9ae:	f7ff ffdf 	bl	800d970 <tuh_inited>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	f083 0301 	eor.w	r3, r3, #1
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d058      	beq.n	800da70 <tuh_rhport_init+0xe0>
 800d9be:	4b3d      	ldr	r3, [pc, #244]	@ (800dab4 <tuh_rhport_init+0x124>)
 800d9c0:	60fb      	str	r3, [r7, #12]
  // enable dcd/hcd interrupt
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff ff10 	bl	800d7ec <tu_fifo_clear>
  return (osal_queue_t) qdef;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
    TU_LOG_INT_USBH(sizeof(tuh_xfer_t));
    TU_LOG_INT_USBH(sizeof(tu_fifo_t));
    TU_LOG_INT_USBH(sizeof(tu_edpt_stream_t));

    // Event queue
    _usbh_q = osal_queue_create(&_usbh_qdef);
 800d9ce:	4a3a      	ldr	r2, [pc, #232]	@ (800dab8 <tuh_rhport_init+0x128>)
 800d9d0:	6013      	str	r3, [r2, #0]
    TU_ASSERT(_usbh_q != NULL);
 800d9d2:	4b39      	ldr	r3, [pc, #228]	@ (800dab8 <tuh_rhport_init+0x128>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d10a      	bne.n	800d9f0 <tuh_rhport_init+0x60>
 800d9da:	4b38      	ldr	r3, [pc, #224]	@ (800dabc <tuh_rhport_init+0x12c>)
 800d9dc:	617b      	str	r3, [r7, #20]
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f003 0301 	and.w	r3, r3, #1
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d000      	beq.n	800d9ec <tuh_rhport_init+0x5c>
 800d9ea:	be00      	bkpt	0x0000
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	e05d      	b.n	800daac <tuh_rhport_init+0x11c>
    _usbh_mutex = osal_mutex_create(&_usbh_mutexdef);
    TU_ASSERT(_usbh_mutex);
#endif

    // Get application driver if available
    if (usbh_app_driver_get_cb) {
 800d9f0:	4b33      	ldr	r3, [pc, #204]	@ (800dac0 <tuh_rhport_init+0x130>)
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d005      	beq.n	800da02 <tuh_rhport_init+0x72>
      _app_driver = usbh_app_driver_get_cb(&_app_driver_count);
 800d9f6:	4833      	ldr	r0, [pc, #204]	@ (800dac4 <tuh_rhport_init+0x134>)
 800d9f8:	f3af 8000 	nop.w
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	4a32      	ldr	r2, [pc, #200]	@ (800dac8 <tuh_rhport_init+0x138>)
 800da00:	6013      	str	r3, [r2, #0]
    }

    // Device
    tu_memclr(&_dev0, sizeof(_dev0));
 800da02:	2204      	movs	r2, #4
 800da04:	2100      	movs	r1, #0
 800da06:	4831      	ldr	r0, [pc, #196]	@ (800dacc <tuh_rhport_init+0x13c>)
 800da08:	f003 f9fb 	bl	8010e02 <memset>
    tu_memclr(_usbh_devices, sizeof(_usbh_devices));
 800da0c:	2256      	movs	r2, #86	@ 0x56
 800da0e:	2100      	movs	r1, #0
 800da10:	482f      	ldr	r0, [pc, #188]	@ (800dad0 <tuh_rhport_init+0x140>)
 800da12:	f003 f9f6 	bl	8010e02 <memset>
    tu_memclr(&_ctrl_xfer, sizeof(_ctrl_xfer));
 800da16:	2210      	movs	r2, #16
 800da18:	2100      	movs	r1, #0
 800da1a:	482e      	ldr	r0, [pc, #184]	@ (800dad4 <tuh_rhport_init+0x144>)
 800da1c:	f003 f9f1 	bl	8010e02 <memset>

    for (uint8_t i = 0; i < TOTAL_DEVICES; i++) {
 800da20:	2300      	movs	r3, #0
 800da22:	77fb      	strb	r3, [r7, #31]
 800da24:	e00b      	b.n	800da3e <tuh_rhport_init+0xae>
      clear_device(&_usbh_devices[i]);
 800da26:	7ffb      	ldrb	r3, [r7, #31]
 800da28:	2256      	movs	r2, #86	@ 0x56
 800da2a:	fb02 f303 	mul.w	r3, r2, r3
 800da2e:	4a28      	ldr	r2, [pc, #160]	@ (800dad0 <tuh_rhport_init+0x140>)
 800da30:	4413      	add	r3, r2
 800da32:	4618      	mov	r0, r3
 800da34:	f7ff ff80 	bl	800d938 <clear_device>
    for (uint8_t i = 0; i < TOTAL_DEVICES; i++) {
 800da38:	7ffb      	ldrb	r3, [r7, #31]
 800da3a:	3301      	adds	r3, #1
 800da3c:	77fb      	strb	r3, [r7, #31]
 800da3e:	7ffb      	ldrb	r3, [r7, #31]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d0f0      	beq.n	800da26 <tuh_rhport_init+0x96>
    }

    // Class drivers
    for (uint8_t drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++) {
 800da44:	2300      	movs	r3, #0
 800da46:	77bb      	strb	r3, [r7, #30]
 800da48:	e00d      	b.n	800da66 <tuh_rhport_init+0xd6>
      usbh_class_driver_t const* driver = get_driver(drv_id);
 800da4a:	7fbb      	ldrb	r3, [r7, #30]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7ff feed 	bl	800d82c <get_driver>
 800da52:	61b8      	str	r0, [r7, #24]
      if (driver) {
 800da54:	69bb      	ldr	r3, [r7, #24]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d002      	beq.n	800da60 <tuh_rhport_init+0xd0>
        TU_LOG_USBH("%s init\r\n", driver->name);
        driver->init();
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	4798      	blx	r3
    for (uint8_t drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++) {
 800da60:	7fbb      	ldrb	r3, [r7, #30]
 800da62:	3301      	adds	r3, #1
 800da64:	77bb      	strb	r3, [r7, #30]
 800da66:	4b17      	ldr	r3, [pc, #92]	@ (800dac4 <tuh_rhport_init+0x134>)
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	7fba      	ldrb	r2, [r7, #30]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d9ec      	bls.n	800da4a <tuh_rhport_init+0xba>
      }
    }
  }

  // Init host controller
  _usbh_controller = rhport;
 800da70:	4a19      	ldr	r2, [pc, #100]	@ (800dad8 <tuh_rhport_init+0x148>)
 800da72:	79fb      	ldrb	r3, [r7, #7]
 800da74:	7013      	strb	r3, [r2, #0]
  TU_ASSERT(hcd_init(rhport, rh_init));
 800da76:	79fb      	ldrb	r3, [r7, #7]
 800da78:	6839      	ldr	r1, [r7, #0]
 800da7a:	4618      	mov	r0, r3
 800da7c:	f001 fef4 	bl	800f868 <hcd_init>
 800da80:	4603      	mov	r3, r0
 800da82:	f083 0301 	eor.w	r3, r3, #1
 800da86:	b2db      	uxtb	r3, r3
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d00a      	beq.n	800daa2 <tuh_rhport_init+0x112>
 800da8c:	4b0b      	ldr	r3, [pc, #44]	@ (800dabc <tuh_rhport_init+0x12c>)
 800da8e:	613b      	str	r3, [r7, #16]
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f003 0301 	and.w	r3, r3, #1
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d000      	beq.n	800da9e <tuh_rhport_init+0x10e>
 800da9c:	be00      	bkpt	0x0000
 800da9e:	2300      	movs	r3, #0
 800daa0:	e004      	b.n	800daac <tuh_rhport_init+0x11c>
  hcd_int_enable(rhport);
 800daa2:	79fb      	ldrb	r3, [r7, #7]
 800daa4:	4618      	mov	r0, r3
 800daa6:	f001 ff87 	bl	800f9b8 <hcd_int_enable>

  return true;
 800daaa:	2301      	movs	r3, #1
}
 800daac:	4618      	mov	r0, r3
 800daae:	3720      	adds	r7, #32
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	24000010 	.word	0x24000010
 800dab8:	24001c94 	.word	0x24001c94
 800dabc:	e000edf0 	.word	0xe000edf0
 800dac0:	00000000 	.word	0x00000000
 800dac4:	24001b74 	.word	0x24001b74
 800dac8:	24001b70 	.word	0x24001b70
 800dacc:	24001b78 	.word	0x24001b78
 800dad0:	24001b7c 	.word	0x24001b7c
 800dad4:	24001c98 	.word	0x24001c98
 800dad8:	2400000d 	.word	0x2400000d

0800dadc <tuh_task_event_ready>:
  }

  return true;
}

bool tuh_task_event_ready(void) {
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
  if (!tuh_inited()) {
 800dae2:	f7ff ff45 	bl	800d970 <tuh_inited>
 800dae6:	4603      	mov	r3, r0
 800dae8:	f083 0301 	eor.w	r3, r3, #1
 800daec:	b2db      	uxtb	r3, r3
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d001      	beq.n	800daf6 <tuh_task_event_ready+0x1a>
    return false; // Skip if stack is not initialized
 800daf2:	2300      	movs	r3, #0
 800daf4:	e013      	b.n	800db1e <tuh_task_event_ready+0x42>
  }
  return !osal_queue_empty(_usbh_q);
 800daf6:	4b0c      	ldr	r3, [pc, #48]	@ (800db28 <tuh_task_event_ready+0x4c>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	607b      	str	r3, [r7, #4]
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_empty(osal_queue_t qhdl) {
  // Skip queue lock/unlock since this function is primarily called
  // with interrupt disabled before going into low power mode
  return tu_fifo_empty(&qhdl->ff);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	3304      	adds	r3, #4
 800db00:	4618      	mov	r0, r3
 800db02:	f7ff fdc9 	bl	800d698 <tu_fifo_empty>
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	bf14      	ite	ne
 800db0c:	2301      	movne	r3, #1
 800db0e:	2300      	moveq	r3, #0
 800db10:	b2db      	uxtb	r3, r3
 800db12:	f083 0301 	eor.w	r3, r3, #1
 800db16:	b2db      	uxtb	r3, r3
 800db18:	f003 0301 	and.w	r3, r3, #1
 800db1c:	b2db      	uxtb	r3, r3
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	24001c94 	.word	0x24001c94

0800db2c <tuh_task_ext>:
        tuh_task(); // tinyusb host task
      }
    }
    @endcode
 */
void tuh_task_ext(uint32_t timeout_ms, bool in_isr) {
 800db2c:	b590      	push	{r4, r7, lr}
 800db2e:	b09f      	sub	sp, #124	@ 0x7c
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	460b      	mov	r3, r1
 800db36:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tuh_inited()) return;
 800db38:	f7ff ff1a 	bl	800d970 <tuh_inited>
 800db3c:	4603      	mov	r3, r0
 800db3e:	f083 0301 	eor.w	r3, r3, #1
 800db42:	b2db      	uxtb	r3, r3
 800db44:	2b00      	cmp	r3, #0
 800db46:	f040 817b 	bne.w	800de40 <tuh_task_ext+0x314>

  // Loop until there is no more events in the queue
  while (1) {
    hcd_event_t event;
    if (!osal_queue_receive(_usbh_q, &event, timeout_ms)) return;
 800db4a:	4bad      	ldr	r3, [pc, #692]	@ (800de00 <tuh_task_ext+0x2d4>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800db50:	f107 030c 	add.w	r3, r7, #12
 800db54:	657b      	str	r3, [r7, #84]	@ 0x54
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	653b      	str	r3, [r7, #80]	@ 0x50
 800db5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  qhdl->interrupt_set(false);
 800db5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2000      	movs	r0, #0
 800db64:	4798      	blx	r3
}
 800db66:	bf00      	nop
  bool success = tu_fifo_read(&qhdl->ff, data);
 800db68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db6a:	3304      	adds	r3, #4
 800db6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800db6e:	4618      	mov	r0, r3
 800db70:	f7ff fdd5 	bl	800d71e <tu_fifo_read>
 800db74:	4603      	mov	r3, r0
 800db76:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800db7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db7c:	647b      	str	r3, [r7, #68]	@ 0x44
  qhdl->interrupt_set(true);
 800db7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2001      	movs	r0, #1
 800db84:	4798      	blx	r3
}
 800db86:	bf00      	nop
  return success;
 800db88:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800db8c:	f083 0301 	eor.w	r3, r3, #1
 800db90:	b2db      	uxtb	r3, r3
 800db92:	2b00      	cmp	r3, #0
 800db94:	f040 8156 	bne.w	800de44 <tuh_task_ext+0x318>

    switch (event.event_id) {
 800db98:	7b7b      	ldrb	r3, [r7, #13]
 800db9a:	2b03      	cmp	r3, #3
 800db9c:	f200 814a 	bhi.w	800de34 <tuh_task_ext+0x308>
 800dba0:	a201      	add	r2, pc, #4	@ (adr r2, 800dba8 <tuh_task_ext+0x7c>)
 800dba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba6:	bf00      	nop
 800dba8:	0800dbb9 	.word	0x0800dbb9
 800dbac:	0800dcd3 	.word	0x0800dcd3
 800dbb0:	0800dce1 	.word	0x0800dce1
 800dbb4:	0800de25 	.word	0x0800de25
      case HCD_EVENT_DEVICE_ATTACH:
        // due to the shared control buffer, we must complete enumerating one device before enumerating another one.
        // TODO better to have an separated queue for newly attached devices
        if (_dev0.enumerating) {
 800dbb8:	4b92      	ldr	r3, [pc, #584]	@ (800de04 <tuh_task_ext+0x2d8>)
 800dbba:	78db      	ldrb	r3, [r3, #3]
 800dbbc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d07a      	beq.n	800dcbc <tuh_task_ext+0x190>
          // Some device can cause multiple duplicated attach events
          // drop current enumerating and start over for a proper port reset
          if (event.rhport == _dev0.rhport && event.connection.hub_addr == _dev0.hub_addr &&
 800dbc6:	7b3a      	ldrb	r2, [r7, #12]
 800dbc8:	4b8e      	ldr	r3, [pc, #568]	@ (800de04 <tuh_task_ext+0x2d8>)
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d113      	bne.n	800dbf8 <tuh_task_ext+0xcc>
 800dbd0:	7c3a      	ldrb	r2, [r7, #16]
 800dbd2:	4b8c      	ldr	r3, [pc, #560]	@ (800de04 <tuh_task_ext+0x2d8>)
 800dbd4:	785b      	ldrb	r3, [r3, #1]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d10e      	bne.n	800dbf8 <tuh_task_ext+0xcc>
              event.connection.hub_port == _dev0.hub_port) {
 800dbda:	7c7a      	ldrb	r2, [r7, #17]
 800dbdc:	4b89      	ldr	r3, [pc, #548]	@ (800de04 <tuh_task_ext+0x2d8>)
 800dbde:	789b      	ldrb	r3, [r3, #2]
          if (event.rhport == _dev0.rhport && event.connection.hub_addr == _dev0.hub_addr &&
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d109      	bne.n	800dbf8 <tuh_task_ext+0xcc>
            // abort/cancel current enumeration and start new one
            TU_LOG1("[%u:] USBH Device Attach (duplicated)\r\n", event.rhport);
            tuh_edpt_abort_xfer(0, 0);
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	f000 fb56 	bl	800e298 <tuh_edpt_abort_xfer>
            enum_new_device(&event);
 800dbec:	f107 030c 	add.w	r3, r7, #12
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f001 f9af 	bl	800ef54 <enum_new_device>
        } else {
          TU_LOG1("[%u:] USBH Device Attach\r\n", event.rhport);
          _dev0.enumerating = 1;
          enum_new_device(&event);
        }
        break;
 800dbf6:	e11f      	b.n	800de38 <tuh_task_ext+0x30c>
            bool is_empty = osal_queue_empty(_usbh_q);
 800dbf8:	4b81      	ldr	r3, [pc, #516]	@ (800de00 <tuh_task_ext+0x2d4>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	61fb      	str	r3, [r7, #28]
  return tu_fifo_empty(&qhdl->ff);
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	3304      	adds	r3, #4
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7ff fd48 	bl	800d698 <tu_fifo_empty>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dc0e:	f107 030c 	add.w	r3, r7, #12
 800dc12:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc14:	78fb      	ldrb	r3, [r7, #3]
 800dc16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  TU_ASSERT(osal_queue_send(_usbh_q, event, in_isr));
 800dc1a:	4b79      	ldr	r3, [pc, #484]	@ (800de00 <tuh_task_ext+0x2d4>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc22:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc24:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dc28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (!in_isr) {
 800dc2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dc30:	f083 0301 	eor.w	r3, r3, #1
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d006      	beq.n	800dc48 <tuh_task_ext+0x11c>
 800dc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  qhdl->interrupt_set(false);
 800dc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	2000      	movs	r0, #0
 800dc44:	4798      	blx	r3
}
 800dc46:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 800dc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc4a:	3304      	adds	r3, #4
 800dc4c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff fd89 	bl	800d766 <tu_fifo_write>
 800dc54:	4603      	mov	r3, r0
 800dc56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (!in_isr) {
 800dc5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dc5e:	f083 0301 	eor.w	r3, r3, #1
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d006      	beq.n	800dc76 <tuh_task_ext+0x14a>
 800dc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc6a:	627b      	str	r3, [r7, #36]	@ 0x24
  qhdl->interrupt_set(true);
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2001      	movs	r0, #1
 800dc72:	4798      	blx	r3
}
 800dc74:	bf00      	nop
  return success;
 800dc76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dc7a:	f083 0301 	eor.w	r3, r3, #1
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d009      	beq.n	800dc98 <tuh_task_ext+0x16c>
 800dc84:	4b60      	ldr	r3, [pc, #384]	@ (800de08 <tuh_task_ext+0x2dc>)
 800dc86:	623b      	str	r3, [r7, #32]
 800dc88:	6a3b      	ldr	r3, [r7, #32]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f003 0301 	and.w	r3, r3, #1
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00c      	beq.n	800dcae <tuh_task_ext+0x182>
 800dc94:	be00      	bkpt	0x0000
 800dc96:	e00a      	b.n	800dcae <tuh_task_ext+0x182>
  tuh_event_hook_cb(event->rhport, event->event_id, in_isr);
 800dc98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc9a:	7818      	ldrb	r0, [r3, #0]
 800dc9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc9e:	785b      	ldrb	r3, [r3, #1]
 800dca0:	4619      	mov	r1, r3
 800dca2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dca6:	461a      	mov	r2, r3
 800dca8:	f7ff fdb1 	bl	800d80e <tuh_event_hook_cb>
  return true;
 800dcac:	e000      	b.n	800dcb0 <tuh_task_ext+0x184>
  TU_ASSERT(osal_queue_send(_usbh_q, event, in_isr));
 800dcae:	bf00      	nop
            if (is_empty) {
 800dcb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f000 80bf 	beq.w	800de38 <tuh_task_ext+0x30c>
              return;
 800dcba:	e0c8      	b.n	800de4e <tuh_task_ext+0x322>
          _dev0.enumerating = 1;
 800dcbc:	4a51      	ldr	r2, [pc, #324]	@ (800de04 <tuh_task_ext+0x2d8>)
 800dcbe:	78d3      	ldrb	r3, [r2, #3]
 800dcc0:	f043 0310 	orr.w	r3, r3, #16
 800dcc4:	70d3      	strb	r3, [r2, #3]
          enum_new_device(&event);
 800dcc6:	f107 030c 	add.w	r3, r7, #12
 800dcca:	4618      	mov	r0, r3
 800dccc:	f001 f942 	bl	800ef54 <enum_new_device>
        break;
 800dcd0:	e0b2      	b.n	800de38 <tuh_task_ext+0x30c>

      case HCD_EVENT_DEVICE_REMOVE:
        TU_LOG_USBH("[%u:%u:%u] USBH DEVICE REMOVED\r\n", event.rhport, event.connection.hub_addr, event.connection.hub_port);
        process_removing_device(event.rhport, event.connection.hub_addr, event.connection.hub_port);
 800dcd2:	7b3b      	ldrb	r3, [r7, #12]
 800dcd4:	7c39      	ldrb	r1, [r7, #16]
 800dcd6:	7c7a      	ldrb	r2, [r7, #17]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f000 fe89 	bl	800e9f0 <process_removing_device>
        if (event.connection.hub_addr != 0 && event.connection.hub_port != 0) {
          // done with hub, waiting for next data on status pipe
          (void) hub_edpt_status_xfer(event.connection.hub_addr);
        }
        #endif
        break;
 800dcde:	e0ae      	b.n	800de3e <tuh_task_ext+0x312>

      case HCD_EVENT_XFER_COMPLETE: {
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 800dce0:	7c3b      	ldrb	r3, [r7, #16]
 800dce2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800dce6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dcea:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800dcec:	7ebb      	ldrb	r3, [r7, #26]
 800dcee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcf2:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 800dcf4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800dcf8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dcfc:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800dcfe:	7efb      	ldrb	r3, [r7, #27]
 800dd00:	09db      	lsrs	r3, r3, #7
 800dd02:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = (uint8_t) tu_edpt_dir(ep_addr);
 800dd04:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75

        TU_LOG_USBH("on EP %02X with %u bytes: %s\r\n", ep_addr, (unsigned int) event.xfer_complete.len, tu_str_xfer_result[event.xfer_complete.result]);

        if (event.dev_addr == 0) {
 800dd08:	7bbb      	ldrb	r3, [r7, #14]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d116      	bne.n	800dd3c <tuh_task_ext+0x210>
          // device 0 only has control endpoint
          TU_ASSERT(epnum == 0,);
 800dd0e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d00a      	beq.n	800dd2c <tuh_task_ext+0x200>
 800dd16:	4b3c      	ldr	r3, [pc, #240]	@ (800de08 <tuh_task_ext+0x2dc>)
 800dd18:	663b      	str	r3, [r7, #96]	@ 0x60
 800dd1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f003 0301 	and.w	r3, r3, #1
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f000 8090 	beq.w	800de48 <tuh_task_ext+0x31c>
 800dd28:	be00      	bkpt	0x0000
 800dd2a:	e08d      	b.n	800de48 <tuh_task_ext+0x31c>
          usbh_control_xfer_cb(event.dev_addr, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 800dd2c:	7bb8      	ldrb	r0, [r7, #14]
 800dd2e:	7c7a      	ldrb	r2, [r7, #17]
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	f897 1077 	ldrb.w	r1, [r7, #119]	@ 0x77
 800dd36:	f000 f9c7 	bl	800e0c8 <usbh_control_xfer_cb>
                TU_ASSERT(false,);
              }
            }
          }
        }
        break;
 800dd3a:	e080      	b.n	800de3e <tuh_task_ext+0x312>
          usbh_device_t* dev = get_device(event.dev_addr);
 800dd3c:	7bbb      	ldrb	r3, [r7, #14]
 800dd3e:	767b      	strb	r3, [r7, #25]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800dd40:	7e7b      	ldrb	r3, [r7, #25]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d002      	beq.n	800dd4c <tuh_task_ext+0x220>
 800dd46:	7e7b      	ldrb	r3, [r7, #25]
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d901      	bls.n	800dd50 <tuh_task_ext+0x224>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e006      	b.n	800dd5e <tuh_task_ext+0x232>
  return &_usbh_devices[dev_addr-1];
 800dd50:	7e7b      	ldrb	r3, [r7, #25]
 800dd52:	3b01      	subs	r3, #1
 800dd54:	2256      	movs	r2, #86	@ 0x56
 800dd56:	fb02 f303 	mul.w	r3, r2, r3
 800dd5a:	4a2c      	ldr	r2, [pc, #176]	@ (800de0c <tuh_task_ext+0x2e0>)
 800dd5c:	4413      	add	r3, r2
          usbh_device_t* dev = get_device(event.dev_addr);
 800dd5e:	673b      	str	r3, [r7, #112]	@ 0x70
          TU_VERIFY(dev && dev->connected,);
 800dd60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d073      	beq.n	800de4e <tuh_task_ext+0x322>
 800dd66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd68:	791b      	ldrb	r3, [r3, #4]
 800dd6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d06c      	beq.n	800de4e <tuh_task_ext+0x322>
          dev->ep_status[epnum][ep_dir].busy = 0;
 800dd74:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 800dd78:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800dd7c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800dd7e:	0052      	lsls	r2, r2, #1
 800dd80:	440a      	add	r2, r1
 800dd82:	4413      	add	r3, r2
 800dd84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dd88:	7953      	ldrb	r3, [r2, #5]
 800dd8a:	f023 0301 	bic.w	r3, r3, #1
 800dd8e:	7153      	strb	r3, [r2, #5]
          dev->ep_status[epnum][ep_dir].claimed = 0;
 800dd90:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 800dd94:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800dd98:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800dd9a:	0052      	lsls	r2, r2, #1
 800dd9c:	440a      	add	r2, r1
 800dd9e:	4413      	add	r3, r2
 800dda0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dda4:	7953      	ldrb	r3, [r2, #5]
 800dda6:	f023 0304 	bic.w	r3, r3, #4
 800ddaa:	7153      	strb	r3, [r2, #5]
          if (0 == epnum) {
 800ddac:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d107      	bne.n	800ddc4 <tuh_task_ext+0x298>
            usbh_control_xfer_cb(event.dev_addr, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 800ddb4:	7bb8      	ldrb	r0, [r7, #14]
 800ddb6:	7c7a      	ldrb	r2, [r7, #17]
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	f897 1077 	ldrb.w	r1, [r7, #119]	@ 0x77
 800ddbe:	f000 f983 	bl	800e0c8 <usbh_control_xfer_cb>
        break;
 800ddc2:	e03c      	b.n	800de3e <tuh_task_ext+0x312>
              uint8_t drv_id = dev->ep2drv[epnum][ep_dir];
 800ddc4:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 800ddc8:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800ddcc:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800ddce:	0052      	lsls	r2, r2, #1
 800ddd0:	440a      	add	r2, r1
 800ddd2:	4413      	add	r3, r2
 800ddd4:	3315      	adds	r3, #21
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
              usbh_class_driver_t const* driver = get_driver(drv_id);
 800dddc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7ff fd23 	bl	800d82c <get_driver>
 800dde6:	66b8      	str	r0, [r7, #104]	@ 0x68
              if (driver) {
 800dde8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d010      	beq.n	800de10 <tuh_task_ext+0x2e4>
                driver->xfer_cb(event.dev_addr, ep_addr, (xfer_result_t) event.xfer_complete.result,
 800ddee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ddf0:	695c      	ldr	r4, [r3, #20]
 800ddf2:	7bb8      	ldrb	r0, [r7, #14]
 800ddf4:	7c7a      	ldrb	r2, [r7, #17]
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	f897 1077 	ldrb.w	r1, [r7, #119]	@ 0x77
 800ddfc:	47a0      	blx	r4
        break;
 800ddfe:	e01e      	b.n	800de3e <tuh_task_ext+0x312>
 800de00:	24001c94 	.word	0x24001c94
 800de04:	24001b78 	.word	0x24001b78
 800de08:	e000edf0 	.word	0xe000edf0
 800de0c:	24001b7c 	.word	0x24001b7c
                TU_ASSERT(false,);
 800de10:	4b10      	ldr	r3, [pc, #64]	@ (800de54 <tuh_task_ext+0x328>)
 800de12:	667b      	str	r3, [r7, #100]	@ 0x64
 800de14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f003 0301 	and.w	r3, r3, #1
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d015      	beq.n	800de4c <tuh_task_ext+0x320>
 800de20:	be00      	bkpt	0x0000
 800de22:	e013      	b.n	800de4c <tuh_task_ext+0x320>
      }

      case USBH_EVENT_FUNC_CALL:
        if (event.func_call.func) event.func_call.func(event.func_call.param);
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d008      	beq.n	800de3c <tuh_task_ext+0x310>
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	697a      	ldr	r2, [r7, #20]
 800de2e:	4610      	mov	r0, r2
 800de30:	4798      	blx	r3
        break;
 800de32:	e003      	b.n	800de3c <tuh_task_ext+0x310>

      default:
        break;
 800de34:	bf00      	nop
 800de36:	e688      	b.n	800db4a <tuh_task_ext+0x1e>
        break;
 800de38:	bf00      	nop
 800de3a:	e686      	b.n	800db4a <tuh_task_ext+0x1e>
        break;
 800de3c:	bf00      	nop
  while (1) {
 800de3e:	e684      	b.n	800db4a <tuh_task_ext+0x1e>
  if (!tuh_inited()) return;
 800de40:	bf00      	nop
 800de42:	e004      	b.n	800de4e <tuh_task_ext+0x322>
    if (!osal_queue_receive(_usbh_q, &event, timeout_ms)) return;
 800de44:	bf00      	nop
 800de46:	e002      	b.n	800de4e <tuh_task_ext+0x322>
          TU_ASSERT(epnum == 0,);
 800de48:	bf00      	nop
 800de4a:	e000      	b.n	800de4e <tuh_task_ext+0x322>
                TU_ASSERT(false,);
 800de4c:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbh_q)) return;
#endif
  }
}
 800de4e:	377c      	adds	r7, #124	@ 0x7c
 800de50:	46bd      	mov	sp, r7
 800de52:	bd90      	pop	{r4, r7, pc}
 800de54:	e000edf0 	.word	0xe000edf0

0800de58 <_control_blocking_complete_cb>:

//--------------------------------------------------------------------+
// Control transfer
//--------------------------------------------------------------------+

static void _control_blocking_complete_cb(tuh_xfer_t* xfer) {
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  // update result
  *((xfer_result_t*) xfer->user_data) = xfer->result;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	695b      	ldr	r3, [r3, #20]
 800de64:	461a      	mov	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	78db      	ldrb	r3, [r3, #3]
 800de6a:	7013      	strb	r3, [r2, #0]
}
 800de6c:	bf00      	nop
 800de6e:	370c      	adds	r7, #12
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr

0800de78 <tuh_control_xfer>:

// TODO timeout_ms is not supported yet
bool tuh_control_xfer (tuh_xfer_t* xfer) {
 800de78:	b580      	push	{r7, lr}
 800de7a:	b088      	sub	sp, #32
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  // EP0 with setup packet
  TU_VERIFY(xfer->ep_addr == 0 && xfer->setup);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	785b      	ldrb	r3, [r3, #1]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d103      	bne.n	800de90 <tuh_control_xfer+0x18>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d101      	bne.n	800de94 <tuh_control_xfer+0x1c>
 800de90:	2300      	movs	r3, #0
 800de92:	e0c5      	b.n	800e020 <tuh_control_xfer+0x1a8>

  // Check if device is still connected (enumerating for dev0)
  const uint8_t daddr = xfer->daddr;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	77fb      	strb	r3, [r7, #31]
  if (daddr == 0) {
 800de9a:	7ffb      	ldrb	r3, [r7, #31]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d108      	bne.n	800deb2 <tuh_control_xfer+0x3a>
    TU_VERIFY(_dev0.enumerating);
 800dea0:	4b61      	ldr	r3, [pc, #388]	@ (800e028 <tuh_control_xfer+0x1b0>)
 800dea2:	78db      	ldrb	r3, [r3, #3]
 800dea4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d11f      	bne.n	800deee <tuh_control_xfer+0x76>
 800deae:	2300      	movs	r3, #0
 800deb0:	e0b6      	b.n	800e020 <tuh_control_xfer+0x1a8>
 800deb2:	7ffb      	ldrb	r3, [r7, #31]
 800deb4:	72fb      	strb	r3, [r7, #11]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800deb6:	7afb      	ldrb	r3, [r7, #11]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <tuh_control_xfer+0x4a>
 800debc:	7afb      	ldrb	r3, [r7, #11]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d901      	bls.n	800dec6 <tuh_control_xfer+0x4e>
 800dec2:	2300      	movs	r3, #0
 800dec4:	e006      	b.n	800ded4 <tuh_control_xfer+0x5c>
  return &_usbh_devices[dev_addr-1];
 800dec6:	7afb      	ldrb	r3, [r7, #11]
 800dec8:	3b01      	subs	r3, #1
 800deca:	2256      	movs	r2, #86	@ 0x56
 800decc:	fb02 f303 	mul.w	r3, r2, r3
 800ded0:	4a56      	ldr	r2, [pc, #344]	@ (800e02c <tuh_control_xfer+0x1b4>)
 800ded2:	4413      	add	r3, r2
  } else {
    const usbh_device_t* dev = get_device(daddr);
 800ded4:	61bb      	str	r3, [r7, #24]
    TU_VERIFY(dev && dev->connected);
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d006      	beq.n	800deea <tuh_control_xfer+0x72>
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	791b      	ldrb	r3, [r3, #4]
 800dee0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d101      	bne.n	800deee <tuh_control_xfer+0x76>
 800deea:	2300      	movs	r3, #0
 800deec:	e098      	b.n	800e020 <tuh_control_xfer+0x1a8>
  }

  // pre-check to help reducing mutex lock
  TU_VERIFY(_ctrl_xfer.stage == CONTROL_STAGE_IDLE);
 800deee:	4b50      	ldr	r3, [pc, #320]	@ (800e030 <tuh_control_xfer+0x1b8>)
 800def0:	7b5b      	ldrb	r3, [r3, #13]
 800def2:	b2db      	uxtb	r3, r3
 800def4:	2b00      	cmp	r3, #0
 800def6:	d001      	beq.n	800defc <tuh_control_xfer+0x84>
 800def8:	2300      	movs	r3, #0
 800defa:	e091      	b.n	800e020 <tuh_control_xfer+0x1a8>
  (void) osal_mutex_lock(_usbh_mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  bool const is_idle = (_ctrl_xfer.stage == CONTROL_STAGE_IDLE);
 800defc:	4b4c      	ldr	r3, [pc, #304]	@ (800e030 <tuh_control_xfer+0x1b8>)
 800defe:	7b5b      	ldrb	r3, [r3, #13]
 800df00:	b2db      	uxtb	r3, r3
 800df02:	2b00      	cmp	r3, #0
 800df04:	bf0c      	ite	eq
 800df06:	2301      	moveq	r3, #1
 800df08:	2300      	movne	r3, #0
 800df0a:	75fb      	strb	r3, [r7, #23]
  if (is_idle) {
 800df0c:	7dfb      	ldrb	r3, [r7, #23]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d01a      	beq.n	800df48 <tuh_control_xfer+0xd0>
    _ctrl_xfer.stage       = CONTROL_STAGE_SETUP;
 800df12:	4b47      	ldr	r3, [pc, #284]	@ (800e030 <tuh_control_xfer+0x1b8>)
 800df14:	2201      	movs	r2, #1
 800df16:	735a      	strb	r2, [r3, #13]
    _ctrl_xfer.daddr       = daddr;
 800df18:	4a45      	ldr	r2, [pc, #276]	@ (800e030 <tuh_control_xfer+0x1b8>)
 800df1a:	7ffb      	ldrb	r3, [r7, #31]
 800df1c:	7313      	strb	r3, [r2, #12]
    _ctrl_xfer.actual_len  = 0;
 800df1e:	4b44      	ldr	r3, [pc, #272]	@ (800e030 <tuh_control_xfer+0x1b8>)
 800df20:	2200      	movs	r2, #0
 800df22:	81da      	strh	r2, [r3, #14]

    _ctrl_xfer.buffer      = xfer->buffer;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	4a41      	ldr	r2, [pc, #260]	@ (800e030 <tuh_control_xfer+0x1b8>)
 800df2a:	6013      	str	r3, [r2, #0]
    _ctrl_xfer.complete_cb = xfer->complete_cb;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	4a3f      	ldr	r2, [pc, #252]	@ (800e030 <tuh_control_xfer+0x1b8>)
 800df32:	6053      	str	r3, [r2, #4]
    _ctrl_xfer.user_data   = xfer->user_data;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	695b      	ldr	r3, [r3, #20]
 800df38:	4a3d      	ldr	r2, [pc, #244]	@ (800e030 <tuh_control_xfer+0x1b8>)
 800df3a:	6093      	str	r3, [r2, #8]
    _usbh_epbuf.request    = (*xfer->setup);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	689a      	ldr	r2, [r3, #8]
 800df40:	4b3c      	ldr	r3, [pc, #240]	@ (800e034 <tuh_control_xfer+0x1bc>)
 800df42:	6810      	ldr	r0, [r2, #0]
 800df44:	6851      	ldr	r1, [r2, #4]
 800df46:	c303      	stmia	r3!, {r0, r1}
  }

  (void) osal_mutex_unlock(_usbh_mutex);

  TU_VERIFY(is_idle);
 800df48:	7dfb      	ldrb	r3, [r7, #23]
 800df4a:	f083 0301 	eor.w	r3, r3, #1
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	2b00      	cmp	r3, #0
 800df52:	d001      	beq.n	800df58 <tuh_control_xfer+0xe0>
 800df54:	2300      	movs	r3, #0
 800df56:	e063      	b.n	800e020 <tuh_control_xfer+0x1a8>
  const uint8_t rhport = usbh_get_rhport(daddr);
 800df58:	7ffb      	ldrb	r3, [r7, #31]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f000 fa20 	bl	800e3a0 <usbh_get_rhport>
 800df60:	4603      	mov	r3, r0
 800df62:	75bb      	strb	r3, [r7, #22]
  TU_LOG_USBH("[%u:%u] %s: ", rhport, daddr,
              (xfer->setup->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD && xfer->setup->bRequest <= TUSB_REQ_SYNCH_FRAME) ?
                  tu_str_std_request[xfer->setup->bRequest] : "Class Request");
  TU_LOG_BUF_USBH(xfer->setup, 8);

  if (xfer->complete_cb) {
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d016      	beq.n	800df9a <tuh_control_xfer+0x122>
    TU_ASSERT( hcd_setup_send(rhport, daddr, (uint8_t const*) &_usbh_epbuf.request) );
 800df6c:	7ff9      	ldrb	r1, [r7, #31]
 800df6e:	7dbb      	ldrb	r3, [r7, #22]
 800df70:	4a30      	ldr	r2, [pc, #192]	@ (800e034 <tuh_control_xfer+0x1bc>)
 800df72:	4618      	mov	r0, r3
 800df74:	f002 f894 	bl	80100a0 <hcd_setup_send>
 800df78:	4603      	mov	r3, r0
 800df7a:	f083 0301 	eor.w	r3, r3, #1
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	2b00      	cmp	r3, #0
 800df82:	d04c      	beq.n	800e01e <tuh_control_xfer+0x1a6>
 800df84:	4b2c      	ldr	r3, [pc, #176]	@ (800e038 <tuh_control_xfer+0x1c0>)
 800df86:	60fb      	str	r3, [r7, #12]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f003 0301 	and.w	r3, r3, #1
 800df90:	2b00      	cmp	r3, #0
 800df92:	d000      	beq.n	800df96 <tuh_control_xfer+0x11e>
 800df94:	be00      	bkpt	0x0000
 800df96:	2300      	movs	r3, #0
 800df98:	e042      	b.n	800e020 <tuh_control_xfer+0x1a8>
  }else {
    // blocking if complete callback is not provided
    // change callback to internal blocking, and result as user argument
    volatile xfer_result_t result = XFER_RESULT_INVALID;
 800df9a:	2304      	movs	r3, #4
 800df9c:	72bb      	strb	r3, [r7, #10]

    // use user_data to point to xfer_result_t
    _ctrl_xfer.user_data   = (uintptr_t) &result;
 800df9e:	f107 030a 	add.w	r3, r7, #10
 800dfa2:	4a23      	ldr	r2, [pc, #140]	@ (800e030 <tuh_control_xfer+0x1b8>)
 800dfa4:	6093      	str	r3, [r2, #8]
    _ctrl_xfer.complete_cb = _control_blocking_complete_cb;
 800dfa6:	4b22      	ldr	r3, [pc, #136]	@ (800e030 <tuh_control_xfer+0x1b8>)
 800dfa8:	4a24      	ldr	r2, [pc, #144]	@ (800e03c <tuh_control_xfer+0x1c4>)
 800dfaa:	605a      	str	r2, [r3, #4]

    TU_ASSERT( hcd_setup_send(rhport, daddr, (uint8_t*) &_usbh_epbuf.request) );
 800dfac:	7ff9      	ldrb	r1, [r7, #31]
 800dfae:	7dbb      	ldrb	r3, [r7, #22]
 800dfb0:	4a20      	ldr	r2, [pc, #128]	@ (800e034 <tuh_control_xfer+0x1bc>)
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f002 f874 	bl	80100a0 <hcd_setup_send>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	f083 0301 	eor.w	r3, r3, #1
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d015      	beq.n	800dff0 <tuh_control_xfer+0x178>
 800dfc4:	4b1c      	ldr	r3, [pc, #112]	@ (800e038 <tuh_control_xfer+0x1c0>)
 800dfc6:	613b      	str	r3, [r7, #16]
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f003 0301 	and.w	r3, r3, #1
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d000      	beq.n	800dfd6 <tuh_control_xfer+0x15e>
 800dfd4:	be00      	bkpt	0x0000
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	e022      	b.n	800e020 <tuh_control_xfer+0x1a8>

    while (result == XFER_RESULT_INVALID) {
      // Note: this can be called within an callback ie. part of tuh_task()
      // therefore event with RTOS tuh_task() still need to be invoked
      if (tuh_task_event_ready()) {
 800dfda:	f7ff fd7f 	bl	800dadc <tuh_task_event_ready>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d005      	beq.n	800dff0 <tuh_control_xfer+0x178>
  tuh_task_ext(UINT32_MAX, false);
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfea:	f7ff fd9f 	bl	800db2c <tuh_task_ext>
}
 800dfee:	bf00      	nop
    while (result == XFER_RESULT_INVALID) {
 800dff0:	7abb      	ldrb	r3, [r7, #10]
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	2b04      	cmp	r3, #4
 800dff6:	d0f0      	beq.n	800dfda <tuh_control_xfer+0x162>
      }
      // TODO probably some timeout to prevent hanged
    }

    // update transfer result, user_data is expected to point to xfer_result_t
    if (xfer->user_data != 0) {
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	695b      	ldr	r3, [r3, #20]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d004      	beq.n	800e00a <tuh_control_xfer+0x192>
      *((xfer_result_t*) xfer->user_data) = result;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	695b      	ldr	r3, [r3, #20]
 800e004:	7aba      	ldrb	r2, [r7, #10]
 800e006:	b2d2      	uxtb	r2, r2
 800e008:	701a      	strb	r2, [r3, #0]
    }
    xfer->result     = result;
 800e00a:	7abb      	ldrb	r3, [r7, #10]
 800e00c:	b2da      	uxtb	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	70da      	strb	r2, [r3, #3]
    xfer->actual_len = _ctrl_xfer.actual_len;
 800e012:	4b07      	ldr	r3, [pc, #28]	@ (800e030 <tuh_control_xfer+0x1b8>)
 800e014:	89db      	ldrh	r3, [r3, #14]
 800e016:	b29b      	uxth	r3, r3
 800e018:	461a      	mov	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	605a      	str	r2, [r3, #4]
  }

  return true;
 800e01e:	2301      	movs	r3, #1
}
 800e020:	4618      	mov	r0, r3
 800e022:	3720      	adds	r7, #32
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	24001b78 	.word	0x24001b78
 800e02c:	24001b7c 	.word	0x24001b7c
 800e030:	24001c98 	.word	0x24001c98
 800e034:	24001ca8 	.word	0x24001ca8
 800e038:	e000edf0 	.word	0xe000edf0
 800e03c:	0800de59 	.word	0x0800de59

0800e040 <_control_xfer_complete>:
  (void) osal_mutex_lock(_usbh_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
  _ctrl_xfer.stage = stage;
  (void) osal_mutex_unlock(_usbh_mutex);
}

static void _control_xfer_complete(uint8_t daddr, xfer_result_t result) {
 800e040:	b580      	push	{r7, lr}
 800e042:	b08c      	sub	sp, #48	@ 0x30
 800e044:	af00      	add	r7, sp, #0
 800e046:	4603      	mov	r3, r0
 800e048:	460a      	mov	r2, r1
 800e04a:	71fb      	strb	r3, [r7, #7]
 800e04c:	4613      	mov	r3, r2
 800e04e:	71bb      	strb	r3, [r7, #6]
  TU_LOG_USBH("\r\n");

  // duplicate xfer since user can execute control transfer within callback
  tusb_control_request_t const request = _usbh_epbuf.request;
 800e050:	4a1b      	ldr	r2, [pc, #108]	@ (800e0c0 <_control_xfer_complete+0x80>)
 800e052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e056:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e05a:	e883 0003 	stmia.w	r3, {r0, r1}
  tuh_xfer_t xfer_temp = {
 800e05e:	f107 030c 	add.w	r3, r7, #12
 800e062:	2200      	movs	r2, #0
 800e064:	601a      	str	r2, [r3, #0]
 800e066:	605a      	str	r2, [r3, #4]
 800e068:	609a      	str	r2, [r3, #8]
 800e06a:	60da      	str	r2, [r3, #12]
 800e06c:	611a      	str	r2, [r3, #16]
 800e06e:	615a      	str	r2, [r3, #20]
 800e070:	79fb      	ldrb	r3, [r7, #7]
 800e072:	733b      	strb	r3, [r7, #12]
 800e074:	79bb      	ldrb	r3, [r7, #6]
 800e076:	73fb      	strb	r3, [r7, #15]
    .daddr       = daddr,
    .ep_addr     = 0,
    .result      = result,
    .setup       = &request,
    .actual_len  = (uint32_t) _ctrl_xfer.actual_len,
 800e078:	4b12      	ldr	r3, [pc, #72]	@ (800e0c4 <_control_xfer_complete+0x84>)
 800e07a:	89db      	ldrh	r3, [r3, #14]
 800e07c:	b29b      	uxth	r3, r3
  tuh_xfer_t xfer_temp = {
 800e07e:	613b      	str	r3, [r7, #16]
 800e080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e084:	617b      	str	r3, [r7, #20]
    .buffer      = _ctrl_xfer.buffer,
 800e086:	4b0f      	ldr	r3, [pc, #60]	@ (800e0c4 <_control_xfer_complete+0x84>)
 800e088:	681b      	ldr	r3, [r3, #0]
  tuh_xfer_t xfer_temp = {
 800e08a:	61bb      	str	r3, [r7, #24]
    .complete_cb = _ctrl_xfer.complete_cb,
 800e08c:	4b0d      	ldr	r3, [pc, #52]	@ (800e0c4 <_control_xfer_complete+0x84>)
 800e08e:	685b      	ldr	r3, [r3, #4]
  tuh_xfer_t xfer_temp = {
 800e090:	61fb      	str	r3, [r7, #28]
    .user_data   = _ctrl_xfer.user_data
 800e092:	4b0c      	ldr	r3, [pc, #48]	@ (800e0c4 <_control_xfer_complete+0x84>)
 800e094:	689b      	ldr	r3, [r3, #8]
  tuh_xfer_t xfer_temp = {
 800e096:	623b      	str	r3, [r7, #32]
 800e098:	2300      	movs	r3, #0
 800e09a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  _ctrl_xfer.stage = stage;
 800e09e:	4a09      	ldr	r2, [pc, #36]	@ (800e0c4 <_control_xfer_complete+0x84>)
 800e0a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0a4:	7353      	strb	r3, [r2, #13]
}
 800e0a6:	bf00      	nop
  };

  _set_control_xfer_stage(CONTROL_STAGE_IDLE);

  if (xfer_temp.complete_cb) {
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d004      	beq.n	800e0b8 <_control_xfer_complete+0x78>
    xfer_temp.complete_cb(&xfer_temp);
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	f107 020c 	add.w	r2, r7, #12
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	4798      	blx	r3
  }
}
 800e0b8:	bf00      	nop
 800e0ba:	3730      	adds	r7, #48	@ 0x30
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	24001ca8 	.word	0x24001ca8
 800e0c4:	24001c98 	.word	0x24001c98

0800e0c8 <usbh_control_xfer_cb>:

static bool usbh_control_xfer_cb (uint8_t daddr, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800e0c8:	b590      	push	{r4, r7, lr}
 800e0ca:	b08b      	sub	sp, #44	@ 0x2c
 800e0cc:	af02      	add	r7, sp, #8
 800e0ce:	603b      	str	r3, [r7, #0]
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	71fb      	strb	r3, [r7, #7]
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	71bb      	strb	r3, [r7, #6]
 800e0d8:	4613      	mov	r3, r2
 800e0da:	717b      	strb	r3, [r7, #5]
  (void) ep_addr;

  const uint8_t rhport = usbh_get_rhport(daddr);
 800e0dc:	79fb      	ldrb	r3, [r7, #7]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f000 f95e 	bl	800e3a0 <usbh_get_rhport>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	777b      	strb	r3, [r7, #29]
  tusb_control_request_t const * request = &_usbh_epbuf.request;
 800e0e8:	4b68      	ldr	r3, [pc, #416]	@ (800e28c <usbh_control_xfer_cb+0x1c4>)
 800e0ea:	61bb      	str	r3, [r7, #24]

  if (XFER_RESULT_SUCCESS != result) {
 800e0ec:	797b      	ldrb	r3, [r7, #5]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d006      	beq.n	800e100 <usbh_control_xfer_cb+0x38>
    TU_LOG_USBH("[%u:%u] Control %s, xferred_bytes = %" PRIu32 "\r\n", rhport, daddr, result == XFER_RESULT_STALLED ? "STALLED" : "FAILED", xferred_bytes);
    TU_LOG_BUF_USBH(request, 8);

    // terminate transfer if any stage failed
    _control_xfer_complete(daddr, result);
 800e0f2:	797a      	ldrb	r2, [r7, #5]
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	4611      	mov	r1, r2
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7ff ffa1 	bl	800e040 <_control_xfer_complete>
 800e0fe:	e0c0      	b.n	800e282 <usbh_control_xfer_cb+0x1ba>
  }else {
    switch(_ctrl_xfer.stage) {
 800e100:	4b63      	ldr	r3, [pc, #396]	@ (800e290 <usbh_control_xfer_cb+0x1c8>)
 800e102:	7b5b      	ldrb	r3, [r3, #13]
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b03      	cmp	r3, #3
 800e108:	f000 8082 	beq.w	800e210 <usbh_control_xfer_cb+0x148>
 800e10c:	2b03      	cmp	r3, #3
 800e10e:	f300 80b5 	bgt.w	800e27c <usbh_control_xfer_cb+0x1b4>
 800e112:	2b01      	cmp	r3, #1
 800e114:	d002      	beq.n	800e11c <usbh_control_xfer_cb+0x54>
 800e116:	2b02      	cmp	r3, #2
 800e118:	d03f      	beq.n	800e19a <usbh_control_xfer_cb+0xd2>
 800e11a:	e0af      	b.n	800e27c <usbh_control_xfer_cb+0x1b4>
      case CONTROL_STAGE_SETUP:
        if (request->wLength) {
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	88db      	ldrh	r3, [r3, #6]
 800e120:	b29b      	uxth	r3, r3
 800e122:	2b00      	cmp	r3, #0
 800e124:	d039      	beq.n	800e19a <usbh_control_xfer_cb+0xd2>
 800e126:	2302      	movs	r3, #2
 800e128:	737b      	strb	r3, [r7, #13]
  _ctrl_xfer.stage = stage;
 800e12a:	4a59      	ldr	r2, [pc, #356]	@ (800e290 <usbh_control_xfer_cb+0x1c8>)
 800e12c:	7b7b      	ldrb	r3, [r7, #13]
 800e12e:	7353      	strb	r3, [r2, #13]
}
 800e130:	bf00      	nop
          // DATA stage: initial data toggle is always 1
          _set_control_xfer_stage(CONTROL_STAGE_DATA);
          TU_ASSERT( hcd_edpt_xfer(rhport, daddr, tu_edpt_addr(0, request->bmRequestType_bit.direction), _ctrl_xfer.buffer, request->wLength) );
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	461a      	mov	r2, r3
 800e13e:	2300      	movs	r3, #0
 800e140:	73fb      	strb	r3, [r7, #15]
 800e142:	4613      	mov	r3, r2
 800e144:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 800e146:	7bbb      	ldrb	r3, [r7, #14]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d002      	beq.n	800e152 <usbh_control_xfer_cb+0x8a>
 800e14c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800e150:	e000      	b.n	800e154 <usbh_control_xfer_cb+0x8c>
 800e152:	2300      	movs	r3, #0
 800e154:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800e158:	4313      	orrs	r3, r2
 800e15a:	b25b      	sxtb	r3, r3
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	4b4c      	ldr	r3, [pc, #304]	@ (800e290 <usbh_control_xfer_cb+0x1c8>)
 800e160:	681c      	ldr	r4, [r3, #0]
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	88db      	ldrh	r3, [r3, #6]
 800e166:	b29b      	uxth	r3, r3
 800e168:	79f9      	ldrb	r1, [r7, #7]
 800e16a:	7f78      	ldrb	r0, [r7, #29]
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	4623      	mov	r3, r4
 800e170:	f001 fec6 	bl	800ff00 <hcd_edpt_xfer>
 800e174:	4603      	mov	r3, r0
 800e176:	f083 0301 	eor.w	r3, r3, #1
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00a      	beq.n	800e196 <usbh_control_xfer_cb+0xce>
 800e180:	4b44      	ldr	r3, [pc, #272]	@ (800e294 <usbh_control_xfer_cb+0x1cc>)
 800e182:	617b      	str	r3, [r7, #20]
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f003 0301 	and.w	r3, r3, #1
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d000      	beq.n	800e192 <usbh_control_xfer_cb+0xca>
 800e190:	be00      	bkpt	0x0000
 800e192:	2300      	movs	r3, #0
 800e194:	e076      	b.n	800e284 <usbh_control_xfer_cb+0x1bc>
          return true;
 800e196:	2301      	movs	r3, #1
 800e198:	e074      	b.n	800e284 <usbh_control_xfer_cb+0x1bc>
        }
        TU_ATTR_FALLTHROUGH;

      case CONTROL_STAGE_DATA:
        if (request->wLength) {
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	88db      	ldrh	r3, [r3, #6]
          TU_LOG_USBH("[%u:%u] Control data:\r\n", rhport, daddr);
          TU_LOG_MEM_USBH(_ctrl_xfer.buffer, xferred_bytes, 2);
        }

        _ctrl_xfer.actual_len = (uint16_t) xferred_bytes;
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	4b3b      	ldr	r3, [pc, #236]	@ (800e290 <usbh_control_xfer_cb+0x1c8>)
 800e1a4:	81da      	strh	r2, [r3, #14]
 800e1a6:	2303      	movs	r3, #3
 800e1a8:	72bb      	strb	r3, [r7, #10]
  _ctrl_xfer.stage = stage;
 800e1aa:	4a39      	ldr	r2, [pc, #228]	@ (800e290 <usbh_control_xfer_cb+0x1c8>)
 800e1ac:	7abb      	ldrb	r3, [r7, #10]
 800e1ae:	7353      	strb	r3, [r2, #13]
}
 800e1b0:	bf00      	nop

        // ACK stage: toggle is always 1
        _set_control_xfer_stage(CONTROL_STAGE_ACK);
        TU_ASSERT( hcd_edpt_xfer(rhport, daddr, tu_edpt_addr(0, 1 - request->bmRequestType_bit.direction), NULL, 0) );
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	f1c3 0301 	rsb	r3, r3, #1
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	733a      	strb	r2, [r7, #12]
 800e1c6:	72fb      	strb	r3, [r7, #11]
 800e1c8:	7afb      	ldrb	r3, [r7, #11]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d002      	beq.n	800e1d4 <usbh_control_xfer_cb+0x10c>
 800e1ce:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800e1d2:	e000      	b.n	800e1d6 <usbh_control_xfer_cb+0x10e>
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	b25b      	sxtb	r3, r3
 800e1de:	b2da      	uxtb	r2, r3
 800e1e0:	79f9      	ldrb	r1, [r7, #7]
 800e1e2:	7f78      	ldrb	r0, [r7, #29]
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	f001 fe89 	bl	800ff00 <hcd_edpt_xfer>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	f083 0301 	eor.w	r3, r3, #1
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d042      	beq.n	800e280 <usbh_control_xfer_cb+0x1b8>
 800e1fa:	4b26      	ldr	r3, [pc, #152]	@ (800e294 <usbh_control_xfer_cb+0x1cc>)
 800e1fc:	613b      	str	r3, [r7, #16]
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f003 0301 	and.w	r3, r3, #1
 800e206:	2b00      	cmp	r3, #0
 800e208:	d000      	beq.n	800e20c <usbh_control_xfer_cb+0x144>
 800e20a:	be00      	bkpt	0x0000
 800e20c:	2300      	movs	r3, #0
 800e20e:	e039      	b.n	800e284 <usbh_control_xfer_cb+0x1bc>
        break;

      case CONTROL_STAGE_ACK: {
        // Abort all pending transfers if SET_CONFIGURATION request
        // NOTE: should we force closing all non-control endpoints in the future?
        if (request->bRequest == TUSB_REQ_SET_CONFIGURATION && request->bmRequestType == 0x00) {
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	785b      	ldrb	r3, [r3, #1]
 800e214:	2b09      	cmp	r3, #9
 800e216:	d12a      	bne.n	800e26e <usbh_control_xfer_cb+0x1a6>
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d126      	bne.n	800e26e <usbh_control_xfer_cb+0x1a6>
          for(uint8_t epnum=1; epnum<CFG_TUH_ENDPOINT_MAX; epnum++) {
 800e220:	2301      	movs	r3, #1
 800e222:	77fb      	strb	r3, [r7, #31]
 800e224:	e020      	b.n	800e268 <usbh_control_xfer_cb+0x1a0>
            for(uint8_t dir=0; dir<2; dir++) {
 800e226:	2300      	movs	r3, #0
 800e228:	77bb      	strb	r3, [r7, #30]
 800e22a:	e017      	b.n	800e25c <usbh_control_xfer_cb+0x194>
 800e22c:	7ffb      	ldrb	r3, [r7, #31]
 800e22e:	727b      	strb	r3, [r7, #9]
 800e230:	7fbb      	ldrb	r3, [r7, #30]
 800e232:	723b      	strb	r3, [r7, #8]
 800e234:	7a3b      	ldrb	r3, [r7, #8]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d002      	beq.n	800e240 <usbh_control_xfer_cb+0x178>
 800e23a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800e23e:	e000      	b.n	800e242 <usbh_control_xfer_cb+0x17a>
 800e240:	2300      	movs	r3, #0
 800e242:	f997 2009 	ldrsb.w	r2, [r7, #9]
 800e246:	4313      	orrs	r3, r2
 800e248:	b25b      	sxtb	r3, r3
 800e24a:	b2da      	uxtb	r2, r3
              tuh_edpt_abort_xfer(daddr, tu_edpt_addr(epnum, dir));
 800e24c:	79fb      	ldrb	r3, [r7, #7]
 800e24e:	4611      	mov	r1, r2
 800e250:	4618      	mov	r0, r3
 800e252:	f000 f821 	bl	800e298 <tuh_edpt_abort_xfer>
            for(uint8_t dir=0; dir<2; dir++) {
 800e256:	7fbb      	ldrb	r3, [r7, #30]
 800e258:	3301      	adds	r3, #1
 800e25a:	77bb      	strb	r3, [r7, #30]
 800e25c:	7fbb      	ldrb	r3, [r7, #30]
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d9e4      	bls.n	800e22c <usbh_control_xfer_cb+0x164>
          for(uint8_t epnum=1; epnum<CFG_TUH_ENDPOINT_MAX; epnum++) {
 800e262:	7ffb      	ldrb	r3, [r7, #31]
 800e264:	3301      	adds	r3, #1
 800e266:	77fb      	strb	r3, [r7, #31]
 800e268:	7ffb      	ldrb	r3, [r7, #31]
 800e26a:	2b0f      	cmp	r3, #15
 800e26c:	d9db      	bls.n	800e226 <usbh_control_xfer_cb+0x15e>
            }
          }
        }

        _control_xfer_complete(daddr, result);
 800e26e:	797a      	ldrb	r2, [r7, #5]
 800e270:	79fb      	ldrb	r3, [r7, #7]
 800e272:	4611      	mov	r1, r2
 800e274:	4618      	mov	r0, r3
 800e276:	f7ff fee3 	bl	800e040 <_control_xfer_complete>
        break;
 800e27a:	e002      	b.n	800e282 <usbh_control_xfer_cb+0x1ba>
      }

      default: return false;
 800e27c:	2300      	movs	r3, #0
 800e27e:	e001      	b.n	800e284 <usbh_control_xfer_cb+0x1bc>
        break;
 800e280:	bf00      	nop
    }
  }

  return true;
 800e282:	2301      	movs	r3, #1
}
 800e284:	4618      	mov	r0, r3
 800e286:	3724      	adds	r7, #36	@ 0x24
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd90      	pop	{r4, r7, pc}
 800e28c:	24001ca8 	.word	0x24001ca8
 800e290:	24001c98 	.word	0x24001c98
 800e294:	e000edf0 	.word	0xe000edf0

0800e298 <tuh_edpt_abort_xfer>:
  }

  return true;
}

bool tuh_edpt_abort_xfer(uint8_t daddr, uint8_t ep_addr) {
 800e298:	b580      	push	{r7, lr}
 800e29a:	b086      	sub	sp, #24
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	4603      	mov	r3, r0
 800e2a0:	460a      	mov	r2, r1
 800e2a2:	71fb      	strb	r3, [r7, #7]
 800e2a4:	4613      	mov	r3, r2
 800e2a6:	71bb      	strb	r3, [r7, #6]
 800e2a8:	79bb      	ldrb	r3, [r7, #6]
 800e2aa:	737b      	strb	r3, [r7, #13]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800e2ac:	7b7b      	ldrb	r3, [r7, #13]
 800e2ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2b2:	b2db      	uxtb	r3, r3
  TU_LOG_USBH("[%u] Aborted transfer on EP %02X\r\n", daddr, ep_addr);

  const uint8_t epnum = tu_edpt_number(ep_addr);
 800e2b4:	75fb      	strb	r3, [r7, #23]
 800e2b6:	79bb      	ldrb	r3, [r7, #6]
 800e2b8:	73bb      	strb	r3, [r7, #14]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800e2ba:	7bbb      	ldrb	r3, [r7, #14]
 800e2bc:	09db      	lsrs	r3, r3, #7
 800e2be:	b2db      	uxtb	r3, r3
  const uint8_t dir   = tu_edpt_dir(ep_addr);
 800e2c0:	75bb      	strb	r3, [r7, #22]

  if (epnum == 0) {
 800e2c2:	7dfb      	ldrb	r3, [r7, #23]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d11d      	bne.n	800e304 <tuh_edpt_abort_xfer+0x6c>
    // Also include dev0 for aborting enumerating
    const uint8_t rhport = usbh_get_rhport(daddr);
 800e2c8:	79fb      	ldrb	r3, [r7, #7]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f000 f868 	bl	800e3a0 <usbh_get_rhport>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	73fb      	strb	r3, [r7, #15]

    // control transfer: only 1 control at a time, check if we are aborting the current one
    TU_VERIFY(daddr == _ctrl_xfer.daddr && _ctrl_xfer.stage != CONTROL_STAGE_IDLE);
 800e2d4:	4b30      	ldr	r3, [pc, #192]	@ (800e398 <tuh_edpt_abort_xfer+0x100>)
 800e2d6:	7b1b      	ldrb	r3, [r3, #12]
 800e2d8:	79fa      	ldrb	r2, [r7, #7]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d104      	bne.n	800e2e8 <tuh_edpt_abort_xfer+0x50>
 800e2de:	4b2e      	ldr	r3, [pc, #184]	@ (800e398 <tuh_edpt_abort_xfer+0x100>)
 800e2e0:	7b5b      	ldrb	r3, [r3, #13]
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d101      	bne.n	800e2ec <tuh_edpt_abort_xfer+0x54>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	e051      	b.n	800e390 <tuh_edpt_abort_xfer+0xf8>
    hcd_edpt_abort_xfer(rhport, daddr, ep_addr);
 800e2ec:	79ba      	ldrb	r2, [r7, #6]
 800e2ee:	79f9      	ldrb	r1, [r7, #7]
 800e2f0:	7bfb      	ldrb	r3, [r7, #15]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f001 fe80 	bl	800fff8 <hcd_edpt_abort_xfer>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	733b      	strb	r3, [r7, #12]
  _ctrl_xfer.stage = stage;
 800e2fc:	4a26      	ldr	r2, [pc, #152]	@ (800e398 <tuh_edpt_abort_xfer+0x100>)
 800e2fe:	7b3b      	ldrb	r3, [r7, #12]
 800e300:	7353      	strb	r3, [r2, #13]
}
 800e302:	e044      	b.n	800e38e <tuh_edpt_abort_xfer+0xf6>
 800e304:	79fb      	ldrb	r3, [r7, #7]
 800e306:	72fb      	strb	r3, [r7, #11]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800e308:	7afb      	ldrb	r3, [r7, #11]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d002      	beq.n	800e314 <tuh_edpt_abort_xfer+0x7c>
 800e30e:	7afb      	ldrb	r3, [r7, #11]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d901      	bls.n	800e318 <tuh_edpt_abort_xfer+0x80>
 800e314:	2300      	movs	r3, #0
 800e316:	e006      	b.n	800e326 <tuh_edpt_abort_xfer+0x8e>
  return &_usbh_devices[dev_addr-1];
 800e318:	7afb      	ldrb	r3, [r7, #11]
 800e31a:	3b01      	subs	r3, #1
 800e31c:	2256      	movs	r2, #86	@ 0x56
 800e31e:	fb02 f303 	mul.w	r3, r2, r3
 800e322:	4a1e      	ldr	r2, [pc, #120]	@ (800e39c <tuh_edpt_abort_xfer+0x104>)
 800e324:	4413      	add	r3, r2
    _set_control_xfer_stage(CONTROL_STAGE_IDLE); // reset control transfer state to idle
  } else {
    usbh_device_t* dev = get_device(daddr);
 800e326:	613b      	str	r3, [r7, #16]
    TU_VERIFY(dev);
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d101      	bne.n	800e332 <tuh_edpt_abort_xfer+0x9a>
 800e32e:	2300      	movs	r3, #0
 800e330:	e02e      	b.n	800e390 <tuh_edpt_abort_xfer+0xf8>

    TU_VERIFY(dev->ep_status[epnum][dir].busy); // non-control skip if not busy
 800e332:	7dfa      	ldrb	r2, [r7, #23]
 800e334:	7dbb      	ldrb	r3, [r7, #22]
 800e336:	6939      	ldr	r1, [r7, #16]
 800e338:	0052      	lsls	r2, r2, #1
 800e33a:	440a      	add	r2, r1
 800e33c:	4413      	add	r3, r2
 800e33e:	3330      	adds	r3, #48	@ 0x30
 800e340:	795b      	ldrb	r3, [r3, #5]
 800e342:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e346:	b2db      	uxtb	r3, r3
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d101      	bne.n	800e350 <tuh_edpt_abort_xfer+0xb8>
 800e34c:	2300      	movs	r3, #0
 800e34e:	e01f      	b.n	800e390 <tuh_edpt_abort_xfer+0xf8>
    hcd_edpt_abort_xfer(dev->rhport, daddr, ep_addr);
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	79ba      	ldrb	r2, [r7, #6]
 800e356:	79f9      	ldrb	r1, [r7, #7]
 800e358:	4618      	mov	r0, r3
 800e35a:	f001 fe4d 	bl	800fff8 <hcd_edpt_abort_xfer>

    // mark as ready and release endpoint if transfer is aborted
    dev->ep_status[epnum][dir].busy = false;
 800e35e:	7dfa      	ldrb	r2, [r7, #23]
 800e360:	7dbb      	ldrb	r3, [r7, #22]
 800e362:	6939      	ldr	r1, [r7, #16]
 800e364:	0052      	lsls	r2, r2, #1
 800e366:	440a      	add	r2, r1
 800e368:	4413      	add	r3, r2
 800e36a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e36e:	7953      	ldrb	r3, [r2, #5]
 800e370:	f023 0301 	bic.w	r3, r3, #1
 800e374:	7153      	strb	r3, [r2, #5]
    tu_edpt_release(&dev->ep_status[epnum][dir], _usbh_mutex);
 800e376:	7dfa      	ldrb	r2, [r7, #23]
 800e378:	7dbb      	ldrb	r3, [r7, #22]
 800e37a:	0052      	lsls	r2, r2, #1
 800e37c:	4413      	add	r3, r2
 800e37e:	3330      	adds	r3, #48	@ 0x30
 800e380:	693a      	ldr	r2, [r7, #16]
 800e382:	4413      	add	r3, r2
 800e384:	3305      	adds	r3, #5
 800e386:	2100      	movs	r1, #0
 800e388:	4618      	mov	r0, r3
 800e38a:	f002 fbdf 	bl	8010b4c <tu_edpt_release>
  }

  return true;
 800e38e:	2301      	movs	r3, #1
}
 800e390:	4618      	mov	r0, r3
 800e392:	3718      	adds	r7, #24
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	24001c98 	.word	0x24001c98
 800e39c:	24001b7c 	.word	0x24001b7c

0800e3a0 <usbh_get_rhport>:

//--------------------------------------------------------------------+
// USBH API For Class Driver
//--------------------------------------------------------------------+

uint8_t usbh_get_rhport(uint8_t dev_addr) {
 800e3a0:	b480      	push	{r7}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	71fb      	strb	r3, [r7, #7]
 800e3aa:	79fb      	ldrb	r3, [r7, #7]
 800e3ac:	72fb      	strb	r3, [r7, #11]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800e3ae:	7afb      	ldrb	r3, [r7, #11]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d002      	beq.n	800e3ba <usbh_get_rhport+0x1a>
 800e3b4:	7afb      	ldrb	r3, [r7, #11]
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d901      	bls.n	800e3be <usbh_get_rhport+0x1e>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	e006      	b.n	800e3cc <usbh_get_rhport+0x2c>
  return &_usbh_devices[dev_addr-1];
 800e3be:	7afb      	ldrb	r3, [r7, #11]
 800e3c0:	3b01      	subs	r3, #1
 800e3c2:	2256      	movs	r2, #86	@ 0x56
 800e3c4:	fb02 f303 	mul.w	r3, r2, r3
 800e3c8:	4a08      	ldr	r2, [pc, #32]	@ (800e3ec <usbh_get_rhport+0x4c>)
 800e3ca:	4413      	add	r3, r2
  usbh_device_t *dev = get_device(dev_addr);
 800e3cc:	60fb      	str	r3, [r7, #12]
  return dev ? dev->rhport : _dev0.rhport;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d002      	beq.n	800e3da <usbh_get_rhport+0x3a>
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	e001      	b.n	800e3de <usbh_get_rhport+0x3e>
 800e3da:	4b05      	ldr	r3, [pc, #20]	@ (800e3f0 <usbh_get_rhport+0x50>)
 800e3dc:	781b      	ldrb	r3, [r3, #0]
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3714      	adds	r7, #20
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr
 800e3ea:	bf00      	nop
 800e3ec:	24001b7c 	.word	0x24001b7c
 800e3f0:	24001b78 	.word	0x24001b78

0800e3f4 <usbh_get_enum_buf>:

uint8_t *usbh_get_enum_buf(void) {
 800e3f4:	b480      	push	{r7}
 800e3f6:	af00      	add	r7, sp, #0
  return _usbh_epbuf.ctrl;
 800e3f8:	4b02      	ldr	r3, [pc, #8]	@ (800e404 <usbh_get_enum_buf+0x10>)
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr
 800e404:	24001cb0 	.word	0x24001cb0

0800e408 <usbh_int_set>:

void usbh_int_set(bool enabled) {
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	4603      	mov	r3, r0
 800e410:	71fb      	strb	r3, [r7, #7]
  // TODO all host controller if multiple are used since they shared the same event queue
  if (enabled) {
 800e412:	79fb      	ldrb	r3, [r7, #7]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d005      	beq.n	800e424 <usbh_int_set+0x1c>
    hcd_int_enable(_usbh_controller);
 800e418:	4b07      	ldr	r3, [pc, #28]	@ (800e438 <usbh_int_set+0x30>)
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	4618      	mov	r0, r3
 800e41e:	f001 facb 	bl	800f9b8 <hcd_int_enable>
  } else {
    hcd_int_disable(_usbh_controller);
  }
}
 800e422:	e004      	b.n	800e42e <usbh_int_set+0x26>
    hcd_int_disable(_usbh_controller);
 800e424:	4b04      	ldr	r3, [pc, #16]	@ (800e438 <usbh_int_set+0x30>)
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	4618      	mov	r0, r3
 800e42a:	f001 fad3 	bl	800f9d4 <hcd_int_disable>
}
 800e42e:	bf00      	nop
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	2400000d 	.word	0x2400000d

0800e43c <usbh_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint API
//--------------------------------------------------------------------+

// Claim an endpoint for transfer
bool usbh_edpt_claim(uint8_t dev_addr, uint8_t ep_addr) {
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b086      	sub	sp, #24
 800e440:	af00      	add	r7, sp, #0
 800e442:	4603      	mov	r3, r0
 800e444:	460a      	mov	r2, r1
 800e446:	71fb      	strb	r3, [r7, #7]
 800e448:	4613      	mov	r3, r2
 800e44a:	71bb      	strb	r3, [r7, #6]
 800e44c:	79fb      	ldrb	r3, [r7, #7]
 800e44e:	72fb      	strb	r3, [r7, #11]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800e450:	7afb      	ldrb	r3, [r7, #11]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d002      	beq.n	800e45c <usbh_edpt_claim+0x20>
 800e456:	7afb      	ldrb	r3, [r7, #11]
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d901      	bls.n	800e460 <usbh_edpt_claim+0x24>
 800e45c:	2300      	movs	r3, #0
 800e45e:	e006      	b.n	800e46e <usbh_edpt_claim+0x32>
  return &_usbh_devices[dev_addr-1];
 800e460:	7afb      	ldrb	r3, [r7, #11]
 800e462:	3b01      	subs	r3, #1
 800e464:	2256      	movs	r2, #86	@ 0x56
 800e466:	fb02 f303 	mul.w	r3, r2, r3
 800e46a:	4a1f      	ldr	r2, [pc, #124]	@ (800e4e8 <usbh_edpt_claim+0xac>)
 800e46c:	4413      	add	r3, r2
  // Note: addr0 only use tuh_control_xfer
  usbh_device_t* dev = get_device(dev_addr);
 800e46e:	617b      	str	r3, [r7, #20]
  TU_ASSERT(dev && dev->connected);
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d006      	beq.n	800e484 <usbh_edpt_claim+0x48>
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	791b      	ldrb	r3, [r3, #4]
 800e47a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	2b00      	cmp	r3, #0
 800e482:	d10a      	bne.n	800e49a <usbh_edpt_claim+0x5e>
 800e484:	4b19      	ldr	r3, [pc, #100]	@ (800e4ec <usbh_edpt_claim+0xb0>)
 800e486:	60fb      	str	r3, [r7, #12]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f003 0301 	and.w	r3, r3, #1
 800e490:	2b00      	cmp	r3, #0
 800e492:	d000      	beq.n	800e496 <usbh_edpt_claim+0x5a>
 800e494:	be00      	bkpt	0x0000
 800e496:	2300      	movs	r3, #0
 800e498:	e021      	b.n	800e4de <usbh_edpt_claim+0xa2>
 800e49a:	79bb      	ldrb	r3, [r7, #6]
 800e49c:	727b      	strb	r3, [r7, #9]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800e49e:	7a7b      	ldrb	r3, [r7, #9]
 800e4a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4a4:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800e4a6:	74fb      	strb	r3, [r7, #19]
 800e4a8:	79bb      	ldrb	r3, [r7, #6]
 800e4aa:	72bb      	strb	r3, [r7, #10]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800e4ac:	7abb      	ldrb	r3, [r7, #10]
 800e4ae:	09db      	lsrs	r3, r3, #7
 800e4b0:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800e4b2:	74bb      	strb	r3, [r7, #18]

  TU_VERIFY(tu_edpt_claim(&dev->ep_status[epnum][dir], _usbh_mutex));
 800e4b4:	7cfa      	ldrb	r2, [r7, #19]
 800e4b6:	7cbb      	ldrb	r3, [r7, #18]
 800e4b8:	0052      	lsls	r2, r2, #1
 800e4ba:	4413      	add	r3, r2
 800e4bc:	3330      	adds	r3, #48	@ 0x30
 800e4be:	697a      	ldr	r2, [r7, #20]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	3305      	adds	r3, #5
 800e4c4:	2100      	movs	r1, #0
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f002 fb06 	bl	8010ad8 <tu_edpt_claim>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	f083 0301 	eor.w	r3, r3, #1
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d001      	beq.n	800e4dc <usbh_edpt_claim+0xa0>
 800e4d8:	2300      	movs	r3, #0
 800e4da:	e000      	b.n	800e4de <usbh_edpt_claim+0xa2>
  TU_LOG_USBH("[%u] Claimed EP 0x%02x\r\n", dev_addr, ep_addr);

  return true;
 800e4dc:	2301      	movs	r3, #1
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3718      	adds	r7, #24
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	24001b7c 	.word	0x24001b7c
 800e4ec:	e000edf0 	.word	0xe000edf0

0800e4f0 <usbh_edpt_release>:

// Release an claimed endpoint due to failed transfer attempt
bool usbh_edpt_release(uint8_t dev_addr, uint8_t ep_addr) {
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b086      	sub	sp, #24
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	460a      	mov	r2, r1
 800e4fa:	71fb      	strb	r3, [r7, #7]
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	71bb      	strb	r3, [r7, #6]
 800e500:	79fb      	ldrb	r3, [r7, #7]
 800e502:	747b      	strb	r3, [r7, #17]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800e504:	7c7b      	ldrb	r3, [r7, #17]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d002      	beq.n	800e510 <usbh_edpt_release+0x20>
 800e50a:	7c7b      	ldrb	r3, [r7, #17]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d901      	bls.n	800e514 <usbh_edpt_release+0x24>
 800e510:	2300      	movs	r3, #0
 800e512:	e006      	b.n	800e522 <usbh_edpt_release+0x32>
  return &_usbh_devices[dev_addr-1];
 800e514:	7c7b      	ldrb	r3, [r7, #17]
 800e516:	3b01      	subs	r3, #1
 800e518:	2256      	movs	r2, #86	@ 0x56
 800e51a:	fb02 f303 	mul.w	r3, r2, r3
 800e51e:	4a1a      	ldr	r2, [pc, #104]	@ (800e588 <usbh_edpt_release+0x98>)
 800e520:	4413      	add	r3, r2
  // Note: addr0 only use tuh_control_xfer
  usbh_device_t* dev = get_device(dev_addr);
 800e522:	617b      	str	r3, [r7, #20]
  TU_VERIFY(dev && dev->connected);
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d006      	beq.n	800e538 <usbh_edpt_release+0x48>
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	791b      	ldrb	r3, [r3, #4]
 800e52e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e532:	b2db      	uxtb	r3, r3
 800e534:	2b00      	cmp	r3, #0
 800e536:	d101      	bne.n	800e53c <usbh_edpt_release+0x4c>
 800e538:	2300      	movs	r3, #0
 800e53a:	e021      	b.n	800e580 <usbh_edpt_release+0x90>
 800e53c:	79bb      	ldrb	r3, [r7, #6]
 800e53e:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800e540:	7bfb      	ldrb	r3, [r7, #15]
 800e542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e546:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800e548:	74fb      	strb	r3, [r7, #19]
 800e54a:	79bb      	ldrb	r3, [r7, #6]
 800e54c:	743b      	strb	r3, [r7, #16]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800e54e:	7c3b      	ldrb	r3, [r7, #16]
 800e550:	09db      	lsrs	r3, r3, #7
 800e552:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800e554:	74bb      	strb	r3, [r7, #18]

  TU_VERIFY(tu_edpt_release(&dev->ep_status[epnum][dir], _usbh_mutex));
 800e556:	7cfa      	ldrb	r2, [r7, #19]
 800e558:	7cbb      	ldrb	r3, [r7, #18]
 800e55a:	0052      	lsls	r2, r2, #1
 800e55c:	4413      	add	r3, r2
 800e55e:	3330      	adds	r3, #48	@ 0x30
 800e560:	697a      	ldr	r2, [r7, #20]
 800e562:	4413      	add	r3, r2
 800e564:	3305      	adds	r3, #5
 800e566:	2100      	movs	r1, #0
 800e568:	4618      	mov	r0, r3
 800e56a:	f002 faef 	bl	8010b4c <tu_edpt_release>
 800e56e:	4603      	mov	r3, r0
 800e570:	f083 0301 	eor.w	r3, r3, #1
 800e574:	b2db      	uxtb	r3, r3
 800e576:	2b00      	cmp	r3, #0
 800e578:	d001      	beq.n	800e57e <usbh_edpt_release+0x8e>
 800e57a:	2300      	movs	r3, #0
 800e57c:	e000      	b.n	800e580 <usbh_edpt_release+0x90>
  TU_LOG_USBH("[%u] Released EP 0x%02x\r\n", dev_addr, ep_addr);

  return true;
 800e57e:	2301      	movs	r3, #1
}
 800e580:	4618      	mov	r0, r3
 800e582:	3718      	adds	r7, #24
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	24001b7c 	.word	0x24001b7c

0800e58c <usbh_edpt_xfer_with_callback>:

// Submit an transfer
// TODO call usbh_edpt_release if failed
bool usbh_edpt_xfer_with_callback(uint8_t dev_addr, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes,
                                  tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b08a      	sub	sp, #40	@ 0x28
 800e590:	af02      	add	r7, sp, #8
 800e592:	603a      	str	r2, [r7, #0]
 800e594:	461a      	mov	r2, r3
 800e596:	4603      	mov	r3, r0
 800e598:	71fb      	strb	r3, [r7, #7]
 800e59a:	460b      	mov	r3, r1
 800e59c:	71bb      	strb	r3, [r7, #6]
 800e59e:	4613      	mov	r3, r2
 800e5a0:	80bb      	strh	r3, [r7, #4]
 800e5a2:	79fb      	ldrb	r3, [r7, #7]
 800e5a4:	73fb      	strb	r3, [r7, #15]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800e5a6:	7bfb      	ldrb	r3, [r7, #15]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <usbh_edpt_xfer_with_callback+0x26>
 800e5ac:	7bfb      	ldrb	r3, [r7, #15]
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	d901      	bls.n	800e5b6 <usbh_edpt_xfer_with_callback+0x2a>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	e006      	b.n	800e5c4 <usbh_edpt_xfer_with_callback+0x38>
  return &_usbh_devices[dev_addr-1];
 800e5b6:	7bfb      	ldrb	r3, [r7, #15]
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	2256      	movs	r2, #86	@ 0x56
 800e5bc:	fb02 f303 	mul.w	r3, r2, r3
 800e5c0:	4a28      	ldr	r2, [pc, #160]	@ (800e664 <usbh_edpt_xfer_with_callback+0xd8>)
 800e5c2:	4413      	add	r3, r2
  (void) complete_cb;
  (void) user_data;

  usbh_device_t* dev = get_device(dev_addr);
 800e5c4:	61fb      	str	r3, [r7, #28]
  TU_VERIFY(dev);
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d101      	bne.n	800e5d0 <usbh_edpt_xfer_with_callback+0x44>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	e045      	b.n	800e65c <usbh_edpt_xfer_with_callback+0xd0>
 800e5d0:	79bb      	ldrb	r3, [r7, #6]
 800e5d2:	737b      	strb	r3, [r7, #13]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800e5d4:	7b7b      	ldrb	r3, [r7, #13]
 800e5d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5da:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800e5dc:	76fb      	strb	r3, [r7, #27]
 800e5de:	79bb      	ldrb	r3, [r7, #6]
 800e5e0:	73bb      	strb	r3, [r7, #14]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800e5e2:	7bbb      	ldrb	r3, [r7, #14]
 800e5e4:	09db      	lsrs	r3, r3, #7
 800e5e6:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800e5e8:	76bb      	strb	r3, [r7, #26]
  tu_edpt_state_t* ep_state = &dev->ep_status[epnum][dir];
 800e5ea:	7efa      	ldrb	r2, [r7, #27]
 800e5ec:	7ebb      	ldrb	r3, [r7, #26]
 800e5ee:	0052      	lsls	r2, r2, #1
 800e5f0:	4413      	add	r3, r2
 800e5f2:	3330      	adds	r3, #48	@ 0x30
 800e5f4:	69fa      	ldr	r2, [r7, #28]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	3305      	adds	r3, #5
 800e5fa:	617b      	str	r3, [r7, #20]

  TU_LOG_USBH("  Queue EP %02X with %u bytes ... \r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(ep_state->busy == 0);
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e604:	b2db      	uxtb	r3, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00a      	beq.n	800e620 <usbh_edpt_xfer_with_callback+0x94>
 800e60a:	4b17      	ldr	r3, [pc, #92]	@ (800e668 <usbh_edpt_xfer_with_callback+0xdc>)
 800e60c:	613b      	str	r3, [r7, #16]
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f003 0301 	and.w	r3, r3, #1
 800e616:	2b00      	cmp	r3, #0
 800e618:	d000      	beq.n	800e61c <usbh_edpt_xfer_with_callback+0x90>
 800e61a:	be00      	bkpt	0x0000
 800e61c:	2300      	movs	r3, #0
 800e61e:	e01d      	b.n	800e65c <usbh_edpt_xfer_with_callback+0xd0>

  // Set busy first since the actual transfer can be complete before hcd_edpt_xfer()
  // could return and USBH task can preempt and clear the busy
  ep_state->busy = 1;
 800e620:	697a      	ldr	r2, [r7, #20]
 800e622:	7813      	ldrb	r3, [r2, #0]
 800e624:	f043 0301 	orr.w	r3, r3, #1
 800e628:	7013      	strb	r3, [r2, #0]
#if CFG_TUH_API_EDPT_XFER
  dev->ep_callback[epnum][dir].complete_cb = complete_cb;
  dev->ep_callback[epnum][dir].user_data   = user_data;
#endif

  if (hcd_edpt_xfer(dev->rhport, dev_addr, ep_addr, buffer, total_bytes)) {
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	7818      	ldrb	r0, [r3, #0]
 800e62e:	79ba      	ldrb	r2, [r7, #6]
 800e630:	79f9      	ldrb	r1, [r7, #7]
 800e632:	88bb      	ldrh	r3, [r7, #4]
 800e634:	9300      	str	r3, [sp, #0]
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	f001 fc62 	bl	800ff00 <hcd_edpt_xfer>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d001      	beq.n	800e646 <usbh_edpt_xfer_with_callback+0xba>
    TU_LOG_USBH("OK\r\n");
    return true;
 800e642:	2301      	movs	r3, #1
 800e644:	e00a      	b.n	800e65c <usbh_edpt_xfer_with_callback+0xd0>
  } else {
    // HCD error, mark endpoint as ready to allow next transfer
    ep_state->busy = 0;
 800e646:	697a      	ldr	r2, [r7, #20]
 800e648:	7813      	ldrb	r3, [r2, #0]
 800e64a:	f023 0301 	bic.w	r3, r3, #1
 800e64e:	7013      	strb	r3, [r2, #0]
    ep_state->claimed = 0;
 800e650:	697a      	ldr	r2, [r7, #20]
 800e652:	7813      	ldrb	r3, [r2, #0]
 800e654:	f023 0304 	bic.w	r3, r3, #4
 800e658:	7013      	strb	r3, [r2, #0]
    TU_LOG1("Failed\r\n");
//    TU_BREAKPOINT();
    return false;
 800e65a:	2300      	movs	r3, #0
  }
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3720      	adds	r7, #32
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	24001b7c 	.word	0x24001b7c
 800e668:	e000edf0 	.word	0xe000edf0

0800e66c <usbh_edpt_control_open>:

static bool usbh_edpt_control_open(uint8_t dev_addr, uint8_t max_packet_size) {
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	4603      	mov	r3, r0
 800e674:	460a      	mov	r2, r1
 800e676:	71fb      	strb	r3, [r7, #7]
 800e678:	4613      	mov	r3, r2
 800e67a:	71bb      	strb	r3, [r7, #6]
  TU_LOG_USBH("[%u:%u] Open EP0 with Size = %u\r\n", usbh_get_rhport(dev_addr), dev_addr, max_packet_size);
  tusb_desc_endpoint_t ep0_desc = {
 800e67c:	f107 0308 	add.w	r3, r7, #8
 800e680:	2200      	movs	r2, #0
 800e682:	601a      	str	r2, [r3, #0]
 800e684:	f8c3 2003 	str.w	r2, [r3, #3]
 800e688:	2307      	movs	r3, #7
 800e68a:	723b      	strb	r3, [r7, #8]
 800e68c:	2305      	movs	r3, #5
 800e68e:	727b      	strb	r3, [r7, #9]
 800e690:	79bb      	ldrb	r3, [r7, #6]
 800e692:	b29b      	uxth	r3, r3
 800e694:	81bb      	strh	r3, [r7, #12]
    .bmAttributes     = { .xfer = TUSB_XFER_CONTROL },
    .wMaxPacketSize   = max_packet_size,
    .bInterval        = 0
  };

  return hcd_edpt_open(usbh_get_rhport(dev_addr), dev_addr, &ep0_desc);
 800e696:	79fb      	ldrb	r3, [r7, #7]
 800e698:	4618      	mov	r0, r3
 800e69a:	f7ff fe81 	bl	800e3a0 <usbh_get_rhport>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f107 0208 	add.w	r2, r7, #8
 800e6a6:	79fb      	ldrb	r3, [r7, #7]
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	f001 f9f9 	bl	800faa0 <hcd_edpt_open>
 800e6ae:	4603      	mov	r3, r0
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3710      	adds	r7, #16
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <tuh_edpt_open>:

bool tuh_edpt_open(uint8_t dev_addr, tusb_desc_endpoint_t const* desc_ep) {
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	4603      	mov	r3, r0
 800e6c0:	6039      	str	r1, [r7, #0]
 800e6c2:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(tu_edpt_validate(desc_ep, tuh_speed_get(dev_addr)));
 800e6c4:	79fb      	ldrb	r3, [r7, #7]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7ff f8e4 	bl	800d894 <tuh_speed_get>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	6838      	ldr	r0, [r7, #0]
 800e6d2:	f002 fa65 	bl	8010ba0 <tu_edpt_validate>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	f083 0301 	eor.w	r3, r3, #1
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d00a      	beq.n	800e6f8 <tuh_edpt_open+0x40>
 800e6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e718 <tuh_edpt_open+0x60>)
 800e6e4:	60fb      	str	r3, [r7, #12]
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f003 0301 	and.w	r3, r3, #1
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d000      	beq.n	800e6f4 <tuh_edpt_open+0x3c>
 800e6f2:	be00      	bkpt	0x0000
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	e00b      	b.n	800e710 <tuh_edpt_open+0x58>
  return hcd_edpt_open(usbh_get_rhport(dev_addr), dev_addr, desc_ep);
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7ff fe50 	bl	800e3a0 <usbh_get_rhport>
 800e700:	4603      	mov	r3, r0
 800e702:	4618      	mov	r0, r3
 800e704:	79fb      	ldrb	r3, [r7, #7]
 800e706:	683a      	ldr	r2, [r7, #0]
 800e708:	4619      	mov	r1, r3
 800e70a:	f001 f9c9 	bl	800faa0 <hcd_edpt_open>
 800e70e:	4603      	mov	r3, r0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3710      	adds	r7, #16
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	e000edf0 	.word	0xe000edf0

0800e71c <hcd_event_handler>:
    devtree_info->hub_port = _dev0.hub_port;
    devtree_info->speed = _dev0.speed;
  }
}

TU_ATTR_FAST_FUNC void hcd_event_handler(hcd_event_t const* event, bool in_isr) {
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b08c      	sub	sp, #48	@ 0x30
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	460b      	mov	r3, r1
 800e726:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id) {
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	785b      	ldrb	r3, [r3, #1]
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d117      	bne.n	800e760 <hcd_event_handler+0x44>
    case HCD_EVENT_DEVICE_REMOVE:
      // FIXME device remove from a hub need an HCD API for hcd to free up endpoint
      // mark device as removing to prevent further xfer before the event is processed in usbh task

      // Check if dev0 is removed
      if ((event->rhport == _dev0.rhport) && (event->connection.hub_addr == _dev0.hub_addr) &&
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	781a      	ldrb	r2, [r3, #0]
 800e734:	4b33      	ldr	r3, [pc, #204]	@ (800e804 <hcd_event_handler+0xe8>)
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d113      	bne.n	800e764 <hcd_event_handler+0x48>
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	791a      	ldrb	r2, [r3, #4]
 800e740:	4b30      	ldr	r3, [pc, #192]	@ (800e804 <hcd_event_handler+0xe8>)
 800e742:	785b      	ldrb	r3, [r3, #1]
 800e744:	429a      	cmp	r2, r3
 800e746:	d10d      	bne.n	800e764 <hcd_event_handler+0x48>
          (event->connection.hub_port == _dev0.hub_port)) {
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	795a      	ldrb	r2, [r3, #5]
 800e74c:	4b2d      	ldr	r3, [pc, #180]	@ (800e804 <hcd_event_handler+0xe8>)
 800e74e:	789b      	ldrb	r3, [r3, #2]
      if ((event->rhport == _dev0.rhport) && (event->connection.hub_addr == _dev0.hub_addr) &&
 800e750:	429a      	cmp	r2, r3
 800e752:	d107      	bne.n	800e764 <hcd_event_handler+0x48>
        _dev0.enumerating = 0;
 800e754:	4a2b      	ldr	r2, [pc, #172]	@ (800e804 <hcd_event_handler+0xe8>)
 800e756:	78d3      	ldrb	r3, [r2, #3]
 800e758:	f023 0310 	bic.w	r3, r3, #16
 800e75c:	70d3      	strb	r3, [r2, #3]
      }
      break;
 800e75e:	e001      	b.n	800e764 <hcd_event_handler+0x48>

    default: break;
 800e760:	bf00      	nop
 800e762:	e000      	b.n	800e766 <hcd_event_handler+0x4a>
      break;
 800e764:	bf00      	nop
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e76a:	78fb      	ldrb	r3, [r7, #3]
 800e76c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  TU_ASSERT(osal_queue_send(_usbh_q, event, in_isr));
 800e770:	4b25      	ldr	r3, [pc, #148]	@ (800e808 <hcd_event_handler+0xec>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	627b      	str	r3, [r7, #36]	@ 0x24
 800e776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e778:	623b      	str	r3, [r7, #32]
 800e77a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e77e:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 800e780:	7ffb      	ldrb	r3, [r7, #31]
 800e782:	f083 0301 	eor.w	r3, r3, #1
 800e786:	b2db      	uxtb	r3, r3
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d006      	beq.n	800e79a <hcd_event_handler+0x7e>
 800e78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e78e:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(false);
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2000      	movs	r0, #0
 800e796:	4798      	blx	r3
}
 800e798:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 800e79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e79c:	3304      	adds	r3, #4
 800e79e:	6a39      	ldr	r1, [r7, #32]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fe ffe0 	bl	800d766 <tu_fifo_write>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	75fb      	strb	r3, [r7, #23]
  if (!in_isr) {
 800e7aa:	7ffb      	ldrb	r3, [r7, #31]
 800e7ac:	f083 0301 	eor.w	r3, r3, #1
 800e7b0:	b2db      	uxtb	r3, r3
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d006      	beq.n	800e7c4 <hcd_event_handler+0xa8>
 800e7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b8:	613b      	str	r3, [r7, #16]
  qhdl->interrupt_set(true);
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2001      	movs	r0, #1
 800e7c0:	4798      	blx	r3
}
 800e7c2:	bf00      	nop
  return success;
 800e7c4:	7dfb      	ldrb	r3, [r7, #23]
 800e7c6:	f083 0301 	eor.w	r3, r3, #1
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d009      	beq.n	800e7e4 <hcd_event_handler+0xc8>
 800e7d0:	4b0e      	ldr	r3, [pc, #56]	@ (800e80c <hcd_event_handler+0xf0>)
 800e7d2:	60fb      	str	r3, [r7, #12]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f003 0301 	and.w	r3, r3, #1
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d00c      	beq.n	800e7fa <hcd_event_handler+0xde>
 800e7e0:	be00      	bkpt	0x0000
 800e7e2:	e00a      	b.n	800e7fa <hcd_event_handler+0xde>
  tuh_event_hook_cb(event->rhport, event->event_id, in_isr);
 800e7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e6:	7818      	ldrb	r0, [r3, #0]
 800e7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ea:	785b      	ldrb	r3, [r3, #1]
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	f7ff f80b 	bl	800d80e <tuh_event_hook_cb>
  return true;
 800e7f8:	e000      	b.n	800e7fc <hcd_event_handler+0xe0>
  TU_ASSERT(osal_queue_send(_usbh_q, event, in_isr));
 800e7fa:	bf00      	nop
  }

  queue_event(event, in_isr);
}
 800e7fc:	bf00      	nop
 800e7fe:	3730      	adds	r7, #48	@ 0x30
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	24001b78 	.word	0x24001b78
 800e808:	24001c94 	.word	0x24001c94
 800e80c:	e000edf0 	.word	0xe000edf0

0800e810 <_get_descriptor>:
//--------------------------------------------------------------------+

// generic helper to get a descriptor
// if blocking, user_data is pointed to xfer_result
static bool _get_descriptor(uint8_t daddr, uint8_t type, uint8_t index, uint16_t language_id, void* buffer, uint16_t len,
                            tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 800e810:	b590      	push	{r4, r7, lr}
 800e812:	b08b      	sub	sp, #44	@ 0x2c
 800e814:	af00      	add	r7, sp, #0
 800e816:	4604      	mov	r4, r0
 800e818:	4608      	mov	r0, r1
 800e81a:	4611      	mov	r1, r2
 800e81c:	461a      	mov	r2, r3
 800e81e:	4623      	mov	r3, r4
 800e820:	71fb      	strb	r3, [r7, #7]
 800e822:	4603      	mov	r3, r0
 800e824:	71bb      	strb	r3, [r7, #6]
 800e826:	460b      	mov	r3, r1
 800e828:	717b      	strb	r3, [r7, #5]
 800e82a:	4613      	mov	r3, r2
 800e82c:	807b      	strh	r3, [r7, #2]
  tusb_control_request_t const request = {
 800e82e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e832:	f023 031f 	bic.w	r3, r3, #31
 800e836:	f887 3020 	strb.w	r3, [r7, #32]
 800e83a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e83e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800e842:	f887 3020 	strb.w	r3, [r7, #32]
 800e846:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e84a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e84e:	f887 3020 	strb.w	r3, [r7, #32]
 800e852:	2306      	movs	r3, #6
 800e854:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      .recipient = TUSB_REQ_RCPT_DEVICE,
      .type      = TUSB_REQ_TYPE_STANDARD,
      .direction = TUSB_DIR_IN
    },
    .bRequest = TUSB_REQ_GET_DESCRIPTOR,
    .wValue   = tu_htole16( TU_U16(type, index) ),
 800e858:	79bb      	ldrb	r3, [r7, #6]
 800e85a:	b21b      	sxth	r3, r3
 800e85c:	021b      	lsls	r3, r3, #8
 800e85e:	b21a      	sxth	r2, r3
 800e860:	797b      	ldrb	r3, [r7, #5]
 800e862:	b21b      	sxth	r3, r3
 800e864:	4313      	orrs	r3, r2
 800e866:	b21b      	sxth	r3, r3
 800e868:	b29b      	uxth	r3, r3
  tusb_control_request_t const request = {
 800e86a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e86c:	887b      	ldrh	r3, [r7, #2]
 800e86e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e870:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e872:	84fb      	strh	r3, [r7, #38]	@ 0x26
    .wIndex   = tu_htole16(language_id),
    .wLength  = tu_htole16(len)
  };
  tuh_xfer_t xfer = {
 800e874:	f107 0308 	add.w	r3, r7, #8
 800e878:	2200      	movs	r2, #0
 800e87a:	601a      	str	r2, [r3, #0]
 800e87c:	605a      	str	r2, [r3, #4]
 800e87e:	609a      	str	r2, [r3, #8]
 800e880:	60da      	str	r2, [r3, #12]
 800e882:	611a      	str	r2, [r3, #16]
 800e884:	615a      	str	r2, [r3, #20]
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	723b      	strb	r3, [r7, #8]
 800e88a:	f107 0320 	add.w	r3, r7, #32
 800e88e:	613b      	str	r3, [r7, #16]
 800e890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e892:	617b      	str	r3, [r7, #20]
 800e894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e896:	61bb      	str	r3, [r7, #24]
 800e898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e89a:	61fb      	str	r3, [r7, #28]
    .buffer      = buffer,
    .complete_cb = complete_cb,
    .user_data   = user_data
  };

  return tuh_control_xfer(&xfer);
 800e89c:	f107 0308 	add.w	r3, r7, #8
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7ff fae9 	bl	800de78 <tuh_control_xfer>
 800e8a6:	4603      	mov	r3, r0
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	372c      	adds	r7, #44	@ 0x2c
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd90      	pop	{r4, r7, pc}

0800e8b0 <tuh_descriptor_get>:

bool tuh_descriptor_get(uint8_t daddr, uint8_t type, uint8_t index, void* buffer, uint16_t len,
                        tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b086      	sub	sp, #24
 800e8b4:	af04      	add	r7, sp, #16
 800e8b6:	603b      	str	r3, [r7, #0]
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	71fb      	strb	r3, [r7, #7]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	71bb      	strb	r3, [r7, #6]
 800e8c0:	4613      	mov	r3, r2
 800e8c2:	717b      	strb	r3, [r7, #5]
  return _get_descriptor(daddr, type, index, 0x0000, buffer, len, complete_cb, user_data);
 800e8c4:	797a      	ldrb	r2, [r7, #5]
 800e8c6:	79b9      	ldrb	r1, [r7, #6]
 800e8c8:	79f8      	ldrb	r0, [r7, #7]
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	9303      	str	r3, [sp, #12]
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	9302      	str	r3, [sp, #8]
 800e8d2:	8a3b      	ldrh	r3, [r7, #16]
 800e8d4:	9301      	str	r3, [sp, #4]
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	9300      	str	r3, [sp, #0]
 800e8da:	2300      	movs	r3, #0
 800e8dc:	f7ff ff98 	bl	800e810 <_get_descriptor>
 800e8e0:	4603      	mov	r3, r0
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <tuh_descriptor_get_device>:

bool tuh_descriptor_get_device(uint8_t daddr, void* buffer, uint16_t len,
                               tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 800e8ea:	b580      	push	{r7, lr}
 800e8ec:	b08a      	sub	sp, #40	@ 0x28
 800e8ee:	af04      	add	r7, sp, #16
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607b      	str	r3, [r7, #4]
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	73fb      	strb	r3, [r7, #15]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	81bb      	strh	r3, [r7, #12]
 800e8fc:	89bb      	ldrh	r3, [r7, #12]
 800e8fe:	82fb      	strh	r3, [r7, #22]
 800e900:	2312      	movs	r3, #18
 800e902:	82bb      	strh	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800e904:	8afa      	ldrh	r2, [r7, #22]
 800e906:	8abb      	ldrh	r3, [r7, #20]
 800e908:	4293      	cmp	r3, r2
 800e90a:	bf28      	it	cs
 800e90c:	4613      	movcs	r3, r2
 800e90e:	b29b      	uxth	r3, r3
  len = tu_min16(len, sizeof(tusb_desc_device_t));
 800e910:	81bb      	strh	r3, [r7, #12]
  return tuh_descriptor_get(daddr, TUSB_DESC_DEVICE, 0, buffer, len, complete_cb, user_data);
 800e912:	7bf8      	ldrb	r0, [r7, #15]
 800e914:	6a3b      	ldr	r3, [r7, #32]
 800e916:	9302      	str	r3, [sp, #8]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	9301      	str	r3, [sp, #4]
 800e91c:	89bb      	ldrh	r3, [r7, #12]
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	2200      	movs	r2, #0
 800e924:	2101      	movs	r1, #1
 800e926:	f7ff ffc3 	bl	800e8b0 <tuh_descriptor_get>
 800e92a:	4603      	mov	r3, r0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <tuh_descriptor_get_configuration>:

bool tuh_descriptor_get_configuration(uint8_t daddr, uint8_t index, void* buffer, uint16_t len,
                                      tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 800e934:	b580      	push	{r7, lr}
 800e936:	b086      	sub	sp, #24
 800e938:	af04      	add	r7, sp, #16
 800e93a:	603a      	str	r2, [r7, #0]
 800e93c:	461a      	mov	r2, r3
 800e93e:	4603      	mov	r3, r0
 800e940:	71fb      	strb	r3, [r7, #7]
 800e942:	460b      	mov	r3, r1
 800e944:	71bb      	strb	r3, [r7, #6]
 800e946:	4613      	mov	r3, r2
 800e948:	80bb      	strh	r3, [r7, #4]
  return tuh_descriptor_get(daddr, TUSB_DESC_CONFIGURATION, index, buffer, len, complete_cb, user_data);
 800e94a:	79ba      	ldrb	r2, [r7, #6]
 800e94c:	79f8      	ldrb	r0, [r7, #7]
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	9302      	str	r3, [sp, #8]
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	9301      	str	r3, [sp, #4]
 800e956:	88bb      	ldrh	r3, [r7, #4]
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	2102      	movs	r1, #2
 800e95e:	f7ff ffa7 	bl	800e8b0 <tuh_descriptor_get>
 800e962:	4603      	mov	r3, r0
}
 800e964:	4618      	mov	r0, r3
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <tuh_configuration_set>:

  return tuh_control_xfer(&xfer);
}

bool tuh_configuration_set(uint8_t daddr, uint8_t config_num,
                           tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b08c      	sub	sp, #48	@ 0x30
 800e970:	af00      	add	r7, sp, #0
 800e972:	60ba      	str	r2, [r7, #8]
 800e974:	607b      	str	r3, [r7, #4]
 800e976:	4603      	mov	r3, r0
 800e978:	73fb      	strb	r3, [r7, #15]
 800e97a:	460b      	mov	r3, r1
 800e97c:	73bb      	strb	r3, [r7, #14]
  TU_LOG_USBH("Set Configuration = %d\r\n", config_num);
  tusb_control_request_t const request = {
 800e97e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e982:	f023 031f 	bic.w	r3, r3, #31
 800e986:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800e98a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e98e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800e992:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800e996:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e99a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e99e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800e9a2:	2309      	movs	r3, #9
 800e9a4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800e9a8:	7bbb      	ldrb	r3, [r7, #14]
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      .bRequest = TUSB_REQ_SET_CONFIGURATION,
      .wValue   = tu_htole16(config_num),
      .wIndex   = 0,
      .wLength  = 0
  };
  tuh_xfer_t xfer = {
 800e9b6:	f107 0310 	add.w	r3, r7, #16
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	601a      	str	r2, [r3, #0]
 800e9be:	605a      	str	r2, [r3, #4]
 800e9c0:	609a      	str	r2, [r3, #8]
 800e9c2:	60da      	str	r2, [r3, #12]
 800e9c4:	611a      	str	r2, [r3, #16]
 800e9c6:	615a      	str	r2, [r3, #20]
 800e9c8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ca:	743b      	strb	r3, [r7, #16]
 800e9cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e9d0:	61bb      	str	r3, [r7, #24]
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	623b      	str	r3, [r7, #32]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	627b      	str	r3, [r7, #36]	@ 0x24
      .buffer      = NULL,
      .complete_cb = complete_cb,
      .user_data   = user_data
  };

  return tuh_control_xfer(&xfer);
 800e9da:	f107 0310 	add.w	r3, r7, #16
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7ff fa4a 	bl	800de78 <tuh_control_xfer>
 800e9e4:	4603      	mov	r3, r0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3730      	adds	r7, #48	@ 0x30
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
	...

0800e9f0 <process_removing_device>:
//    }
//  }
//}

// a device unplugged from rhport:hub_addr:hub_port
static void process_removing_device(uint8_t rhport, uint8_t hub_addr, uint8_t hub_port) {
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b088      	sub	sp, #32
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	71fb      	strb	r3, [r7, #7]
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	71bb      	strb	r3, [r7, #6]
 800e9fe:	4613      	mov	r3, r2
 800ea00:	717b      	strb	r3, [r7, #5]
  //------------- find the all devices (star-network) under port that is unplugged -------------//
  // TODO mark as disconnected in ISR, also handle dev0
  uint32_t removing_hubs = 0;
 800ea02:	2300      	movs	r3, #0
 800ea04:	61fb      	str	r3, [r7, #28]
  do {
    for (uint8_t dev_id = 0; dev_id < TOTAL_DEVICES; dev_id++) {
 800ea06:	2300      	movs	r3, #0
 800ea08:	76fb      	strb	r3, [r7, #27]
 800ea0a:	e069      	b.n	800eae0 <process_removing_device+0xf0>
      usbh_device_t* dev = &_usbh_devices[dev_id];
 800ea0c:	7efb      	ldrb	r3, [r7, #27]
 800ea0e:	2256      	movs	r2, #86	@ 0x56
 800ea10:	fb02 f303 	mul.w	r3, r2, r3
 800ea14:	4a36      	ldr	r2, [pc, #216]	@ (800eaf0 <process_removing_device+0x100>)
 800ea16:	4413      	add	r3, r2
 800ea18:	617b      	str	r3, [r7, #20]
      uint8_t const daddr = dev_id + 1;
 800ea1a:	7efb      	ldrb	r3, [r7, #27]
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	74fb      	strb	r3, [r7, #19]

      // hub_addr = 0 means roothub, hub_port = 0 means all devices of downstream hub
      if (dev->rhport == rhport && dev->connected &&
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	79fa      	ldrb	r2, [r7, #7]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d157      	bne.n	800eada <process_removing_device+0xea>
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	791b      	ldrb	r3, [r3, #4]
 800ea2e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d050      	beq.n	800eada <process_removing_device+0xea>
 800ea38:	79bb      	ldrb	r3, [r7, #6]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d004      	beq.n	800ea48 <process_removing_device+0x58>
          (hub_addr == 0 || dev->hub_addr == hub_addr) &&
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	785b      	ldrb	r3, [r3, #1]
 800ea42:	79ba      	ldrb	r2, [r7, #6]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d148      	bne.n	800eada <process_removing_device+0xea>
 800ea48:	797b      	ldrb	r3, [r7, #5]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d004      	beq.n	800ea58 <process_removing_device+0x68>
          (hub_port == 0 || dev->hub_port == hub_port)) {
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	789b      	ldrb	r3, [r3, #2]
 800ea52:	797a      	ldrb	r2, [r7, #5]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d140      	bne.n	800eada <process_removing_device+0xea>
 800ea58:	7cfb      	ldrb	r3, [r7, #19]
 800ea5a:	72fb      	strb	r3, [r7, #11]
  return (CFG_TUH_HUB > 0) && (daddr > CFG_TUH_DEVICE_MAX);
 800ea5c:	2300      	movs	r3, #0
        TU_LOG_USBH("[%u:%u:%u] unplugged address = %u\r\n", rhport, hub_addr, hub_port, daddr);

        if (is_hub_addr(daddr)) {
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d008      	beq.n	800ea74 <process_removing_device+0x84>
          TU_LOG_USBH("  is a HUB device %u\r\n", daddr);
          removing_hubs |= TU_BIT(dev_id - CFG_TUH_DEVICE_MAX);
 800ea62:	7efb      	ldrb	r3, [r7, #27]
 800ea64:	3b01      	subs	r3, #1
 800ea66:	2201      	movs	r2, #1
 800ea68:	fa02 f303 	lsl.w	r3, r2, r3
 800ea6c:	69fa      	ldr	r2, [r7, #28]
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	61fb      	str	r3, [r7, #28]
 800ea72:	e006      	b.n	800ea82 <process_removing_device+0x92>
        } else {
          // Invoke callback before closing driver (maybe call it later ?)
          if (tuh_umount_cb) tuh_umount_cb(daddr);
 800ea74:	4b1f      	ldr	r3, [pc, #124]	@ (800eaf4 <process_removing_device+0x104>)
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d003      	beq.n	800ea82 <process_removing_device+0x92>
 800ea7a:	7cfb      	ldrb	r3, [r7, #19]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f3af 8000 	nop.w
        }

        // Close class driver
        for (uint8_t drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++) {
 800ea82:	2300      	movs	r3, #0
 800ea84:	76bb      	strb	r3, [r7, #26]
 800ea86:	e00f      	b.n	800eaa8 <process_removing_device+0xb8>
          usbh_class_driver_t const* driver = get_driver(drv_id);
 800ea88:	7ebb      	ldrb	r3, [r7, #26]
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fe fece 	bl	800d82c <get_driver>
 800ea90:	60f8      	str	r0, [r7, #12]
          if (driver) driver->close(daddr);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d004      	beq.n	800eaa2 <process_removing_device+0xb2>
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	699b      	ldr	r3, [r3, #24]
 800ea9c:	7cfa      	ldrb	r2, [r7, #19]
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	4798      	blx	r3
        for (uint8_t drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++) {
 800eaa2:	7ebb      	ldrb	r3, [r7, #26]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	76bb      	strb	r3, [r7, #26]
 800eaa8:	4b13      	ldr	r3, [pc, #76]	@ (800eaf8 <process_removing_device+0x108>)
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	7eba      	ldrb	r2, [r7, #26]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d9ea      	bls.n	800ea88 <process_removing_device+0x98>
        }

        hcd_device_close(rhport, daddr);
 800eab2:	7cfa      	ldrb	r2, [r7, #19]
 800eab4:	79fb      	ldrb	r3, [r7, #7]
 800eab6:	4611      	mov	r1, r2
 800eab8:	4618      	mov	r0, r3
 800eaba:	f000 ffe3 	bl	800fa84 <hcd_device_close>
        clear_device(dev);
 800eabe:	6978      	ldr	r0, [r7, #20]
 800eac0:	f7fe ff3a 	bl	800d938 <clear_device>

        // abort on-going control xfer on this device if any
        if (_ctrl_xfer.daddr == daddr) _set_control_xfer_stage(CONTROL_STAGE_IDLE);
 800eac4:	4b0d      	ldr	r3, [pc, #52]	@ (800eafc <process_removing_device+0x10c>)
 800eac6:	7b1b      	ldrb	r3, [r3, #12]
 800eac8:	7cfa      	ldrb	r2, [r7, #19]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d105      	bne.n	800eada <process_removing_device+0xea>
 800eace:	2300      	movs	r3, #0
 800ead0:	72bb      	strb	r3, [r7, #10]
  _ctrl_xfer.stage = stage;
 800ead2:	4a0a      	ldr	r2, [pc, #40]	@ (800eafc <process_removing_device+0x10c>)
 800ead4:	7abb      	ldrb	r3, [r7, #10]
 800ead6:	7353      	strb	r3, [r2, #13]
}
 800ead8:	bf00      	nop
    for (uint8_t dev_id = 0; dev_id < TOTAL_DEVICES; dev_id++) {
 800eada:	7efb      	ldrb	r3, [r7, #27]
 800eadc:	3301      	adds	r3, #1
 800eade:	76fb      	strb	r3, [r7, #27]
 800eae0:	7efb      	ldrb	r3, [r7, #27]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d092      	beq.n	800ea0c <process_removing_device+0x1c>
        break;
      }
    }
    #else
    (void) removing_hubs;
    break;
 800eae6:	bf00      	nop
    #endif
  } while(1);
}
 800eae8:	bf00      	nop
 800eaea:	3720      	adds	r7, #32
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	24001b7c 	.word	0x24001b7c
 800eaf4:	00000000 	.word	0x00000000
 800eaf8:	24001b74 	.word	0x24001b74
 800eafc:	24001c98 	.word	0x24001c98

0800eb00 <process_enumeration>:
static bool enum_request_set_addr(void);
static bool _parse_configuration_descriptor (uint8_t dev_addr, tusb_desc_configuration_t const* desc_cfg);
static void enum_full_complete(void);

// process device enumeration
static void process_enumeration(tuh_xfer_t* xfer) {
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b09e      	sub	sp, #120	@ 0x78
 800eb04:	af02      	add	r7, sp, #8
 800eb06:	6078      	str	r0, [r7, #4]
    ATTEMPT_COUNT_MAX = 3,
    ATTEMPT_DELAY_MS = 100
  };
  static uint8_t failed_count = 0;

  if (XFER_RESULT_SUCCESS != xfer->result) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	78db      	ldrb	r3, [r3, #3]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d033      	beq.n	800eb78 <process_enumeration+0x78>
    // retry if not reaching max attempt
    bool retry = _dev0.enumerating && (failed_count < ATTEMPT_COUNT_MAX);
 800eb10:	4ba8      	ldr	r3, [pc, #672]	@ (800edb4 <process_enumeration+0x2b4>)
 800eb12:	78db      	ldrb	r3, [r3, #3]
 800eb14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d005      	beq.n	800eb2a <process_enumeration+0x2a>
 800eb1e:	4ba6      	ldr	r3, [pc, #664]	@ (800edb8 <process_enumeration+0x2b8>)
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	2b02      	cmp	r3, #2
 800eb24:	d801      	bhi.n	800eb2a <process_enumeration+0x2a>
 800eb26:	2301      	movs	r3, #1
 800eb28:	e000      	b.n	800eb2c <process_enumeration+0x2c>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800eb30:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800eb34:	f003 0301 	and.w	r3, r3, #1
 800eb38:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if ( retry ) {
 800eb3c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d00e      	beq.n	800eb62 <process_enumeration+0x62>
      failed_count++;
 800eb44:	4b9c      	ldr	r3, [pc, #624]	@ (800edb8 <process_enumeration+0x2b8>)
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	3301      	adds	r3, #1
 800eb4a:	b2da      	uxtb	r2, r3
 800eb4c:	4b9a      	ldr	r3, [pc, #616]	@ (800edb8 <process_enumeration+0x2b8>)
 800eb4e:	701a      	strb	r2, [r3, #0]
      tusb_time_delay_ms_api(ATTEMPT_DELAY_MS); // delay a bit
 800eb50:	2064      	movs	r0, #100	@ 0x64
 800eb52:	f001 ff47 	bl	80109e4 <tusb_time_delay_ms_api>
      TU_LOG1("Enumeration attempt %u\r\n", failed_count);
      retry = tuh_control_xfer(xfer);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7ff f98e 	bl	800de78 <tuh_control_xfer>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (!retry) {
 800eb62:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800eb66:	f083 0301 	eor.w	r3, r3, #1
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f000 81c2 	beq.w	800eef6 <process_enumeration+0x3f6>
      enum_full_complete();
 800eb72:	f000 fc63 	bl	800f43c <enum_full_complete>
    }

    return;
 800eb76:	e1be      	b.n	800eef6 <process_enumeration+0x3f6>
  }
  failed_count = 0;
 800eb78:	4b8f      	ldr	r3, [pc, #572]	@ (800edb8 <process_enumeration+0x2b8>)
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	701a      	strb	r2, [r3, #0]

  uint8_t const daddr = xfer->daddr;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
  uintptr_t const state = xfer->user_data;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	695b      	ldr	r3, [r3, #20]
 800eb8a:	66bb      	str	r3, [r7, #104]	@ 0x68

  switch (state) {
 800eb8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eb8e:	3b03      	subs	r3, #3
 800eb90:	2b09      	cmp	r3, #9
 800eb92:	f200 81ad 	bhi.w	800eef0 <process_enumeration+0x3f0>
 800eb96:	a201      	add	r2, pc, #4	@ (adr r2, 800eb9c <process_enumeration+0x9c>)
 800eb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb9c:	0800ebc5 	.word	0x0800ebc5
 800eba0:	0800eef1 	.word	0x0800eef1
 800eba4:	0800eef1 	.word	0x0800eef1
 800eba8:	0800eef1 	.word	0x0800eef1
 800ebac:	0800ec29 	.word	0x0800ec29
 800ebb0:	0800ec2f 	.word	0x0800ec2f
 800ebb4:	0800ed01 	.word	0x0800ed01
 800ebb8:	0800edcd 	.word	0x0800edcd
 800ebbc:	0800ee3f 	.word	0x0800ee3f
 800ebc0:	0800ee6d 	.word	0x0800ee6d
    }
    #endif

    case ENUM_ADDR0_DEVICE_DESC: {
      // TODO probably doesn't need to open/close each enumeration
      uint8_t const addr0 = 0;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	77fb      	strb	r3, [r7, #31]
      TU_ASSERT(usbh_edpt_control_open(addr0, 8),);
 800ebc8:	7ffb      	ldrb	r3, [r7, #31]
 800ebca:	2108      	movs	r1, #8
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7ff fd4d 	bl	800e66c <usbh_edpt_control_open>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	f083 0301 	eor.w	r3, r3, #1
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d00a      	beq.n	800ebf4 <process_enumeration+0xf4>
 800ebde:	4b77      	ldr	r3, [pc, #476]	@ (800edbc <process_enumeration+0x2bc>)
 800ebe0:	617b      	str	r3, [r7, #20]
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f003 0301 	and.w	r3, r3, #1
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	f000 8185 	beq.w	800eefa <process_enumeration+0x3fa>
 800ebf0:	be00      	bkpt	0x0000
 800ebf2:	e182      	b.n	800eefa <process_enumeration+0x3fa>

      // Get first 8 bytes of device descriptor for Control Endpoint size
      TU_LOG_USBH("Get 8 byte of Device Descriptor\r\n");
      TU_ASSERT(tuh_descriptor_get_device(addr0, _usbh_epbuf.ctrl, 8,
 800ebf4:	7ff8      	ldrb	r0, [r7, #31]
 800ebf6:	2307      	movs	r3, #7
 800ebf8:	9300      	str	r3, [sp, #0]
 800ebfa:	4b71      	ldr	r3, [pc, #452]	@ (800edc0 <process_enumeration+0x2c0>)
 800ebfc:	2208      	movs	r2, #8
 800ebfe:	4971      	ldr	r1, [pc, #452]	@ (800edc4 <process_enumeration+0x2c4>)
 800ec00:	f7ff fe73 	bl	800e8ea <tuh_descriptor_get_device>
 800ec04:	4603      	mov	r3, r0
 800ec06:	f083 0301 	eor.w	r3, r3, #1
 800ec0a:	b2db      	uxtb	r3, r3
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	f000 8176 	beq.w	800eefe <process_enumeration+0x3fe>
 800ec12:	4b6a      	ldr	r3, [pc, #424]	@ (800edbc <process_enumeration+0x2bc>)
 800ec14:	61bb      	str	r3, [r7, #24]
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f000 816f 	beq.w	800ef02 <process_enumeration+0x402>
 800ec24:	be00      	bkpt	0x0000
 800ec26:	e16c      	b.n	800ef02 <process_enumeration+0x402>
#endif
        TU_ATTR_FALLTHROUGH;
#endif

    case ENUM_SET_ADDR:
      enum_request_set_addr();
 800ec28:	f000 fa1e 	bl	800f068 <enum_request_set_addr>
      break;
 800ec2c:	e186      	b.n	800ef3c <process_enumeration+0x43c>

    case ENUM_GET_DEVICE_DESC: {
      // Allow 2ms for address recovery time, Ref USB Spec 9.2.6.3
      tusb_time_delay_ms_api(2);
 800ec2e:	2002      	movs	r0, #2
 800ec30:	f001 fed8 	bl	80109e4 <tusb_time_delay_ms_api>

      const uint8_t new_addr = (uint8_t) tu_le16toh(xfer->setup->wValue);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	885b      	ldrh	r3, [r3, #2]
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800ec40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ec44:	74fb      	strb	r3, [r7, #19]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800ec46:	7cfb      	ldrb	r3, [r7, #19]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d002      	beq.n	800ec52 <process_enumeration+0x152>
 800ec4c:	7cfb      	ldrb	r3, [r7, #19]
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d901      	bls.n	800ec56 <process_enumeration+0x156>
 800ec52:	2300      	movs	r3, #0
 800ec54:	e006      	b.n	800ec64 <process_enumeration+0x164>
  return &_usbh_devices[dev_addr-1];
 800ec56:	7cfb      	ldrb	r3, [r7, #19]
 800ec58:	3b01      	subs	r3, #1
 800ec5a:	2256      	movs	r2, #86	@ 0x56
 800ec5c:	fb02 f303 	mul.w	r3, r2, r3
 800ec60:	4a59      	ldr	r2, [pc, #356]	@ (800edc8 <process_enumeration+0x2c8>)
 800ec62:	4413      	add	r3, r2

      usbh_device_t* new_dev = get_device(new_addr);
 800ec64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TU_ASSERT(new_dev,);
 800ec66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d10a      	bne.n	800ec82 <process_enumeration+0x182>
 800ec6c:	4b53      	ldr	r3, [pc, #332]	@ (800edbc <process_enumeration+0x2bc>)
 800ec6e:	623b      	str	r3, [r7, #32]
 800ec70:	6a3b      	ldr	r3, [r7, #32]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f003 0301 	and.w	r3, r3, #1
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f000 8144 	beq.w	800ef06 <process_enumeration+0x406>
 800ec7e:	be00      	bkpt	0x0000
 800ec80:	e141      	b.n	800ef06 <process_enumeration+0x406>
      new_dev->addressed = 1;
 800ec82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec84:	7913      	ldrb	r3, [r2, #4]
 800ec86:	f043 0302 	orr.w	r3, r3, #2
 800ec8a:	7113      	strb	r3, [r2, #4]

      // Close device 0
      hcd_device_close(_dev0.rhport, 0);
 800ec8c:	4b49      	ldr	r3, [pc, #292]	@ (800edb4 <process_enumeration+0x2b4>)
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	2100      	movs	r1, #0
 800ec92:	4618      	mov	r0, r3
 800ec94:	f000 fef6 	bl	800fa84 <hcd_device_close>

      // open control pipe for new address
      TU_ASSERT(usbh_edpt_control_open(new_addr, new_dev->ep0_size),);
 800ec98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec9a:	795a      	ldrb	r2, [r3, #5]
 800ec9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800eca0:	4611      	mov	r1, r2
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7ff fce2 	bl	800e66c <usbh_edpt_control_open>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	f083 0301 	eor.w	r3, r3, #1
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d00a      	beq.n	800ecca <process_enumeration+0x1ca>
 800ecb4:	4b41      	ldr	r3, [pc, #260]	@ (800edbc <process_enumeration+0x2bc>)
 800ecb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f003 0301 	and.w	r3, r3, #1
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 8122 	beq.w	800ef0a <process_enumeration+0x40a>
 800ecc6:	be00      	bkpt	0x0000
 800ecc8:	e11f      	b.n	800ef0a <process_enumeration+0x40a>

      // Get full device descriptor
      TU_LOG_USBH("Get Device Descriptor\r\n");
      TU_ASSERT(tuh_descriptor_get_device(new_addr, _usbh_epbuf.ctrl, sizeof(tusb_desc_device_t),
 800ecca:	f897 0033 	ldrb.w	r0, [r7, #51]	@ 0x33
 800ecce:	2309      	movs	r3, #9
 800ecd0:	9300      	str	r3, [sp, #0]
 800ecd2:	4b3b      	ldr	r3, [pc, #236]	@ (800edc0 <process_enumeration+0x2c0>)
 800ecd4:	2212      	movs	r2, #18
 800ecd6:	493b      	ldr	r1, [pc, #236]	@ (800edc4 <process_enumeration+0x2c4>)
 800ecd8:	f7ff fe07 	bl	800e8ea <tuh_descriptor_get_device>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	f083 0301 	eor.w	r3, r3, #1
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	f000 8112 	beq.w	800ef0e <process_enumeration+0x40e>
 800ecea:	4b34      	ldr	r3, [pc, #208]	@ (800edbc <process_enumeration+0x2bc>)
 800ecec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ecee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f003 0301 	and.w	r3, r3, #1
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f000 810b 	beq.w	800ef12 <process_enumeration+0x412>
 800ecfc:	be00      	bkpt	0x0000
 800ecfe:	e108      	b.n	800ef12 <process_enumeration+0x412>
                                          process_enumeration, ENUM_GET_9BYTE_CONFIG_DESC),);
      break;
    }

    case ENUM_GET_9BYTE_CONFIG_DESC: {
      tusb_desc_device_t const* desc_device = (tusb_desc_device_t const*) _usbh_epbuf.ctrl;
 800ed00:	4b30      	ldr	r3, [pc, #192]	@ (800edc4 <process_enumeration+0x2c4>)
 800ed02:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed04:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800ed08:	74bb      	strb	r3, [r7, #18]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800ed0a:	7cbb      	ldrb	r3, [r7, #18]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d002      	beq.n	800ed16 <process_enumeration+0x216>
 800ed10:	7cbb      	ldrb	r3, [r7, #18]
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d901      	bls.n	800ed1a <process_enumeration+0x21a>
 800ed16:	2300      	movs	r3, #0
 800ed18:	e006      	b.n	800ed28 <process_enumeration+0x228>
  return &_usbh_devices[dev_addr-1];
 800ed1a:	7cbb      	ldrb	r3, [r7, #18]
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	2256      	movs	r2, #86	@ 0x56
 800ed20:	fb02 f303 	mul.w	r3, r2, r3
 800ed24:	4a28      	ldr	r2, [pc, #160]	@ (800edc8 <process_enumeration+0x2c8>)
 800ed26:	4413      	add	r3, r2
      usbh_device_t* dev = get_device(daddr);
 800ed28:	643b      	str	r3, [r7, #64]	@ 0x40
      TU_ASSERT(dev,);
 800ed2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d10a      	bne.n	800ed46 <process_enumeration+0x246>
 800ed30:	4b22      	ldr	r3, [pc, #136]	@ (800edbc <process_enumeration+0x2bc>)
 800ed32:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f003 0301 	and.w	r3, r3, #1
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f000 80ea 	beq.w	800ef16 <process_enumeration+0x416>
 800ed42:	be00      	bkpt	0x0000
 800ed44:	e0e7      	b.n	800ef16 <process_enumeration+0x416>

      dev->vid = desc_device->idVendor;
 800ed46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed48:	891b      	ldrh	r3, [r3, #8]
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed4e:	80da      	strh	r2, [r3, #6]
      dev->pid = desc_device->idProduct;
 800ed50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed52:	895b      	ldrh	r3, [r3, #10]
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed58:	811a      	strh	r2, [r3, #8]
      dev->i_manufacturer = desc_device->iManufacturer;
 800ed5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed5c:	7b9a      	ldrb	r2, [r3, #14]
 800ed5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed60:	729a      	strb	r2, [r3, #10]
      dev->i_product = desc_device->iProduct;
 800ed62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed64:	7bda      	ldrb	r2, [r3, #15]
 800ed66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed68:	72da      	strb	r2, [r3, #11]
      dev->i_serial = desc_device->iSerialNumber;
 800ed6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed6c:	7c1a      	ldrb	r2, [r3, #16]
 800ed6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed70:	731a      	strb	r2, [r3, #12]

      // Get 9-byte for total length
      uint8_t const config_idx = CONFIG_NUM - 1;
 800ed72:	2300      	movs	r3, #0
 800ed74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      TU_LOG_USBH("Get Configuration[0] Descriptor (9 bytes)\r\n");
      TU_ASSERT(tuh_descriptor_get_configuration(daddr, config_idx, _usbh_epbuf.ctrl, 9,
 800ed78:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800ed7c:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 800ed80:	230a      	movs	r3, #10
 800ed82:	9301      	str	r3, [sp, #4]
 800ed84:	4b0e      	ldr	r3, [pc, #56]	@ (800edc0 <process_enumeration+0x2c0>)
 800ed86:	9300      	str	r3, [sp, #0]
 800ed88:	2309      	movs	r3, #9
 800ed8a:	4a0e      	ldr	r2, [pc, #56]	@ (800edc4 <process_enumeration+0x2c4>)
 800ed8c:	f7ff fdd2 	bl	800e934 <tuh_descriptor_get_configuration>
 800ed90:	4603      	mov	r3, r0
 800ed92:	f083 0301 	eor.w	r3, r3, #1
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	f000 80be 	beq.w	800ef1a <process_enumeration+0x41a>
 800ed9e:	4b07      	ldr	r3, [pc, #28]	@ (800edbc <process_enumeration+0x2bc>)
 800eda0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eda2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f003 0301 	and.w	r3, r3, #1
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f000 80b7 	beq.w	800ef1e <process_enumeration+0x41e>
 800edb0:	be00      	bkpt	0x0000
 800edb2:	e0b4      	b.n	800ef1e <process_enumeration+0x41e>
 800edb4:	24001b78 	.word	0x24001b78
 800edb8:	24001db0 	.word	0x24001db0
 800edbc:	e000edf0 	.word	0xe000edf0
 800edc0:	0800eb01 	.word	0x0800eb01
 800edc4:	24001cb0 	.word	0x24001cb0
 800edc8:	24001b7c 	.word	0x24001b7c
                                                 process_enumeration, ENUM_GET_FULL_CONFIG_DESC),);
      break;
    }

    case ENUM_GET_FULL_CONFIG_DESC: {
      uint8_t const* desc_config = _usbh_epbuf.ctrl;
 800edcc:	4b5d      	ldr	r3, [pc, #372]	@ (800ef44 <process_enumeration+0x444>)
 800edce:	657b      	str	r3, [r7, #84]	@ 0x54

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh(
 800edd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edd2:	3302      	adds	r3, #2
 800edd4:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	881b      	ldrh	r3, [r3, #0]
 800edda:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
          tu_unaligned_read16(desc_config + offsetof(tusb_desc_configuration_t, wTotalLength)));

      // TODO not enough buffer to hold configuration descriptor
      TU_ASSERT(total_len <= CFG_TUH_ENUMERATION_BUFSIZE,);
 800edde:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800ede2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ede6:	d90a      	bls.n	800edfe <process_enumeration+0x2fe>
 800ede8:	4b57      	ldr	r3, [pc, #348]	@ (800ef48 <process_enumeration+0x448>)
 800edea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800edec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f003 0301 	and.w	r3, r3, #1
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f000 8094 	beq.w	800ef22 <process_enumeration+0x422>
 800edfa:	be00      	bkpt	0x0000
 800edfc:	e091      	b.n	800ef22 <process_enumeration+0x422>

      // Get full configuration descriptor
      uint8_t const config_idx = CONFIG_NUM - 1;
 800edfe:	2300      	movs	r3, #0
 800ee00:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
      TU_LOG_USBH("Get Configuration[0] Descriptor\r\n");
      TU_ASSERT(tuh_descriptor_get_configuration(daddr, config_idx, _usbh_epbuf.ctrl, total_len,
 800ee04:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800ee08:	f897 1051 	ldrb.w	r1, [r7, #81]	@ 0x51
 800ee0c:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 800ee10:	220b      	movs	r2, #11
 800ee12:	9201      	str	r2, [sp, #4]
 800ee14:	4a4d      	ldr	r2, [pc, #308]	@ (800ef4c <process_enumeration+0x44c>)
 800ee16:	9200      	str	r2, [sp, #0]
 800ee18:	4a4a      	ldr	r2, [pc, #296]	@ (800ef44 <process_enumeration+0x444>)
 800ee1a:	f7ff fd8b 	bl	800e934 <tuh_descriptor_get_configuration>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	f083 0301 	eor.w	r3, r3, #1
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d07d      	beq.n	800ef26 <process_enumeration+0x426>
 800ee2a:	4b47      	ldr	r3, [pc, #284]	@ (800ef48 <process_enumeration+0x448>)
 800ee2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ee2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f003 0301 	and.w	r3, r3, #1
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d077      	beq.n	800ef2a <process_enumeration+0x42a>
 800ee3a:	be00      	bkpt	0x0000
 800ee3c:	e075      	b.n	800ef2a <process_enumeration+0x42a>
                                                 process_enumeration, ENUM_SET_CONFIG),);
      break;
    }

    case ENUM_SET_CONFIG:
      TU_ASSERT(tuh_configuration_set(daddr, CONFIG_NUM, process_enumeration, ENUM_CONFIG_DRIVER),);
 800ee3e:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 800ee42:	230c      	movs	r3, #12
 800ee44:	4a41      	ldr	r2, [pc, #260]	@ (800ef4c <process_enumeration+0x44c>)
 800ee46:	2101      	movs	r1, #1
 800ee48:	f7ff fd90 	bl	800e96c <tuh_configuration_set>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	f083 0301 	eor.w	r3, r3, #1
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d06a      	beq.n	800ef2e <process_enumeration+0x42e>
 800ee58:	4b3b      	ldr	r3, [pc, #236]	@ (800ef48 <process_enumeration+0x448>)
 800ee5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f003 0301 	and.w	r3, r3, #1
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d064      	beq.n	800ef32 <process_enumeration+0x432>
 800ee68:	be00      	bkpt	0x0000
 800ee6a:	e062      	b.n	800ef32 <process_enumeration+0x432>
 800ee6c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800ee70:	72fb      	strb	r3, [r7, #11]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800ee72:	7afb      	ldrb	r3, [r7, #11]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d002      	beq.n	800ee7e <process_enumeration+0x37e>
 800ee78:	7afb      	ldrb	r3, [r7, #11]
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d901      	bls.n	800ee82 <process_enumeration+0x382>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	e006      	b.n	800ee90 <process_enumeration+0x390>
  return &_usbh_devices[dev_addr-1];
 800ee82:	7afb      	ldrb	r3, [r7, #11]
 800ee84:	3b01      	subs	r3, #1
 800ee86:	2256      	movs	r2, #86	@ 0x56
 800ee88:	fb02 f303 	mul.w	r3, r2, r3
 800ee8c:	4a30      	ldr	r2, [pc, #192]	@ (800ef50 <process_enumeration+0x450>)
 800ee8e:	4413      	add	r3, r2
      break;

    case ENUM_CONFIG_DRIVER: {
      TU_LOG_USBH("Device configured\r\n");
      usbh_device_t* dev = get_device(daddr);
 800ee90:	667b      	str	r3, [r7, #100]	@ 0x64
      TU_ASSERT(dev,);
 800ee92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d109      	bne.n	800eeac <process_enumeration+0x3ac>
 800ee98:	4b2b      	ldr	r3, [pc, #172]	@ (800ef48 <process_enumeration+0x448>)
 800ee9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ee9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f003 0301 	and.w	r3, r3, #1
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d046      	beq.n	800ef36 <process_enumeration+0x436>
 800eea8:	be00      	bkpt	0x0000
 800eeaa:	e044      	b.n	800ef36 <process_enumeration+0x436>

      dev->configured = 1;
 800eeac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eeae:	7913      	ldrb	r3, [r2, #4]
 800eeb0:	f043 0304 	orr.w	r3, r3, #4
 800eeb4:	7113      	strb	r3, [r2, #4]

      // Parse configuration & set up drivers
      // driver_open() must not make any usb transfer
      TU_ASSERT(_parse_configuration_descriptor(daddr, (tusb_desc_configuration_t*) _usbh_epbuf.ctrl),);
 800eeb6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800eeba:	4922      	ldr	r1, [pc, #136]	@ (800ef44 <process_enumeration+0x444>)
 800eebc:	4618      	mov	r0, r3
 800eebe:	f000 f971 	bl	800f1a4 <_parse_configuration_descriptor>
 800eec2:	4603      	mov	r3, r0
 800eec4:	f083 0301 	eor.w	r3, r3, #1
 800eec8:	b2db      	uxtb	r3, r3
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d009      	beq.n	800eee2 <process_enumeration+0x3e2>
 800eece:	4b1e      	ldr	r3, [pc, #120]	@ (800ef48 <process_enumeration+0x448>)
 800eed0:	663b      	str	r3, [r7, #96]	@ 0x60
 800eed2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f003 0301 	and.w	r3, r3, #1
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d02d      	beq.n	800ef3a <process_enumeration+0x43a>
 800eede:	be00      	bkpt	0x0000
 800eee0:	e02b      	b.n	800ef3a <process_enumeration+0x43a>

      // Start the Set Configuration process for interfaces (itf = TUSB_INDEX_INVALID_8)
      // Since driver can perform control transfer within its set_config, this is done asynchronously.
      // The process continue with next interface when class driver complete its sequence with usbh_driver_set_config_complete()
      // TODO use separated API instead of using TUSB_INDEX_INVALID_8
      usbh_driver_set_config_complete(daddr, TUSB_INDEX_INVALID_8);
 800eee2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800eee6:	21ff      	movs	r1, #255	@ 0xff
 800eee8:	4618      	mov	r0, r3
 800eeea:	f000 fa55 	bl	800f398 <usbh_driver_set_config_complete>
      break;
 800eeee:	e025      	b.n	800ef3c <process_enumeration+0x43c>
    }

    default:
      // stop enumeration if unknown state
      enum_full_complete();
 800eef0:	f000 faa4 	bl	800f43c <enum_full_complete>
      break;
 800eef4:	e022      	b.n	800ef3c <process_enumeration+0x43c>
    return;
 800eef6:	bf00      	nop
 800eef8:	e020      	b.n	800ef3c <process_enumeration+0x43c>
      TU_ASSERT(usbh_edpt_control_open(addr0, 8),);
 800eefa:	bf00      	nop
 800eefc:	e01e      	b.n	800ef3c <process_enumeration+0x43c>
      break;
 800eefe:	bf00      	nop
 800ef00:	e01c      	b.n	800ef3c <process_enumeration+0x43c>
      TU_ASSERT(tuh_descriptor_get_device(addr0, _usbh_epbuf.ctrl, 8,
 800ef02:	bf00      	nop
 800ef04:	e01a      	b.n	800ef3c <process_enumeration+0x43c>
      TU_ASSERT(new_dev,);
 800ef06:	bf00      	nop
 800ef08:	e018      	b.n	800ef3c <process_enumeration+0x43c>
      TU_ASSERT(usbh_edpt_control_open(new_addr, new_dev->ep0_size),);
 800ef0a:	bf00      	nop
 800ef0c:	e016      	b.n	800ef3c <process_enumeration+0x43c>
      break;
 800ef0e:	bf00      	nop
 800ef10:	e014      	b.n	800ef3c <process_enumeration+0x43c>
      TU_ASSERT(tuh_descriptor_get_device(new_addr, _usbh_epbuf.ctrl, sizeof(tusb_desc_device_t),
 800ef12:	bf00      	nop
 800ef14:	e012      	b.n	800ef3c <process_enumeration+0x43c>
      TU_ASSERT(dev,);
 800ef16:	bf00      	nop
 800ef18:	e010      	b.n	800ef3c <process_enumeration+0x43c>
      break;
 800ef1a:	bf00      	nop
 800ef1c:	e00e      	b.n	800ef3c <process_enumeration+0x43c>
      TU_ASSERT(tuh_descriptor_get_configuration(daddr, config_idx, _usbh_epbuf.ctrl, 9,
 800ef1e:	bf00      	nop
 800ef20:	e00c      	b.n	800ef3c <process_enumeration+0x43c>
      TU_ASSERT(total_len <= CFG_TUH_ENUMERATION_BUFSIZE,);
 800ef22:	bf00      	nop
 800ef24:	e00a      	b.n	800ef3c <process_enumeration+0x43c>
      break;
 800ef26:	bf00      	nop
 800ef28:	e008      	b.n	800ef3c <process_enumeration+0x43c>
      TU_ASSERT(tuh_descriptor_get_configuration(daddr, config_idx, _usbh_epbuf.ctrl, total_len,
 800ef2a:	bf00      	nop
 800ef2c:	e006      	b.n	800ef3c <process_enumeration+0x43c>
      break;
 800ef2e:	bf00      	nop
 800ef30:	e004      	b.n	800ef3c <process_enumeration+0x43c>
      TU_ASSERT(tuh_configuration_set(daddr, CONFIG_NUM, process_enumeration, ENUM_CONFIG_DRIVER),);
 800ef32:	bf00      	nop
 800ef34:	e002      	b.n	800ef3c <process_enumeration+0x43c>
      TU_ASSERT(dev,);
 800ef36:	bf00      	nop
 800ef38:	e000      	b.n	800ef3c <process_enumeration+0x43c>
      TU_ASSERT(_parse_configuration_descriptor(daddr, (tusb_desc_configuration_t*) _usbh_epbuf.ctrl),);
 800ef3a:	bf00      	nop
  }
}
 800ef3c:	3770      	adds	r7, #112	@ 0x70
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	24001cb0 	.word	0x24001cb0
 800ef48:	e000edf0 	.word	0xe000edf0
 800ef4c:	0800eb01 	.word	0x0800eb01
 800ef50:	24001b7c 	.word	0x24001b7c

0800ef54 <enum_new_device>:



static bool enum_new_device(hcd_event_t* event) {
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b088      	sub	sp, #32
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  _dev0.rhport = event->rhport;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	781a      	ldrb	r2, [r3, #0]
 800ef60:	4b25      	ldr	r3, [pc, #148]	@ (800eff8 <enum_new_device+0xa4>)
 800ef62:	701a      	strb	r2, [r3, #0]
  _dev0.hub_addr = event->connection.hub_addr;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	791a      	ldrb	r2, [r3, #4]
 800ef68:	4b23      	ldr	r3, [pc, #140]	@ (800eff8 <enum_new_device+0xa4>)
 800ef6a:	705a      	strb	r2, [r3, #1]
  _dev0.hub_port = event->connection.hub_port;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	795a      	ldrb	r2, [r3, #5]
 800ef70:	4b21      	ldr	r3, [pc, #132]	@ (800eff8 <enum_new_device+0xa4>)
 800ef72:	709a      	strb	r2, [r3, #2]

  if (_dev0.hub_addr == 0) {
 800ef74:	4b20      	ldr	r3, [pc, #128]	@ (800eff8 <enum_new_device+0xa4>)
 800ef76:	785b      	ldrb	r3, [r3, #1]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d138      	bne.n	800efee <enum_new_device+0x9a>
    // connected directly to roothub
    hcd_port_reset(_dev0.rhport);
 800ef7c:	4b1e      	ldr	r3, [pc, #120]	@ (800eff8 <enum_new_device+0xa4>)
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f000 fd4d 	bl	800fa20 <hcd_port_reset>

    // Since we are in middle of rhport reset, frame number is not available yet.
    // need to depend on tusb_time_millis_api()
    tusb_time_delay_ms_api(ENUM_RESET_DELAY_MS);
 800ef86:	2032      	movs	r0, #50	@ 0x32
 800ef88:	f001 fd2c 	bl	80109e4 <tusb_time_delay_ms_api>

    hcd_port_reset_end(_dev0.rhport);
 800ef8c:	4b1a      	ldr	r3, [pc, #104]	@ (800eff8 <enum_new_device+0xa4>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	4618      	mov	r0, r3
 800ef92:	f000 fd54 	bl	800fa3e <hcd_port_reset_end>

    // wait until device connection is stable TODO non blocking
    tusb_time_delay_ms_api(ENUM_DEBOUNCING_DELAY_MS);
 800ef96:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800ef9a:	f001 fd23 	bl	80109e4 <tusb_time_delay_ms_api>

    // device unplugged while delaying
    if (!hcd_port_connect_status(_dev0.rhport)) {
 800ef9e:	4b16      	ldr	r3, [pc, #88]	@ (800eff8 <enum_new_device+0xa4>)
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	4618      	mov	r0, r3
 800efa4:	f000 fd24 	bl	800f9f0 <hcd_port_connect_status>
 800efa8:	4603      	mov	r3, r0
 800efaa:	f083 0301 	eor.w	r3, r3, #1
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d003      	beq.n	800efbc <enum_new_device+0x68>
      enum_full_complete();
 800efb4:	f000 fa42 	bl	800f43c <enum_full_complete>
      return true;
 800efb8:	2301      	movs	r3, #1
 800efba:	e019      	b.n	800eff0 <enum_new_device+0x9c>
    }

    _dev0.speed = hcd_port_speed_get(_dev0.rhport);
 800efbc:	4b0e      	ldr	r3, [pc, #56]	@ (800eff8 <enum_new_device+0xa4>)
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f000 fd4b 	bl	800fa5c <hcd_port_speed_get>
 800efc6:	4603      	mov	r3, r0
 800efc8:	f003 030f 	and.w	r3, r3, #15
 800efcc:	b2d9      	uxtb	r1, r3
 800efce:	4a0a      	ldr	r2, [pc, #40]	@ (800eff8 <enum_new_device+0xa4>)
 800efd0:	78d3      	ldrb	r3, [r2, #3]
 800efd2:	f361 0303 	bfi	r3, r1, #0, #4
 800efd6:	70d3      	strb	r3, [r2, #3]
    TU_LOG_USBH("%s Speed\r\n", tu_str_speed[_dev0.speed]);

    // fake transfer to kick-off the enumeration process
    tuh_xfer_t xfer;
    xfer.daddr = 0;
 800efd8:	2300      	movs	r3, #0
 800efda:	723b      	strb	r3, [r7, #8]
    xfer.result = XFER_RESULT_SUCCESS;
 800efdc:	2300      	movs	r3, #0
 800efde:	72fb      	strb	r3, [r7, #11]
    xfer.user_data = ENUM_ADDR0_DEVICE_DESC;
 800efe0:	2303      	movs	r3, #3
 800efe2:	61fb      	str	r3, [r7, #28]

    process_enumeration(&xfer);
 800efe4:	f107 0308 	add.w	r3, r7, #8
 800efe8:	4618      	mov	r0, r3
 800efea:	f7ff fd89 	bl	800eb00 <process_enumeration>
    TU_ASSERT(hub_port_get_status(_dev0.hub_addr, _dev0.hub_port, _usbh_epbuf.ctrl,
                                  process_enumeration, ENUM_HUB_CLEAR_RESET_1));
  }
#endif // hub

  return true;
 800efee:	2301      	movs	r3, #1
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3720      	adds	r7, #32
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	24001b78 	.word	0x24001b78

0800effc <get_new_address>:

static uint8_t get_new_address(bool is_hub) {
 800effc:	b480      	push	{r7}
 800effe:	b085      	sub	sp, #20
 800f000:	af00      	add	r7, sp, #0
 800f002:	4603      	mov	r3, r0
 800f004:	71fb      	strb	r3, [r7, #7]
  uint8_t start;
  uint8_t end;

  if ( is_hub ) {
 800f006:	79fb      	ldrb	r3, [r7, #7]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d004      	beq.n	800f016 <get_new_address+0x1a>
    start = CFG_TUH_DEVICE_MAX;
 800f00c:	2301      	movs	r3, #1
 800f00e:	73fb      	strb	r3, [r7, #15]
    end   = start + CFG_TUH_HUB;
 800f010:	7bfb      	ldrb	r3, [r7, #15]
 800f012:	73bb      	strb	r3, [r7, #14]
 800f014:	e004      	b.n	800f020 <get_new_address+0x24>
  }else {
    start = 0;
 800f016:	2300      	movs	r3, #0
 800f018:	73fb      	strb	r3, [r7, #15]
    end   = start + CFG_TUH_DEVICE_MAX;
 800f01a:	7bfb      	ldrb	r3, [r7, #15]
 800f01c:	3301      	adds	r3, #1
 800f01e:	73bb      	strb	r3, [r7, #14]
  }

  for (uint8_t idx = start; idx < end; idx++) {
 800f020:	7bfb      	ldrb	r3, [r7, #15]
 800f022:	737b      	strb	r3, [r7, #13]
 800f024:	e012      	b.n	800f04c <get_new_address+0x50>
    if (!_usbh_devices[idx].connected) return (idx+1);
 800f026:	7b7b      	ldrb	r3, [r7, #13]
 800f028:	4a0e      	ldr	r2, [pc, #56]	@ (800f064 <get_new_address+0x68>)
 800f02a:	2156      	movs	r1, #86	@ 0x56
 800f02c:	fb01 f303 	mul.w	r3, r1, r3
 800f030:	4413      	add	r3, r2
 800f032:	791b      	ldrb	r3, [r3, #4]
 800f034:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d103      	bne.n	800f046 <get_new_address+0x4a>
 800f03e:	7b7b      	ldrb	r3, [r7, #13]
 800f040:	3301      	adds	r3, #1
 800f042:	b2db      	uxtb	r3, r3
 800f044:	e007      	b.n	800f056 <get_new_address+0x5a>
  for (uint8_t idx = start; idx < end; idx++) {
 800f046:	7b7b      	ldrb	r3, [r7, #13]
 800f048:	3301      	adds	r3, #1
 800f04a:	737b      	strb	r3, [r7, #13]
 800f04c:	7b7a      	ldrb	r2, [r7, #13]
 800f04e:	7bbb      	ldrb	r3, [r7, #14]
 800f050:	429a      	cmp	r2, r3
 800f052:	d3e8      	bcc.n	800f026 <get_new_address+0x2a>
  }

  return 0; // invalid address
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	3714      	adds	r7, #20
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop
 800f064:	24001b7c 	.word	0x24001b7c

0800f068 <enum_request_set_addr>:

static bool enum_request_set_addr(void) {
 800f068:	b580      	push	{r7, lr}
 800f06a:	b08e      	sub	sp, #56	@ 0x38
 800f06c:	af00      	add	r7, sp, #0
  tusb_desc_device_t const* desc_device = (tusb_desc_device_t const*) _usbh_epbuf.ctrl;
 800f06e:	4b48      	ldr	r3, [pc, #288]	@ (800f190 <enum_request_set_addr+0x128>)
 800f070:	637b      	str	r3, [r7, #52]	@ 0x34

  // Get new address
  uint8_t const new_addr = get_new_address(desc_device->bDeviceClass == TUSB_CLASS_HUB);
 800f072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f074:	791b      	ldrb	r3, [r3, #4]
 800f076:	2b09      	cmp	r3, #9
 800f078:	bf0c      	ite	eq
 800f07a:	2301      	moveq	r3, #1
 800f07c:	2300      	movne	r3, #0
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	4618      	mov	r0, r3
 800f082:	f7ff ffbb 	bl	800effc <get_new_address>
 800f086:	4603      	mov	r3, r0
 800f088:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(new_addr != 0);
 800f08c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f090:	2b00      	cmp	r3, #0
 800f092:	d10a      	bne.n	800f0aa <enum_request_set_addr+0x42>
 800f094:	4b3f      	ldr	r3, [pc, #252]	@ (800f194 <enum_request_set_addr+0x12c>)
 800f096:	627b      	str	r3, [r7, #36]	@ 0x24
 800f098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f003 0301 	and.w	r3, r3, #1
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d000      	beq.n	800f0a6 <enum_request_set_addr+0x3e>
 800f0a4:	be00      	bkpt	0x0000
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	e06e      	b.n	800f188 <enum_request_set_addr+0x120>
 800f0aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f0ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800f0b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d003      	beq.n	800f0c2 <enum_request_set_addr+0x5a>
 800f0ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d901      	bls.n	800f0c6 <enum_request_set_addr+0x5e>
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	e007      	b.n	800f0d6 <enum_request_set_addr+0x6e>
  return &_usbh_devices[dev_addr-1];
 800f0c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f0ca:	3b01      	subs	r3, #1
 800f0cc:	2256      	movs	r2, #86	@ 0x56
 800f0ce:	fb02 f303 	mul.w	r3, r2, r3
 800f0d2:	4a31      	ldr	r2, [pc, #196]	@ (800f198 <enum_request_set_addr+0x130>)
 800f0d4:	4413      	add	r3, r2
  TU_LOG_USBH("Set Address = %d\r\n", new_addr);

  usbh_device_t* new_dev = get_device(new_addr);
 800f0d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  new_dev->rhport = _dev0.rhport;
 800f0d8:	4b30      	ldr	r3, [pc, #192]	@ (800f19c <enum_request_set_addr+0x134>)
 800f0da:	781a      	ldrb	r2, [r3, #0]
 800f0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0de:	701a      	strb	r2, [r3, #0]
  new_dev->hub_addr = _dev0.hub_addr;
 800f0e0:	4b2e      	ldr	r3, [pc, #184]	@ (800f19c <enum_request_set_addr+0x134>)
 800f0e2:	785a      	ldrb	r2, [r3, #1]
 800f0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e6:	705a      	strb	r2, [r3, #1]
  new_dev->hub_port = _dev0.hub_port;
 800f0e8:	4b2c      	ldr	r3, [pc, #176]	@ (800f19c <enum_request_set_addr+0x134>)
 800f0ea:	789a      	ldrb	r2, [r3, #2]
 800f0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ee:	709a      	strb	r2, [r3, #2]
  new_dev->speed = _dev0.speed;
 800f0f0:	4b2a      	ldr	r3, [pc, #168]	@ (800f19c <enum_request_set_addr+0x134>)
 800f0f2:	78db      	ldrb	r3, [r3, #3]
 800f0f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f0f8:	b2db      	uxtb	r3, r3
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0fe:	70da      	strb	r2, [r3, #3]
  new_dev->connected = 1;
 800f100:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f102:	7913      	ldrb	r3, [r2, #4]
 800f104:	f043 0301 	orr.w	r3, r3, #1
 800f108:	7113      	strb	r3, [r2, #4]
  new_dev->ep0_size = desc_device->bMaxPacketSize0;
 800f10a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f10c:	79da      	ldrb	r2, [r3, #7]
 800f10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f110:	715a      	strb	r2, [r3, #5]

  tusb_control_request_t const request = {
 800f112:	7e3b      	ldrb	r3, [r7, #24]
 800f114:	f023 031f 	bic.w	r3, r3, #31
 800f118:	763b      	strb	r3, [r7, #24]
 800f11a:	7e3b      	ldrb	r3, [r7, #24]
 800f11c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800f120:	763b      	strb	r3, [r7, #24]
 800f122:	7e3b      	ldrb	r3, [r7, #24]
 800f124:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f128:	763b      	strb	r3, [r7, #24]
 800f12a:	2305      	movs	r3, #5
 800f12c:	767b      	strb	r3, [r7, #25]
 800f12e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f132:	b29b      	uxth	r3, r3
 800f134:	837b      	strh	r3, [r7, #26]
 800f136:	2300      	movs	r3, #0
 800f138:	83bb      	strh	r3, [r7, #28]
 800f13a:	2300      	movs	r3, #0
 800f13c:	83fb      	strh	r3, [r7, #30]
      .bRequest = TUSB_REQ_SET_ADDRESS,
      .wValue   = tu_htole16(new_addr),
      .wIndex   = 0,
      .wLength  = 0
  };
  tuh_xfer_t xfer = {
 800f13e:	463b      	mov	r3, r7
 800f140:	2200      	movs	r2, #0
 800f142:	601a      	str	r2, [r3, #0]
 800f144:	605a      	str	r2, [r3, #4]
 800f146:	609a      	str	r2, [r3, #8]
 800f148:	60da      	str	r2, [r3, #12]
 800f14a:	611a      	str	r2, [r3, #16]
 800f14c:	615a      	str	r2, [r3, #20]
 800f14e:	f107 0318 	add.w	r3, r7, #24
 800f152:	60bb      	str	r3, [r7, #8]
 800f154:	4b12      	ldr	r3, [pc, #72]	@ (800f1a0 <enum_request_set_addr+0x138>)
 800f156:	613b      	str	r3, [r7, #16]
 800f158:	2308      	movs	r3, #8
 800f15a:	617b      	str	r3, [r7, #20]
      .buffer      = NULL,
      .complete_cb = process_enumeration,
      .user_data   = ENUM_GET_DEVICE_DESC
  };

  TU_ASSERT(tuh_control_xfer(&xfer));
 800f15c:	463b      	mov	r3, r7
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fe fe8a 	bl	800de78 <tuh_control_xfer>
 800f164:	4603      	mov	r3, r0
 800f166:	f083 0301 	eor.w	r3, r3, #1
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d00a      	beq.n	800f186 <enum_request_set_addr+0x11e>
 800f170:	4b08      	ldr	r3, [pc, #32]	@ (800f194 <enum_request_set_addr+0x12c>)
 800f172:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f003 0301 	and.w	r3, r3, #1
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d000      	beq.n	800f182 <enum_request_set_addr+0x11a>
 800f180:	be00      	bkpt	0x0000
 800f182:	2300      	movs	r3, #0
 800f184:	e000      	b.n	800f188 <enum_request_set_addr+0x120>
  return true;
 800f186:	2301      	movs	r3, #1
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3738      	adds	r7, #56	@ 0x38
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	24001cb0 	.word	0x24001cb0
 800f194:	e000edf0 	.word	0xe000edf0
 800f198:	24001b7c 	.word	0x24001b7c
 800f19c:	24001b78 	.word	0x24001b78
 800f1a0:	0800eb01 	.word	0x0800eb01

0800f1a4 <_parse_configuration_descriptor>:

static bool _parse_configuration_descriptor(uint8_t dev_addr, tusb_desc_configuration_t const* desc_cfg) {
 800f1a4:	b590      	push	{r4, r7, lr}
 800f1a6:	b099      	sub	sp, #100	@ 0x64
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	6039      	str	r1, [r7, #0]
 800f1ae:	71fb      	strb	r3, [r7, #7]
 800f1b0:	79fb      	ldrb	r3, [r7, #7]
 800f1b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800f1b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d003      	beq.n	800f1c6 <_parse_configuration_descriptor+0x22>
 800f1be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d901      	bls.n	800f1ca <_parse_configuration_descriptor+0x26>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	e007      	b.n	800f1da <_parse_configuration_descriptor+0x36>
  return &_usbh_devices[dev_addr-1];
 800f1ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f1ce:	3b01      	subs	r3, #1
 800f1d0:	2256      	movs	r2, #86	@ 0x56
 800f1d2:	fb02 f303 	mul.w	r3, r2, r3
 800f1d6:	4a6d      	ldr	r2, [pc, #436]	@ (800f38c <_parse_configuration_descriptor+0x1e8>)
 800f1d8:	4413      	add	r3, r2
  usbh_device_t* dev = get_device(dev_addr);
 800f1da:	657b      	str	r3, [r7, #84]	@ 0x54
  uint16_t const total_len = tu_le16toh(desc_cfg->wTotalLength);
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	789a      	ldrb	r2, [r3, #2]
 800f1e0:	78db      	ldrb	r3, [r3, #3]
 800f1e2:	021b      	lsls	r3, r3, #8
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
  uint8_t const* desc_end = ((uint8_t const*) desc_cfg) + total_len;
 800f1ea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800f1ee:	683a      	ldr	r2, [r7, #0]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint8_t const* desc8 = (uint8_t const*) desc;
 800f1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1fa:	627b      	str	r3, [r7, #36]	@ 0x24
  return desc8 + desc8[DESC_OFFSET_LEN];
 800f1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	461a      	mov	r2, r3
 800f202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f204:	4413      	add	r3, r2
  uint8_t const* p_desc   = tu_desc_next(desc_cfg);
 800f206:	65fb      	str	r3, [r7, #92]	@ 0x5c

  TU_LOG_USBH("Parsing Configuration descriptor (wTotalLength = %u)\r\n", total_len);

  // parse each interfaces
  while( p_desc < desc_end ) {
 800f208:	e0b3      	b.n	800f372 <_parse_configuration_descriptor+0x1ce>
 800f20a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f20c:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	781b      	ldrb	r3, [r3, #0]
    if ( 0 == tu_desc_len(p_desc) ) {
 800f212:	2b00      	cmp	r3, #0
 800f214:	f000 80b3 	beq.w	800f37e <_parse_configuration_descriptor+0x1da>
      // Parsed interfaces should still be usable
      TU_LOG_USBH("Encountered a zero-length descriptor after %u bytes\r\n", (uint32_t)p_desc - (uint32_t)desc_cfg);
      break;
    }

    uint8_t assoc_itf_count = 1;
 800f218:	2301      	movs	r3, #1
 800f21a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800f21e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f220:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	3301      	adds	r3, #1
 800f226:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) ) {
 800f228:	2b0b      	cmp	r3, #11
 800f22a:	d10f      	bne.n	800f24c <_parse_configuration_descriptor+0xa8>
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 800f22c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f22e:	64bb      	str	r3, [r7, #72]	@ 0x48
      assoc_itf_count = desc_iad->bInterfaceCount;
 800f230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f232:	78db      	ldrb	r3, [r3, #3]
 800f234:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800f238:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f23a:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	461a      	mov	r2, r3
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 800f24a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f24c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f24e:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	3301      	adds	r3, #1
 800f254:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 800f256:	2b04      	cmp	r3, #4
 800f258:	d00a      	beq.n	800f270 <_parse_configuration_descriptor+0xcc>
 800f25a:	4b4d      	ldr	r3, [pc, #308]	@ (800f390 <_parse_configuration_descriptor+0x1ec>)
 800f25c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f003 0301 	and.w	r3, r3, #1
 800f266:	2b00      	cmp	r3, #0
 800f268:	d000      	beq.n	800f26c <_parse_configuration_descriptor+0xc8>
 800f26a:	be00      	bkpt	0x0000
 800f26c:	2300      	movs	r3, #0
 800f26e:	e088      	b.n	800f382 <_parse_configuration_descriptor+0x1de>
    tusb_desc_interface_t const* desc_itf = (tusb_desc_interface_t const*) p_desc;
 800f270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f272:	647b      	str	r3, [r7, #68]	@ 0x44
        CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == desc_itf->bInterfaceSubClass) {
      assoc_itf_count = 2;
    }
#endif

    uint16_t const drv_len = tu_desc_get_interface_total_len(desc_itf, assoc_itf_count, (uint16_t) (desc_end-p_desc));
 800f274:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f278:	1ad3      	subs	r3, r2, r3
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800f280:	4619      	mov	r1, r3
 800f282:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f284:	f001 fd4d 	bl	8010d22 <tu_desc_get_interface_total_len>
 800f288:	4603      	mov	r3, r0
 800f28a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    TU_ASSERT(drv_len >= sizeof(tusb_desc_interface_t));
 800f28e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f292:	2b08      	cmp	r3, #8
 800f294:	d80a      	bhi.n	800f2ac <_parse_configuration_descriptor+0x108>
 800f296:	4b3e      	ldr	r3, [pc, #248]	@ (800f390 <_parse_configuration_descriptor+0x1ec>)
 800f298:	633b      	str	r3, [r7, #48]	@ 0x30
 800f29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f003 0301 	and.w	r3, r3, #1
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d000      	beq.n	800f2a8 <_parse_configuration_descriptor+0x104>
 800f2a6:	be00      	bkpt	0x0000
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	e06a      	b.n	800f382 <_parse_configuration_descriptor+0x1de>

    // Find driver for this interface
    for (uint8_t drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++) {
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800f2b2:	e053      	b.n	800f35c <_parse_configuration_descriptor+0x1b8>
      usbh_class_driver_t const * driver = get_driver(drv_id);
 800f2b4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7fe fab7 	bl	800d82c <get_driver>
 800f2be:	63f8      	str	r0, [r7, #60]	@ 0x3c
      if (driver && driver->open(dev->rhport, dev_addr, desc_itf, drv_len) ) {
 800f2c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d045      	beq.n	800f352 <_parse_configuration_descriptor+0x1ae>
 800f2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2c8:	68dc      	ldr	r4, [r3, #12]
 800f2ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2cc:	7818      	ldrb	r0, [r3, #0]
 800f2ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f2d2:	79f9      	ldrb	r1, [r7, #7]
 800f2d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2d6:	47a0      	blx	r4
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d039      	beq.n	800f352 <_parse_configuration_descriptor+0x1ae>
        // open successfully
        TU_LOG_USBH("  %s opened\r\n", driver->name);

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++) {
 800f2de:	2300      	movs	r3, #0
 800f2e0:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 800f2e4:	e024      	b.n	800f330 <_parse_configuration_descriptor+0x18c>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 800f2e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2e8:	789a      	ldrb	r2, [r3, #2]
 800f2ea:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800f2ee:	4413      	add	r3, r2
 800f2f0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

          // Interface number must not be used already
          TU_ASSERT( TUSB_INDEX_INVALID_8 == dev->itf2drv[itf_num] );
 800f2f4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f2f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f2fa:	4413      	add	r3, r2
 800f2fc:	7b5b      	ldrb	r3, [r3, #13]
 800f2fe:	2bff      	cmp	r3, #255	@ 0xff
 800f300:	d00a      	beq.n	800f318 <_parse_configuration_descriptor+0x174>
 800f302:	4b23      	ldr	r3, [pc, #140]	@ (800f390 <_parse_configuration_descriptor+0x1ec>)
 800f304:	637b      	str	r3, [r7, #52]	@ 0x34
 800f306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f003 0301 	and.w	r3, r3, #1
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d000      	beq.n	800f314 <_parse_configuration_descriptor+0x170>
 800f312:	be00      	bkpt	0x0000
 800f314:	2300      	movs	r3, #0
 800f316:	e034      	b.n	800f382 <_parse_configuration_descriptor+0x1de>
          dev->itf2drv[itf_num] = drv_id;
 800f318:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f31c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f31e:	4413      	add	r3, r2
 800f320:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800f324:	735a      	strb	r2, [r3, #13]
        for(uint8_t i=0; i<assoc_itf_count; i++) {
 800f326:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800f32a:	3301      	adds	r3, #1
 800f32c:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 800f330:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800f334:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800f338:	429a      	cmp	r2, r3
 800f33a:	d3d4      	bcc.n	800f2e6 <_parse_configuration_descriptor+0x142>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(dev->ep2drv, desc_itf, drv_len, drv_id);
 800f33c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f33e:	f103 0015 	add.w	r0, r3, #21
 800f342:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800f346:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f34a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f34c:	f001 fca4 	bl	8010c98 <tu_edpt_bind_driver>

        break; // exit driver find loop
 800f350:	e00a      	b.n	800f368 <_parse_configuration_descriptor+0x1c4>
    for (uint8_t drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++) {
 800f352:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800f356:	3301      	adds	r3, #1
 800f358:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800f35c:	4b0d      	ldr	r3, [pc, #52]	@ (800f394 <_parse_configuration_descriptor+0x1f0>)
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800f364:	429a      	cmp	r2, r3
 800f366:	d9a5      	bls.n	800f2b4 <_parse_configuration_descriptor+0x110>
               dev->rhport, dev_addr, desc_itf->bInterfaceNumber, desc_itf->bInterfaceClass, desc_itf->bInterfaceSubClass, desc_itf->bInterfaceProtocol);
      }
    }

    // next Interface or IAD descriptor
    p_desc += drv_len;
 800f368:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f36c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f36e:	4413      	add	r3, r2
 800f370:	65fb      	str	r3, [r7, #92]	@ 0x5c
  while( p_desc < desc_end ) {
 800f372:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f376:	429a      	cmp	r2, r3
 800f378:	f4ff af47 	bcc.w	800f20a <_parse_configuration_descriptor+0x66>
 800f37c:	e000      	b.n	800f380 <_parse_configuration_descriptor+0x1dc>
      break;
 800f37e:	bf00      	nop
  }

  return true;
 800f380:	2301      	movs	r3, #1
}
 800f382:	4618      	mov	r0, r3
 800f384:	3764      	adds	r7, #100	@ 0x64
 800f386:	46bd      	mov	sp, r7
 800f388:	bd90      	pop	{r4, r7, pc}
 800f38a:	bf00      	nop
 800f38c:	24001b7c 	.word	0x24001b7c
 800f390:	e000edf0 	.word	0xe000edf0
 800f394:	24001b74 	.word	0x24001b74

0800f398 <usbh_driver_set_config_complete>:

void usbh_driver_set_config_complete(uint8_t dev_addr, uint8_t itf_num) {
 800f398:	b580      	push	{r7, lr}
 800f39a:	b086      	sub	sp, #24
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	4603      	mov	r3, r0
 800f3a0:	460a      	mov	r2, r1
 800f3a2:	71fb      	strb	r3, [r7, #7]
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	71bb      	strb	r3, [r7, #6]
 800f3a8:	79fb      	ldrb	r3, [r7, #7]
 800f3aa:	72fb      	strb	r3, [r7, #11]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800f3ac:	7afb      	ldrb	r3, [r7, #11]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d002      	beq.n	800f3b8 <usbh_driver_set_config_complete+0x20>
 800f3b2:	7afb      	ldrb	r3, [r7, #11]
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d901      	bls.n	800f3bc <usbh_driver_set_config_complete+0x24>
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	e006      	b.n	800f3ca <usbh_driver_set_config_complete+0x32>
  return &_usbh_devices[dev_addr-1];
 800f3bc:	7afb      	ldrb	r3, [r7, #11]
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	2256      	movs	r2, #86	@ 0x56
 800f3c2:	fb02 f303 	mul.w	r3, r2, r3
 800f3c6:	4a1b      	ldr	r2, [pc, #108]	@ (800f434 <usbh_driver_set_config_complete+0x9c>)
 800f3c8:	4413      	add	r3, r2
  usbh_device_t* dev = get_device(dev_addr);
 800f3ca:	617b      	str	r3, [r7, #20]

  for(itf_num++; itf_num < CFG_TUH_INTERFACE_MAX; itf_num++) {
 800f3cc:	79bb      	ldrb	r3, [r7, #6]
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	71bb      	strb	r3, [r7, #6]
 800f3d2:	e016      	b.n	800f402 <usbh_driver_set_config_complete+0x6a>
    // continue with next valid interface
    // IAD binding interface such as CDCs should return itf_num + 1 when complete
    // with usbh_driver_set_config_complete()
    uint8_t const drv_id = dev->itf2drv[itf_num];
 800f3d4:	79bb      	ldrb	r3, [r7, #6]
 800f3d6:	697a      	ldr	r2, [r7, #20]
 800f3d8:	4413      	add	r3, r2
 800f3da:	7b5b      	ldrb	r3, [r3, #13]
 800f3dc:	74fb      	strb	r3, [r7, #19]
    usbh_class_driver_t const * driver = get_driver(drv_id);
 800f3de:	7cfb      	ldrb	r3, [r7, #19]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fe fa23 	bl	800d82c <get_driver>
 800f3e6:	60f8      	str	r0, [r7, #12]
    if (driver) {
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d006      	beq.n	800f3fc <usbh_driver_set_config_complete+0x64>
      TU_LOG_USBH("%s set config: itf = %u\r\n", driver->name, itf_num);
      driver->set_config(dev_addr, itf_num);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	691b      	ldr	r3, [r3, #16]
 800f3f2:	79b9      	ldrb	r1, [r7, #6]
 800f3f4:	79fa      	ldrb	r2, [r7, #7]
 800f3f6:	4610      	mov	r0, r2
 800f3f8:	4798      	blx	r3
      break;
 800f3fa:	e005      	b.n	800f408 <usbh_driver_set_config_complete+0x70>
  for(itf_num++; itf_num < CFG_TUH_INTERFACE_MAX; itf_num++) {
 800f3fc:	79bb      	ldrb	r3, [r7, #6]
 800f3fe:	3301      	adds	r3, #1
 800f400:	71bb      	strb	r3, [r7, #6]
 800f402:	79bb      	ldrb	r3, [r7, #6]
 800f404:	2b07      	cmp	r3, #7
 800f406:	d9e5      	bls.n	800f3d4 <usbh_driver_set_config_complete+0x3c>
    }
  }

  // all interface are configured
  if (itf_num == CFG_TUH_INTERFACE_MAX) {
 800f408:	79bb      	ldrb	r3, [r7, #6]
 800f40a:	2b08      	cmp	r3, #8
 800f40c:	d10d      	bne.n	800f42a <usbh_driver_set_config_complete+0x92>
    enum_full_complete();
 800f40e:	f000 f815 	bl	800f43c <enum_full_complete>
 800f412:	79fb      	ldrb	r3, [r7, #7]
 800f414:	72bb      	strb	r3, [r7, #10]
  return (CFG_TUH_HUB > 0) && (daddr > CFG_TUH_DEVICE_MAX);
 800f416:	2300      	movs	r3, #0

    if (is_hub_addr(dev_addr)) {
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d106      	bne.n	800f42a <usbh_driver_set_config_complete+0x92>
      TU_LOG_USBH("HUB address = %u is mounted\r\n", dev_addr);
    }else {
      // Invoke callback if available
      if (tuh_mount_cb) tuh_mount_cb(dev_addr);
 800f41c:	4b06      	ldr	r3, [pc, #24]	@ (800f438 <usbh_driver_set_config_complete+0xa0>)
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d003      	beq.n	800f42a <usbh_driver_set_config_complete+0x92>
 800f422:	79fb      	ldrb	r3, [r7, #7]
 800f424:	4618      	mov	r0, r3
 800f426:	f3af 8000 	nop.w
    }
  }
}
 800f42a:	bf00      	nop
 800f42c:	3718      	adds	r7, #24
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	24001b7c 	.word	0x24001b7c
 800f438:	00000000 	.word	0x00000000

0800f43c <enum_full_complete>:

static void enum_full_complete(void) {
 800f43c:	b480      	push	{r7}
 800f43e:	af00      	add	r7, sp, #0
  // mark enumeration as complete
  _dev0.enumerating = 0;
 800f440:	4a04      	ldr	r2, [pc, #16]	@ (800f454 <enum_full_complete+0x18>)
 800f442:	78d3      	ldrb	r3, [r2, #3]
 800f444:	f023 0310 	bic.w	r3, r3, #16
 800f448:	70d3      	strb	r3, [r2, #3]
#if CFG_TUH_HUB
  // get next hub status
  if (_dev0.hub_addr) hub_edpt_status_xfer(_dev0.hub_addr);
#endif

}
 800f44a:	bf00      	nop
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr
 800f454:	24001b78 	.word	0x24001b78

0800f458 <max3421_spi_lock>:
//--------------------------------------------------------------------+

#define reg_read  tuh_max3421_reg_read
#define reg_write tuh_max3421_reg_write

static void max3421_spi_lock(uint8_t rhport, bool in_isr) {
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	4603      	mov	r3, r0
 800f460:	460a      	mov	r2, r1
 800f462:	71fb      	strb	r3, [r7, #7]
 800f464:	4613      	mov	r3, r2
 800f466:	71bb      	strb	r3, [r7, #6]
  // disable interrupt and mutex lock (for pre-emptive RTOS) if not in_isr
  if (!in_isr) {
 800f468:	79bb      	ldrb	r3, [r7, #6]
 800f46a:	f083 0301 	eor.w	r3, r3, #1
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	2b00      	cmp	r3, #0
 800f472:	d004      	beq.n	800f47e <max3421_spi_lock+0x26>
    (void) osal_mutex_lock(_hcd_data.spi_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
    tuh_max3421_int_api(rhport, false);
 800f474:	79fb      	ldrb	r3, [r7, #7]
 800f476:	2100      	movs	r1, #0
 800f478:	4618      	mov	r0, r3
 800f47a:	f7f1 fbcf 	bl	8000c1c <tuh_max3421_int_api>
  }

  // assert CS
  tuh_max3421_spi_cs_api(rhport, true);
 800f47e:	79fb      	ldrb	r3, [r7, #7]
 800f480:	2101      	movs	r1, #1
 800f482:	4618      	mov	r0, r3
 800f484:	f7f1 fbe6 	bl	8000c54 <tuh_max3421_spi_cs_api>
}
 800f488:	bf00      	nop
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <max3421_spi_unlock>:

static void max3421_spi_unlock(uint8_t rhport, bool in_isr) {
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	4603      	mov	r3, r0
 800f498:	460a      	mov	r2, r1
 800f49a:	71fb      	strb	r3, [r7, #7]
 800f49c:	4613      	mov	r3, r2
 800f49e:	71bb      	strb	r3, [r7, #6]
  // de-assert CS
  tuh_max3421_spi_cs_api(rhport, false);
 800f4a0:	79fb      	ldrb	r3, [r7, #7]
 800f4a2:	2100      	movs	r1, #0
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7f1 fbd5 	bl	8000c54 <tuh_max3421_spi_cs_api>

  // mutex unlock and re-enable interrupt
  if (!in_isr) {
 800f4aa:	79bb      	ldrb	r3, [r7, #6]
 800f4ac:	f083 0301 	eor.w	r3, r3, #1
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d004      	beq.n	800f4c0 <max3421_spi_unlock+0x30>
    tuh_max3421_int_api(rhport, true);
 800f4b6:	79fb      	ldrb	r3, [r7, #7]
 800f4b8:	2101      	movs	r1, #1
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7f1 fbae 	bl	8000c1c <tuh_max3421_int_api>
    (void) osal_mutex_unlock(_hcd_data.spi_mutex);
  }
}
 800f4c0:	bf00      	nop
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <tuh_max3421_reg_read>:

uint8_t tuh_max3421_reg_read(uint8_t rhport, uint8_t reg, bool in_isr) {
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	71fb      	strb	r3, [r7, #7]
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	71bb      	strb	r3, [r7, #6]
 800f4d6:	4613      	mov	r3, r2
 800f4d8:	717b      	strb	r3, [r7, #5]
  uint8_t tx_buf[2] = {reg, 0};
 800f4da:	79bb      	ldrb	r3, [r7, #6]
 800f4dc:	733b      	strb	r3, [r7, #12]
 800f4de:	2300      	movs	r3, #0
 800f4e0:	737b      	strb	r3, [r7, #13]
  uint8_t rx_buf[2] = {0, 0};
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	813b      	strh	r3, [r7, #8]

  max3421_spi_lock(rhport, in_isr);
 800f4e6:	797a      	ldrb	r2, [r7, #5]
 800f4e8:	79fb      	ldrb	r3, [r7, #7]
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7ff ffb3 	bl	800f458 <max3421_spi_lock>
  bool ret = tuh_max3421_spi_xfer_api(rhport, tx_buf, rx_buf, 2);
 800f4f2:	f107 0208 	add.w	r2, r7, #8
 800f4f6:	f107 010c 	add.w	r1, r7, #12
 800f4fa:	79f8      	ldrb	r0, [r7, #7]
 800f4fc:	2302      	movs	r3, #2
 800f4fe:	f7f1 fc4d 	bl	8000d9c <tuh_max3421_spi_xfer_api>
 800f502:	4603      	mov	r3, r0
 800f504:	73fb      	strb	r3, [r7, #15]
  max3421_spi_unlock(rhport, in_isr);
 800f506:	797a      	ldrb	r2, [r7, #5]
 800f508:	79fb      	ldrb	r3, [r7, #7]
 800f50a:	4611      	mov	r1, r2
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7ff ffbf 	bl	800f490 <max3421_spi_unlock>

  _hcd_data.hirq = rx_buf[0];
 800f512:	7a3a      	ldrb	r2, [r7, #8]
 800f514:	4b05      	ldr	r3, [pc, #20]	@ (800f52c <tuh_max3421_reg_read+0x64>)
 800f516:	70da      	strb	r2, [r3, #3]
  return ret ? rx_buf[1] : 0;
 800f518:	7bfb      	ldrb	r3, [r7, #15]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d001      	beq.n	800f522 <tuh_max3421_reg_read+0x5a>
 800f51e:	7a7b      	ldrb	r3, [r7, #9]
 800f520:	e000      	b.n	800f524 <tuh_max3421_reg_read+0x5c>
 800f522:	2300      	movs	r3, #0
}
 800f524:	4618      	mov	r0, r3
 800f526:	3710      	adds	r7, #16
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	24001db4 	.word	0x24001db4

0800f530 <tuh_max3421_reg_write>:

bool tuh_max3421_reg_write(uint8_t rhport, uint8_t reg, uint8_t data, bool in_isr) {
 800f530:	b590      	push	{r4, r7, lr}
 800f532:	b085      	sub	sp, #20
 800f534:	af00      	add	r7, sp, #0
 800f536:	4604      	mov	r4, r0
 800f538:	4608      	mov	r0, r1
 800f53a:	4611      	mov	r1, r2
 800f53c:	461a      	mov	r2, r3
 800f53e:	4623      	mov	r3, r4
 800f540:	71fb      	strb	r3, [r7, #7]
 800f542:	4603      	mov	r3, r0
 800f544:	71bb      	strb	r3, [r7, #6]
 800f546:	460b      	mov	r3, r1
 800f548:	717b      	strb	r3, [r7, #5]
 800f54a:	4613      	mov	r3, r2
 800f54c:	713b      	strb	r3, [r7, #4]
  uint8_t tx_buf[2] = {reg | CMDBYTE_WRITE, data};
 800f54e:	79bb      	ldrb	r3, [r7, #6]
 800f550:	f043 0302 	orr.w	r3, r3, #2
 800f554:	b2db      	uxtb	r3, r3
 800f556:	733b      	strb	r3, [r7, #12]
 800f558:	797b      	ldrb	r3, [r7, #5]
 800f55a:	737b      	strb	r3, [r7, #13]
  uint8_t rx_buf[2] = {0, 0};
 800f55c:	2300      	movs	r3, #0
 800f55e:	813b      	strh	r3, [r7, #8]

  max3421_spi_lock(rhport, in_isr);
 800f560:	793a      	ldrb	r2, [r7, #4]
 800f562:	79fb      	ldrb	r3, [r7, #7]
 800f564:	4611      	mov	r1, r2
 800f566:	4618      	mov	r0, r3
 800f568:	f7ff ff76 	bl	800f458 <max3421_spi_lock>
  bool ret = tuh_max3421_spi_xfer_api(rhport, tx_buf, rx_buf, 2);
 800f56c:	f107 0208 	add.w	r2, r7, #8
 800f570:	f107 010c 	add.w	r1, r7, #12
 800f574:	79f8      	ldrb	r0, [r7, #7]
 800f576:	2302      	movs	r3, #2
 800f578:	f7f1 fc10 	bl	8000d9c <tuh_max3421_spi_xfer_api>
 800f57c:	4603      	mov	r3, r0
 800f57e:	73fb      	strb	r3, [r7, #15]
  max3421_spi_unlock(rhport, in_isr);
 800f580:	793a      	ldrb	r2, [r7, #4]
 800f582:	79fb      	ldrb	r3, [r7, #7]
 800f584:	4611      	mov	r1, r2
 800f586:	4618      	mov	r0, r3
 800f588:	f7ff ff82 	bl	800f490 <max3421_spi_unlock>

  // HIRQ register since we are in full-duplex mode
  _hcd_data.hirq = rx_buf[0];
 800f58c:	7a3a      	ldrb	r2, [r7, #8]
 800f58e:	4b03      	ldr	r3, [pc, #12]	@ (800f59c <tuh_max3421_reg_write+0x6c>)
 800f590:	70da      	strb	r2, [r3, #3]

  return ret;
 800f592:	7bfb      	ldrb	r3, [r7, #15]
}
 800f594:	4618      	mov	r0, r3
 800f596:	3714      	adds	r7, #20
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd90      	pop	{r4, r7, pc}
 800f59c:	24001db4 	.word	0x24001db4

0800f5a0 <hwfifo_write>:
}

//--------------------------------------------------------------------
// FIFO access (receive, send, setup)
//--------------------------------------------------------------------
static void hwfifo_write(uint8_t rhport, uint8_t reg, const uint8_t* buffer, uint8_t len, bool in_isr) {
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	603a      	str	r2, [r7, #0]
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	71fb      	strb	r3, [r7, #7]
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	71bb      	strb	r3, [r7, #6]
 800f5b2:	4613      	mov	r3, r2
 800f5b4:	717b      	strb	r3, [r7, #5]
  uint8_t hirq;
  reg |= CMDBYTE_WRITE;
 800f5b6:	79bb      	ldrb	r3, [r7, #6]
 800f5b8:	f043 0302 	orr.w	r3, r3, #2
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	71bb      	strb	r3, [r7, #6]

  max3421_spi_lock(rhport, in_isr);
 800f5c0:	7e3a      	ldrb	r2, [r7, #24]
 800f5c2:	79fb      	ldrb	r3, [r7, #7]
 800f5c4:	4611      	mov	r1, r2
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7ff ff46 	bl	800f458 <max3421_spi_lock>

  tuh_max3421_spi_xfer_api(rhport, &reg, &hirq, 1);
 800f5cc:	f107 020f 	add.w	r2, r7, #15
 800f5d0:	1db9      	adds	r1, r7, #6
 800f5d2:	79f8      	ldrb	r0, [r7, #7]
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	f7f1 fbe1 	bl	8000d9c <tuh_max3421_spi_xfer_api>
  _hcd_data.hirq = hirq;
 800f5da:	7bfa      	ldrb	r2, [r7, #15]
 800f5dc:	4b08      	ldr	r3, [pc, #32]	@ (800f600 <hwfifo_write+0x60>)
 800f5de:	70da      	strb	r2, [r3, #3]
  tuh_max3421_spi_xfer_api(rhport, buffer, NULL, len);
 800f5e0:	797b      	ldrb	r3, [r7, #5]
 800f5e2:	79f8      	ldrb	r0, [r7, #7]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	6839      	ldr	r1, [r7, #0]
 800f5e8:	f7f1 fbd8 	bl	8000d9c <tuh_max3421_spi_xfer_api>

  max3421_spi_unlock(rhport, in_isr);
 800f5ec:	7e3a      	ldrb	r2, [r7, #24]
 800f5ee:	79fb      	ldrb	r3, [r7, #7]
 800f5f0:	4611      	mov	r1, r2
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7ff ff4c 	bl	800f490 <max3421_spi_unlock>
}
 800f5f8:	bf00      	nop
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	24001db4 	.word	0x24001db4

0800f604 <hwfifo_receive>:

TU_ATTR_ALWAYS_INLINE static inline void hwfifo_setup(uint8_t rhport, const uint8_t* buffer, bool in_isr) {
  hwfifo_write(rhport, SUDFIFO_ADDR, buffer, 8, in_isr);
}

static void hwfifo_receive(uint8_t rhport, uint8_t * buffer, uint16_t len, bool in_isr) {
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6039      	str	r1, [r7, #0]
 800f60c:	4611      	mov	r1, r2
 800f60e:	461a      	mov	r2, r3
 800f610:	4603      	mov	r3, r0
 800f612:	71fb      	strb	r3, [r7, #7]
 800f614:	460b      	mov	r3, r1
 800f616:	80bb      	strh	r3, [r7, #4]
 800f618:	4613      	mov	r3, r2
 800f61a:	71bb      	strb	r3, [r7, #6]
  uint8_t hirq;
  uint8_t const reg = RCVVFIFO_ADDR;
 800f61c:	2308      	movs	r3, #8
 800f61e:	73bb      	strb	r3, [r7, #14]

  max3421_spi_lock(rhport, in_isr);
 800f620:	79ba      	ldrb	r2, [r7, #6]
 800f622:	79fb      	ldrb	r3, [r7, #7]
 800f624:	4611      	mov	r1, r2
 800f626:	4618      	mov	r0, r3
 800f628:	f7ff ff16 	bl	800f458 <max3421_spi_lock>

  tuh_max3421_spi_xfer_api(rhport, &reg, &hirq, 1);
 800f62c:	f107 020f 	add.w	r2, r7, #15
 800f630:	f107 010e 	add.w	r1, r7, #14
 800f634:	79f8      	ldrb	r0, [r7, #7]
 800f636:	2301      	movs	r3, #1
 800f638:	f7f1 fbb0 	bl	8000d9c <tuh_max3421_spi_xfer_api>
  _hcd_data.hirq = hirq;
 800f63c:	7bfa      	ldrb	r2, [r7, #15]
 800f63e:	4b09      	ldr	r3, [pc, #36]	@ (800f664 <hwfifo_receive+0x60>)
 800f640:	70da      	strb	r2, [r3, #3]
  tuh_max3421_spi_xfer_api(rhport, NULL, buffer, len);
 800f642:	88bb      	ldrh	r3, [r7, #4]
 800f644:	79f8      	ldrb	r0, [r7, #7]
 800f646:	683a      	ldr	r2, [r7, #0]
 800f648:	2100      	movs	r1, #0
 800f64a:	f7f1 fba7 	bl	8000d9c <tuh_max3421_spi_xfer_api>

  max3421_spi_unlock(rhport, in_isr);
 800f64e:	79ba      	ldrb	r2, [r7, #6]
 800f650:	79fb      	ldrb	r3, [r7, #7]
 800f652:	4611      	mov	r1, r2
 800f654:	4618      	mov	r0, r3
 800f656:	f7ff ff1b 	bl	800f490 <max3421_spi_unlock>
}
 800f65a:	bf00      	nop
 800f65c:	3710      	adds	r7, #16
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	24001db4 	.word	0x24001db4

0800f668 <find_ep_not_addr0>:

//--------------------------------------------------------------------+
// Endpoint helper
//--------------------------------------------------------------------+

static max3421_ep_t* find_ep_not_addr0(uint8_t daddr, uint8_t ep_num, uint8_t ep_dir) {
 800f668:	b480      	push	{r7}
 800f66a:	b087      	sub	sp, #28
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	4603      	mov	r3, r0
 800f670:	71fb      	strb	r3, [r7, #7]
 800f672:	460b      	mov	r3, r1
 800f674:	71bb      	strb	r3, [r7, #6]
 800f676:	4613      	mov	r3, r2
 800f678:	717b      	strb	r3, [r7, #5]
  uint8_t const is_out = 1-ep_dir;
 800f67a:	797b      	ldrb	r3, [r7, #5]
 800f67c:	f1c3 0301 	rsb	r3, r3, #1
 800f680:	74fb      	strb	r3, [r7, #19]
  for(size_t i=1; i<CFG_TUH_MAX3421_ENDPOINT_TOTAL; i++) {
 800f682:	2301      	movs	r3, #1
 800f684:	617b      	str	r3, [r7, #20]
 800f686:	e028      	b.n	800f6da <find_ep_not_addr0+0x72>
    max3421_ep_t* ep = &_hcd_data.ep[i];
 800f688:	697a      	ldr	r2, [r7, #20]
 800f68a:	4613      	mov	r3, r2
 800f68c:	005b      	lsls	r3, r3, #1
 800f68e:	4413      	add	r3, r2
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	3308      	adds	r3, #8
 800f694:	4a16      	ldr	r2, [pc, #88]	@ (800f6f0 <find_ep_not_addr0+0x88>)
 800f696:	4413      	add	r3, r2
 800f698:	3304      	adds	r3, #4
 800f69a:	60fb      	str	r3, [r7, #12]
    // control endpoint is bi-direction (skip check)
    if (daddr == ep->daddr && ep_num == ep->hxfr_bm.ep_num && (ep_num == 0 || is_out == ep->hxfr_bm.is_out)) {
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	79fa      	ldrb	r2, [r7, #7]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d116      	bne.n	800f6d4 <find_ep_not_addr0+0x6c>
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	785b      	ldrb	r3, [r3, #1]
 800f6aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	79bb      	ldrb	r3, [r7, #6]
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d10d      	bne.n	800f6d4 <find_ep_not_addr0+0x6c>
 800f6b8:	79bb      	ldrb	r3, [r7, #6]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d008      	beq.n	800f6d0 <find_ep_not_addr0+0x68>
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	785b      	ldrb	r3, [r3, #1]
 800f6c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f6c6:	b2db      	uxtb	r3, r3
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	7cfb      	ldrb	r3, [r7, #19]
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	d101      	bne.n	800f6d4 <find_ep_not_addr0+0x6c>
      return ep;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	e006      	b.n	800f6e2 <find_ep_not_addr0+0x7a>
  for(size_t i=1; i<CFG_TUH_MAX3421_ENDPOINT_TOTAL; i++) {
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	617b      	str	r3, [r7, #20]
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	2b07      	cmp	r3, #7
 800f6de:	d9d3      	bls.n	800f688 <find_ep_not_addr0+0x20>
    }
  }

  return NULL;
 800f6e0:	2300      	movs	r3, #0
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	371c      	adds	r7, #28
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop
 800f6f0:	24001db4 	.word	0x24001db4

0800f6f4 <free_ep>:
    return find_ep_not_addr0(daddr, ep_num, ep_dir);
  }
}

// free all endpoints belong to device address
static void free_ep(uint8_t daddr) {
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b084      	sub	sp, #16
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	71fb      	strb	r3, [r7, #7]
  for (size_t i=1; i<CFG_TUH_MAX3421_ENDPOINT_TOTAL; i++) {
 800f6fe:	2301      	movs	r3, #1
 800f700:	60fb      	str	r3, [r7, #12]
 800f702:	e016      	b.n	800f732 <free_ep+0x3e>
    max3421_ep_t* ep = &_hcd_data.ep[i];
 800f704:	68fa      	ldr	r2, [r7, #12]
 800f706:	4613      	mov	r3, r2
 800f708:	005b      	lsls	r3, r3, #1
 800f70a:	4413      	add	r3, r2
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	3308      	adds	r3, #8
 800f710:	4a0c      	ldr	r2, [pc, #48]	@ (800f744 <free_ep+0x50>)
 800f712:	4413      	add	r3, r2
 800f714:	3304      	adds	r3, #4
 800f716:	60bb      	str	r3, [r7, #8]
    if (ep->daddr == daddr) {
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	79fa      	ldrb	r2, [r7, #7]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d104      	bne.n	800f72c <free_ep+0x38>
      tu_memclr(ep, sizeof(max3421_ep_t));
 800f722:	220c      	movs	r2, #12
 800f724:	2100      	movs	r1, #0
 800f726:	68b8      	ldr	r0, [r7, #8]
 800f728:	f001 fb6b 	bl	8010e02 <memset>
  for (size_t i=1; i<CFG_TUH_MAX3421_ENDPOINT_TOTAL; i++) {
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	3301      	adds	r3, #1
 800f730:	60fb      	str	r3, [r7, #12]
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2b07      	cmp	r3, #7
 800f736:	d9e5      	bls.n	800f704 <free_ep+0x10>
    }
  }
}
 800f738:	bf00      	nop
 800f73a:	bf00      	nop
 800f73c:	3710      	adds	r7, #16
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	24001db4 	.word	0x24001db4

0800f748 <find_next_pending_ep>:
}

// Find the next pending endpoint using round-robin scheduling, starting from next endpoint.
// return NULL if not found
// TODO respect interrupt endpoint's interval
static max3421_ep_t * find_next_pending_ep(max3421_ep_t * cur_ep) {
 800f748:	b480      	push	{r7}
 800f74a:	b08d      	sub	sp, #52	@ 0x34
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  size_t const idx = (size_t) (cur_ep - _hcd_data.ep);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	4a41      	ldr	r2, [pc, #260]	@ (800f858 <find_next_pending_ep+0x110>)
 800f754:	1a9b      	subs	r3, r3, r2
 800f756:	109b      	asrs	r3, r3, #2
 800f758:	4a40      	ldr	r2, [pc, #256]	@ (800f85c <find_next_pending_ep+0x114>)
 800f75a:	fb02 f303 	mul.w	r3, r2, r3
 800f75e:	627b      	str	r3, [r7, #36]	@ 0x24

  // starting from next endpoint
  for (size_t i = idx + 1; i < CFG_TUH_MAX3421_ENDPOINT_TOTAL; i++) {
 800f760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f762:	3301      	adds	r3, #1
 800f764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f766:	e032      	b.n	800f7ce <find_next_pending_ep+0x86>
    max3421_ep_t* ep = &_hcd_data.ep[i];
 800f768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f76a:	4613      	mov	r3, r2
 800f76c:	005b      	lsls	r3, r3, #1
 800f76e:	4413      	add	r3, r2
 800f770:	009b      	lsls	r3, r3, #2
 800f772:	3308      	adds	r3, #8
 800f774:	4a3a      	ldr	r2, [pc, #232]	@ (800f860 <find_next_pending_ep+0x118>)
 800f776:	4413      	add	r3, r2
 800f778:	3304      	adds	r3, #4
 800f77a:	61fb      	str	r3, [r7, #28]
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	61bb      	str	r3, [r7, #24]
  uint8_t const state = ep->state;
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	789b      	ldrb	r3, [r3, #2]
 800f784:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f788:	b2db      	uxtb	r3, r3
 800f78a:	75fb      	strb	r3, [r7, #23]
  return ep->packet_size && (state >= EP_STATE_ATTEMPT_1) &&
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	885b      	ldrh	r3, [r3, #2]
 800f790:	f023 031f 	bic.w	r3, r3, #31
 800f794:	b29b      	uxth	r3, r3
 800f796:	2b00      	cmp	r3, #0
 800f798:	d00e      	beq.n	800f7b8 <find_next_pending_ep+0x70>
 800f79a:	7dfb      	ldrb	r3, [r7, #23]
 800f79c:	2b02      	cmp	r3, #2
 800f79e:	d90b      	bls.n	800f7b8 <find_next_pending_ep+0x70>
         (_tuh_cfg.max_nak == 0 || state < EP_STATE_ATTEMPT_1 + _tuh_cfg.max_nak);
 800f7a0:	4b30      	ldr	r3, [pc, #192]	@ (800f864 <find_next_pending_ep+0x11c>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
  return ep->packet_size && (state >= EP_STATE_ATTEMPT_1) &&
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d005      	beq.n	800f7b4 <find_next_pending_ep+0x6c>
         (_tuh_cfg.max_nak == 0 || state < EP_STATE_ATTEMPT_1 + _tuh_cfg.max_nak);
 800f7a8:	4b2e      	ldr	r3, [pc, #184]	@ (800f864 <find_next_pending_ep+0x11c>)
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	1c9a      	adds	r2, r3, #2
 800f7ae:	7dfb      	ldrb	r3, [r7, #23]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	db01      	blt.n	800f7b8 <find_next_pending_ep+0x70>
  return ep->packet_size && (state >= EP_STATE_ATTEMPT_1) &&
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e000      	b.n	800f7ba <find_next_pending_ep+0x72>
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	f003 0301 	and.w	r3, r3, #1
 800f7be:	b2db      	uxtb	r3, r3
    if (is_ep_pending(ep)) {
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d001      	beq.n	800f7c8 <find_next_pending_ep+0x80>
      return ep;
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	e040      	b.n	800f84a <find_next_pending_ep+0x102>
  for (size_t i = idx + 1; i < CFG_TUH_MAX3421_ENDPOINT_TOTAL; i++) {
 800f7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7d0:	2b07      	cmp	r3, #7
 800f7d2:	d9c9      	bls.n	800f768 <find_next_pending_ep+0x20>
    }
  }

  // wrap around including current endpoint
  for (size_t i = 0; i <= idx; i++) {
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f7d8:	e032      	b.n	800f840 <find_next_pending_ep+0xf8>
    max3421_ep_t* ep = &_hcd_data.ep[i];
 800f7da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7dc:	4613      	mov	r3, r2
 800f7de:	005b      	lsls	r3, r3, #1
 800f7e0:	4413      	add	r3, r2
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	3308      	adds	r3, #8
 800f7e6:	4a1e      	ldr	r2, [pc, #120]	@ (800f860 <find_next_pending_ep+0x118>)
 800f7e8:	4413      	add	r3, r2
 800f7ea:	3304      	adds	r3, #4
 800f7ec:	623b      	str	r3, [r7, #32]
 800f7ee:	6a3b      	ldr	r3, [r7, #32]
 800f7f0:	613b      	str	r3, [r7, #16]
  uint8_t const state = ep->state;
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	789b      	ldrb	r3, [r3, #2]
 800f7f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	73fb      	strb	r3, [r7, #15]
  return ep->packet_size && (state >= EP_STATE_ATTEMPT_1) &&
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	885b      	ldrh	r3, [r3, #2]
 800f802:	f023 031f 	bic.w	r3, r3, #31
 800f806:	b29b      	uxth	r3, r3
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00e      	beq.n	800f82a <find_next_pending_ep+0xe2>
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
 800f80e:	2b02      	cmp	r3, #2
 800f810:	d90b      	bls.n	800f82a <find_next_pending_ep+0xe2>
         (_tuh_cfg.max_nak == 0 || state < EP_STATE_ATTEMPT_1 + _tuh_cfg.max_nak);
 800f812:	4b14      	ldr	r3, [pc, #80]	@ (800f864 <find_next_pending_ep+0x11c>)
 800f814:	781b      	ldrb	r3, [r3, #0]
  return ep->packet_size && (state >= EP_STATE_ATTEMPT_1) &&
 800f816:	2b00      	cmp	r3, #0
 800f818:	d005      	beq.n	800f826 <find_next_pending_ep+0xde>
         (_tuh_cfg.max_nak == 0 || state < EP_STATE_ATTEMPT_1 + _tuh_cfg.max_nak);
 800f81a:	4b12      	ldr	r3, [pc, #72]	@ (800f864 <find_next_pending_ep+0x11c>)
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	1c9a      	adds	r2, r3, #2
 800f820:	7bfb      	ldrb	r3, [r7, #15]
 800f822:	429a      	cmp	r2, r3
 800f824:	db01      	blt.n	800f82a <find_next_pending_ep+0xe2>
  return ep->packet_size && (state >= EP_STATE_ATTEMPT_1) &&
 800f826:	2301      	movs	r3, #1
 800f828:	e000      	b.n	800f82c <find_next_pending_ep+0xe4>
 800f82a:	2300      	movs	r3, #0
 800f82c:	f003 0301 	and.w	r3, r3, #1
 800f830:	b2db      	uxtb	r3, r3
    if (is_ep_pending(ep)) {
 800f832:	2b00      	cmp	r3, #0
 800f834:	d001      	beq.n	800f83a <find_next_pending_ep+0xf2>
      return ep;
 800f836:	6a3b      	ldr	r3, [r7, #32]
 800f838:	e007      	b.n	800f84a <find_next_pending_ep+0x102>
  for (size_t i = 0; i <= idx; i++) {
 800f83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f83c:	3301      	adds	r3, #1
 800f83e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f844:	429a      	cmp	r2, r3
 800f846:	d9c8      	bls.n	800f7da <find_next_pending_ep+0x92>
    }
  }

  return NULL;
 800f848:	2300      	movs	r3, #0
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3734      	adds	r7, #52	@ 0x34
 800f84e:	46bd      	mov	sp, r7
 800f850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f854:	4770      	bx	lr
 800f856:	bf00      	nop
 800f858:	24001dc0 	.word	0x24001dc0
 800f85c:	aaaaaaab 	.word	0xaaaaaaab
 800f860:	24001db4 	.word	0x24001db4
 800f864:	24000020 	.word	0x24000020

0800f868 <hcd_init>:
  _tuh_cfg.max_nak = tu_min8(_tuh_cfg.max_nak, EP_STATE_ATTEMPT_MAX-EP_STATE_ATTEMPT_1);
  return true;
}

// Initialize controller to host mode
bool hcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800f868:	b580      	push	{r7, lr}
 800f86a:	b088      	sub	sp, #32
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	4603      	mov	r3, r0
 800f870:	6039      	str	r1, [r7, #0]
 800f872:	71fb      	strb	r3, [r7, #7]
  (void) rh_init;

  tuh_max3421_int_api(rhport, false);
 800f874:	79fb      	ldrb	r3, [r7, #7]
 800f876:	2100      	movs	r1, #0
 800f878:	4618      	mov	r0, r3
 800f87a:	f7f1 f9cf 	bl	8000c1c <tuh_max3421_int_api>

  TU_LOG2_INT(sizeof(max3421_ep_t));
  TU_LOG2_INT(sizeof(max3421_data_t));
  TU_LOG2_INT(offsetof(max3421_data_t, ep));

  tu_memclr(&_hcd_data, sizeof(_hcd_data));
 800f87e:	226c      	movs	r2, #108	@ 0x6c
 800f880:	2100      	movs	r1, #0
 800f882:	484a      	ldr	r0, [pc, #296]	@ (800f9ac <hcd_init+0x144>)
 800f884:	f001 fabd 	bl	8010e02 <memset>
  _hcd_data.peraddr = 0xff; // invalid
 800f888:	4b48      	ldr	r3, [pc, #288]	@ (800f9ac <hcd_init+0x144>)
 800f88a:	22ff      	movs	r2, #255	@ 0xff
 800f88c:	719a      	strb	r2, [r3, #6]
#endif

  // NOTE: driver does not seem to work without nRST pin signal

  // full duplex, interrupt negative edge
  reg_write(rhport, PINCTL_ADDR, _tuh_cfg.pinctl | PINCTL_FDUPSPI, false);
 800f88e:	4b48      	ldr	r3, [pc, #288]	@ (800f9b0 <hcd_init+0x148>)
 800f890:	789b      	ldrb	r3, [r3, #2]
 800f892:	f043 0310 	orr.w	r3, r3, #16
 800f896:	b2da      	uxtb	r2, r3
 800f898:	79f8      	ldrb	r0, [r7, #7]
 800f89a:	2300      	movs	r3, #0
 800f89c:	2188      	movs	r1, #136	@ 0x88
 800f89e:	f7ff fe47 	bl	800f530 <tuh_max3421_reg_write>

  // v1 is 0x01, v2 is 0x12, v3 is 0x13
  // Note: v1 and v2 has host OUT errata whose workaround is not implemented in this driver
  uint8_t const revision = reg_read(rhport, REVISION_ADDR, false);
 800f8a2:	79fb      	ldrb	r3, [r7, #7]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	2190      	movs	r1, #144	@ 0x90
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7ff fe0d 	bl	800f4c8 <tuh_max3421_reg_read>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	77fb      	strb	r3, [r7, #31]
  TU_LOG2_HEX(revision);
  TU_ASSERT(revision == 0x01 || revision == 0x12 || revision == 0x13, false);
 800f8b2:	7ffb      	ldrb	r3, [r7, #31]
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d010      	beq.n	800f8da <hcd_init+0x72>
 800f8b8:	7ffb      	ldrb	r3, [r7, #31]
 800f8ba:	2b12      	cmp	r3, #18
 800f8bc:	d00d      	beq.n	800f8da <hcd_init+0x72>
 800f8be:	7ffb      	ldrb	r3, [r7, #31]
 800f8c0:	2b13      	cmp	r3, #19
 800f8c2:	d00a      	beq.n	800f8da <hcd_init+0x72>
 800f8c4:	4b3b      	ldr	r3, [pc, #236]	@ (800f9b4 <hcd_init+0x14c>)
 800f8c6:	61bb      	str	r3, [r7, #24]
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f003 0301 	and.w	r3, r3, #1
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d000      	beq.n	800f8d6 <hcd_init+0x6e>
 800f8d4:	be00      	bkpt	0x0000
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	e063      	b.n	800f9a2 <hcd_init+0x13a>

  // reset
  reg_write(rhport, USBCTL_ADDR, USBCTL_CHIPRES, false);
 800f8da:	79f8      	ldrb	r0, [r7, #7]
 800f8dc:	2300      	movs	r3, #0
 800f8de:	2220      	movs	r2, #32
 800f8e0:	2178      	movs	r1, #120	@ 0x78
 800f8e2:	f7ff fe25 	bl	800f530 <tuh_max3421_reg_write>
  reg_write(rhport, USBCTL_ADDR, 0, false);
 800f8e6:	79f8      	ldrb	r0, [r7, #7]
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	2178      	movs	r1, #120	@ 0x78
 800f8ee:	f7ff fe1f 	bl	800f530 <tuh_max3421_reg_write>
  while( !(reg_read(rhport, USBIRQ_ADDR, false) & USBIRQ_OSCOK_IRQ) ) {
 800f8f2:	bf00      	nop
 800f8f4:	79fb      	ldrb	r3, [r7, #7]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	2168      	movs	r1, #104	@ 0x68
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7ff fde4 	bl	800f4c8 <tuh_max3421_reg_read>
 800f900:	4603      	mov	r3, r0
 800f902:	f003 0301 	and.w	r3, r3, #1
 800f906:	2b00      	cmp	r3, #0
 800f908:	d0f4      	beq.n	800f8f4 <hcd_init+0x8c>
 800f90a:	79fb      	ldrb	r3, [r7, #7]
 800f90c:	747b      	strb	r3, [r7, #17]
 800f90e:	23c1      	movs	r3, #193	@ 0xc1
 800f910:	743b      	strb	r3, [r7, #16]
 800f912:	2300      	movs	r3, #0
 800f914:	73fb      	strb	r3, [r7, #15]
  _hcd_data.mode = data;
 800f916:	4a25      	ldr	r2, [pc, #148]	@ (800f9ac <hcd_init+0x144>)
 800f918:	7c3b      	ldrb	r3, [r7, #16]
 800f91a:	7153      	strb	r3, [r2, #5]
  reg_write(rhport, MODE_ADDR, data, in_isr);
 800f91c:	7bfb      	ldrb	r3, [r7, #15]
 800f91e:	7c3a      	ldrb	r2, [r7, #16]
 800f920:	7c78      	ldrb	r0, [r7, #17]
 800f922:	21d8      	movs	r1, #216	@ 0xd8
 800f924:	f7ff fe04 	bl	800f530 <tuh_max3421_reg_write>
}
 800f928:	bf00      	nop

  // Mode: Host and DP/DM pull down
  mode_write(rhport, MODE_DPPULLDN | MODE_DMPULLDN | MODE_HOST, false);

  // frame reset & bus reset, this will trigger CONDET IRQ if device is already connected
  reg_write(rhport, HCTL_ADDR, HCTL_BUSRST | HCTL_FRMRST, false);
 800f92a:	79f8      	ldrb	r0, [r7, #7]
 800f92c:	2300      	movs	r3, #0
 800f92e:	2203      	movs	r2, #3
 800f930:	21e8      	movs	r1, #232	@ 0xe8
 800f932:	f7ff fdfd 	bl	800f530 <tuh_max3421_reg_write>
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	753b      	strb	r3, [r7, #20]
 800f93a:	23ff      	movs	r3, #255	@ 0xff
 800f93c:	74fb      	strb	r3, [r7, #19]
 800f93e:	2300      	movs	r3, #0
 800f940:	74bb      	strb	r3, [r7, #18]
  reg_write(rhport, HIRQ_ADDR, data, in_isr);
 800f942:	7cbb      	ldrb	r3, [r7, #18]
 800f944:	7cfa      	ldrb	r2, [r7, #19]
 800f946:	7d38      	ldrb	r0, [r7, #20]
 800f948:	21c8      	movs	r1, #200	@ 0xc8
 800f94a:	f7ff fdf1 	bl	800f530 <tuh_max3421_reg_write>
  _hcd_data.hirq &= (uint8_t) ~data;
 800f94e:	4b17      	ldr	r3, [pc, #92]	@ (800f9ac <hcd_init+0x144>)
 800f950:	78da      	ldrb	r2, [r3, #3]
 800f952:	7cfb      	ldrb	r3, [r7, #19]
 800f954:	43db      	mvns	r3, r3
 800f956:	b2db      	uxtb	r3, r3
 800f958:	4013      	ands	r3, r2
 800f95a:	b2da      	uxtb	r2, r3
 800f95c:	4b13      	ldr	r3, [pc, #76]	@ (800f9ac <hcd_init+0x144>)
 800f95e:	70da      	strb	r2, [r3, #3]
}
 800f960:	bf00      	nop
 800f962:	79fb      	ldrb	r3, [r7, #7]
 800f964:	75fb      	strb	r3, [r7, #23]
 800f966:	23e4      	movs	r3, #228	@ 0xe4
 800f968:	75bb      	strb	r3, [r7, #22]
 800f96a:	2300      	movs	r3, #0
 800f96c:	757b      	strb	r3, [r7, #21]
  _hcd_data.hien = data;
 800f96e:	4a0f      	ldr	r2, [pc, #60]	@ (800f9ac <hcd_init+0x144>)
 800f970:	7dbb      	ldrb	r3, [r7, #22]
 800f972:	7113      	strb	r3, [r2, #4]
  reg_write(rhport, HIEN_ADDR, data, in_isr);
 800f974:	7d7b      	ldrb	r3, [r7, #21]
 800f976:	7dba      	ldrb	r2, [r7, #22]
 800f978:	7df8      	ldrb	r0, [r7, #23]
 800f97a:	21d0      	movs	r1, #208	@ 0xd0
 800f97c:	f7ff fdd8 	bl	800f530 <tuh_max3421_reg_write>
}
 800f980:	bf00      	nop
  hirq_write(rhport, 0xff, false);

  // Enable IRQ
  hien_write(rhport, DEFAULT_HIEN, false);

  tuh_max3421_int_api(rhport, true);
 800f982:	79fb      	ldrb	r3, [r7, #7]
 800f984:	2101      	movs	r1, #1
 800f986:	4618      	mov	r0, r3
 800f988:	f7f1 f948 	bl	8000c1c <tuh_max3421_int_api>

  // Enable Interrupt pin
  reg_write(rhport, CPUCTL_ADDR, _tuh_cfg.cpuctl | CPUCTL_IE, false);
 800f98c:	4b08      	ldr	r3, [pc, #32]	@ (800f9b0 <hcd_init+0x148>)
 800f98e:	785b      	ldrb	r3, [r3, #1]
 800f990:	f043 0301 	orr.w	r3, r3, #1
 800f994:	b2da      	uxtb	r2, r3
 800f996:	79f8      	ldrb	r0, [r7, #7]
 800f998:	2300      	movs	r3, #0
 800f99a:	2180      	movs	r1, #128	@ 0x80
 800f99c:	f7ff fdc8 	bl	800f530 <tuh_max3421_reg_write>

  return true;
 800f9a0:	2301      	movs	r3, #1
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3720      	adds	r7, #32
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	24001db4 	.word	0x24001db4
 800f9b0:	24000020 	.word	0x24000020
 800f9b4:	e000edf0 	.word	0xe000edf0

0800f9b8 <hcd_int_enable>:
  return true;
}

// Enable USB interrupt
// Not actually enable GPIO interrupt, just set variable to prevent handler to process
void hcd_int_enable (uint8_t rhport) {
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	4603      	mov	r3, r0
 800f9c0:	71fb      	strb	r3, [r7, #7]
  tuh_max3421_int_api(rhport, true);
 800f9c2:	79fb      	ldrb	r3, [r7, #7]
 800f9c4:	2101      	movs	r1, #1
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7f1 f928 	bl	8000c1c <tuh_max3421_int_api>
}
 800f9cc:	bf00      	nop
 800f9ce:	3708      	adds	r7, #8
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <hcd_int_disable>:

// Disable USB interrupt
// Not actually disable GPIO interrupt, just set variable to prevent handler to process
void hcd_int_disable(uint8_t rhport) {
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	4603      	mov	r3, r0
 800f9dc:	71fb      	strb	r3, [r7, #7]
  tuh_max3421_int_api(rhport, false);
 800f9de:	79fb      	ldrb	r3, [r7, #7]
 800f9e0:	2100      	movs	r1, #0
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7f1 f91a 	bl	8000c1c <tuh_max3421_int_api>
}
 800f9e8:	bf00      	nop
 800f9ea:	3708      	adds	r7, #8
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <hcd_port_connect_status>:
//--------------------------------------------------------------------+
// Port API
//--------------------------------------------------------------------+

// Get the current connect status of roothub port
bool hcd_port_connect_status(uint8_t rhport) {
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  return (_hcd_data.mode & MODE_SOFKAENAB) ? true : false;
 800f9fa:	4b08      	ldr	r3, [pc, #32]	@ (800fa1c <hcd_port_connect_status+0x2c>)
 800f9fc:	795b      	ldrb	r3, [r3, #5]
 800f9fe:	10db      	asrs	r3, r3, #3
 800fa00:	f003 0301 	and.w	r3, r3, #1
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	bf14      	ite	ne
 800fa08:	2301      	movne	r3, #1
 800fa0a:	2300      	moveq	r3, #0
 800fa0c:	b2db      	uxtb	r3, r3
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	370c      	adds	r7, #12
 800fa12:	46bd      	mov	sp, r7
 800fa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	24001db4 	.word	0x24001db4

0800fa20 <hcd_port_reset>:

// Reset USB bus on the port. Return immediately, bus reset sequence may not be complete.
// Some port would require hcd_port_reset_end() to be invoked after 10ms to complete the reset sequence.
void hcd_port_reset(uint8_t rhport) {
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	4603      	mov	r3, r0
 800fa28:	71fb      	strb	r3, [r7, #7]
  reg_write(rhport, HCTL_ADDR, HCTL_BUSRST, false);
 800fa2a:	79f8      	ldrb	r0, [r7, #7]
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	2201      	movs	r2, #1
 800fa30:	21e8      	movs	r1, #232	@ 0xe8
 800fa32:	f7ff fd7d 	bl	800f530 <tuh_max3421_reg_write>
}
 800fa36:	bf00      	nop
 800fa38:	3708      	adds	r7, #8
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <hcd_port_reset_end>:

// Complete bus reset sequence, may be required by some controllers
void hcd_port_reset_end(uint8_t rhport) {
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b082      	sub	sp, #8
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	4603      	mov	r3, r0
 800fa46:	71fb      	strb	r3, [r7, #7]
  reg_write(rhport, HCTL_ADDR, 0, false);
 800fa48:	79f8      	ldrb	r0, [r7, #7]
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	21e8      	movs	r1, #232	@ 0xe8
 800fa50:	f7ff fd6e 	bl	800f530 <tuh_max3421_reg_write>
}
 800fa54:	bf00      	nop
 800fa56:	3708      	adds	r7, #8
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <hcd_port_speed_get>:

// Get port link speed
tusb_speed_t hcd_port_speed_get(uint8_t rhport) {
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	4603      	mov	r3, r0
 800fa64:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  return (_hcd_data.mode & MODE_LOWSPEED) ? TUSB_SPEED_LOW : TUSB_SPEED_FULL;
 800fa66:	4b06      	ldr	r3, [pc, #24]	@ (800fa80 <hcd_port_speed_get+0x24>)
 800fa68:	795b      	ldrb	r3, [r3, #5]
 800fa6a:	105b      	asrs	r3, r3, #1
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	f003 0301 	and.w	r3, r3, #1
 800fa72:	b2db      	uxtb	r3, r3
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr
 800fa80:	24001db4 	.word	0x24001db4

0800fa84 <hcd_device_close>:

// HCD closes all opened endpoints belong to this device
void hcd_device_close(uint8_t rhport, uint8_t dev_addr) {
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	460a      	mov	r2, r1
 800fa8e:	71fb      	strb	r3, [r7, #7]
 800fa90:	4613      	mov	r3, r2
 800fa92:	71bb      	strb	r3, [r7, #6]
  (void) rhport;
  (void) dev_addr;
}
 800fa94:	bf00      	nop
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <hcd_edpt_open>:
//--------------------------------------------------------------------+
// Endpoints API
//--------------------------------------------------------------------+

// Open an endpoint
bool hcd_edpt_open(uint8_t rhport, uint8_t daddr, tusb_desc_endpoint_t const * ep_desc) {
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b088      	sub	sp, #32
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	4603      	mov	r3, r0
 800faa8:	603a      	str	r2, [r7, #0]
 800faaa:	71fb      	strb	r3, [r7, #7]
 800faac:	460b      	mov	r3, r1
 800faae:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  uint8_t const ep_num = tu_edpt_number(ep_desc->bEndpointAddress);
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	789b      	ldrb	r3, [r3, #2]
 800fab4:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800fab6:	7cbb      	ldrb	r3, [r7, #18]
 800fab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	76fb      	strb	r3, [r7, #27]
  tusb_dir_t const ep_dir = tu_edpt_dir(ep_desc->bEndpointAddress);
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	789b      	ldrb	r3, [r3, #2]
 800fac4:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800fac6:	7cfb      	ldrb	r3, [r7, #19]
 800fac8:	09db      	lsrs	r3, r3, #7
 800faca:	b2db      	uxtb	r3, r3
 800facc:	76bb      	strb	r3, [r7, #26]

  max3421_ep_t * ep;
  if (daddr == 0 && ep_num == 0) {
 800face:	79bb      	ldrb	r3, [r7, #6]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d105      	bne.n	800fae0 <hcd_edpt_open+0x40>
 800fad4:	7efb      	ldrb	r3, [r7, #27]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d102      	bne.n	800fae0 <hcd_edpt_open+0x40>
    ep = &_hcd_data.ep[0];
 800fada:	4b29      	ldr	r3, [pc, #164]	@ (800fb80 <hcd_edpt_open+0xe0>)
 800fadc:	61fb      	str	r3, [r7, #28]
 800fade:	e03a      	b.n	800fb56 <hcd_edpt_open+0xb6>
  return find_ep_not_addr0(0, 0, 0);
 800fae0:	2200      	movs	r2, #0
 800fae2:	2100      	movs	r1, #0
 800fae4:	2000      	movs	r0, #0
 800fae6:	f7ff fdbf 	bl	800f668 <find_ep_not_addr0>
 800faea:	4603      	mov	r3, r0
  }else {
    ep = allocate_ep();
 800faec:	61fb      	str	r3, [r7, #28]
    TU_ASSERT(ep);
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d10a      	bne.n	800fb0a <hcd_edpt_open+0x6a>
 800faf4:	4b23      	ldr	r3, [pc, #140]	@ (800fb84 <hcd_edpt_open+0xe4>)
 800faf6:	617b      	str	r3, [r7, #20]
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f003 0301 	and.w	r3, r3, #1
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d000      	beq.n	800fb06 <hcd_edpt_open+0x66>
 800fb04:	be00      	bkpt	0x0000
 800fb06:	2300      	movs	r3, #0
 800fb08:	e036      	b.n	800fb78 <hcd_edpt_open+0xd8>
    ep->daddr = daddr;
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	79ba      	ldrb	r2, [r7, #6]
 800fb0e:	701a      	strb	r2, [r3, #0]
    ep->hxfr_bm.ep_num = (uint8_t) (ep_num & 0x0f);
 800fb10:	7efb      	ldrb	r3, [r7, #27]
 800fb12:	f003 030f 	and.w	r3, r3, #15
 800fb16:	b2d9      	uxtb	r1, r3
 800fb18:	69fa      	ldr	r2, [r7, #28]
 800fb1a:	7853      	ldrb	r3, [r2, #1]
 800fb1c:	f361 0303 	bfi	r3, r1, #0, #4
 800fb20:	7053      	strb	r3, [r2, #1]
    ep->hxfr_bm.is_out = (ep_dir == TUSB_DIR_OUT) ? 1 : 0;
 800fb22:	7ebb      	ldrb	r3, [r7, #26]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	bf0c      	ite	eq
 800fb28:	2301      	moveq	r3, #1
 800fb2a:	2300      	movne	r3, #0
 800fb2c:	b2d9      	uxtb	r1, r3
 800fb2e:	69fa      	ldr	r2, [r7, #28]
 800fb30:	7853      	ldrb	r3, [r2, #1]
 800fb32:	f361 1345 	bfi	r3, r1, #5, #1
 800fb36:	7053      	strb	r3, [r2, #1]
    ep->hxfr_bm.is_iso = (TUSB_XFER_ISOCHRONOUS == ep_desc->bmAttributes.xfer) ? 1 : 0;
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	78db      	ldrb	r3, [r3, #3]
 800fb3c:	f003 0303 	and.w	r3, r3, #3
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	2b01      	cmp	r3, #1
 800fb44:	bf0c      	ite	eq
 800fb46:	2301      	moveq	r3, #1
 800fb48:	2300      	movne	r3, #0
 800fb4a:	b2d9      	uxtb	r1, r3
 800fb4c:	69fa      	ldr	r2, [r7, #28]
 800fb4e:	7853      	ldrb	r3, [r2, #1]
 800fb50:	f361 1386 	bfi	r3, r1, #6, #1
 800fb54:	7053      	strb	r3, [r2, #1]
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	889b      	ldrh	r3, [r3, #4]
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb64:	b29b      	uxth	r3, r3
  }

  ep->packet_size = (uint16_t) (tu_edpt_packet_size(ep_desc) & 0x7ff);
 800fb66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb6a:	b299      	uxth	r1, r3
 800fb6c:	69fa      	ldr	r2, [r7, #28]
 800fb6e:	8853      	ldrh	r3, [r2, #2]
 800fb70:	f361 134f 	bfi	r3, r1, #5, #11
 800fb74:	8053      	strh	r3, [r2, #2]

  return true;
 800fb76:	2301      	movs	r3, #1
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3720      	adds	r7, #32
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	24001dc0 	.word	0x24001dc0
 800fb84:	e000edf0 	.word	0xe000edf0

0800fb88 <xact_out>:
                                               | SNDFIFO-B |<---
                                               +-----------+
  Note: xact_out() is called when starting a new transfer, continue a transfer (isr) or retry a transfer (NAK)
        For NAK retry, we do not need to write to FIFO or SNDBC register again.
*/
static void xact_out(uint8_t rhport, max3421_ep_t *ep, bool switch_ep, bool in_isr) {
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b08c      	sub	sp, #48	@ 0x30
 800fb8c:	af02      	add	r7, sp, #8
 800fb8e:	6039      	str	r1, [r7, #0]
 800fb90:	4611      	mov	r1, r2
 800fb92:	461a      	mov	r2, r3
 800fb94:	4603      	mov	r3, r0
 800fb96:	71fb      	strb	r3, [r7, #7]
 800fb98:	460b      	mov	r3, r1
 800fb9a:	71bb      	strb	r3, [r7, #6]
 800fb9c:	4613      	mov	r3, r2
 800fb9e:	717b      	strb	r3, [r7, #5]
  // Page 12: Programming BULK-OUT Transfers
  // TODO: double buffering for ISO transfer
  if (switch_ep) {
 800fba0:	79bb      	ldrb	r3, [r7, #6]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d032      	beq.n	800fc0c <xact_out+0x84>
    peraddr_write(rhport, ep->daddr, in_isr);
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	781a      	ldrb	r2, [r3, #0]
 800fbaa:	79fb      	ldrb	r3, [r7, #7]
 800fbac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800fbb6:	797b      	ldrb	r3, [r7, #5]
 800fbb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if ( _hcd_data.peraddr == data ) return; // no need to change address
 800fbbc:	4b49      	ldr	r3, [pc, #292]	@ (800fce4 <xact_out+0x15c>)
 800fbbe:	799b      	ldrb	r3, [r3, #6]
 800fbc0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d00d      	beq.n	800fbe4 <xact_out+0x5c>
  _hcd_data.peraddr = data;
 800fbc8:	4a46      	ldr	r2, [pc, #280]	@ (800fce4 <xact_out+0x15c>)
 800fbca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fbce:	7193      	strb	r3, [r2, #6]
  reg_write(rhport, PERADDR_ADDR, data, in_isr);
 800fbd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fbd4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800fbd8:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 800fbdc:	21e0      	movs	r1, #224	@ 0xe0
 800fbde:	f7ff fca7 	bl	800f530 <tuh_max3421_reg_write>
 800fbe2:	e000      	b.n	800fbe6 <xact_out+0x5e>
  if ( _hcd_data.peraddr == data ) return; // no need to change address
 800fbe4:	bf00      	nop
    const uint8_t hctl = (ep->data_toggle ? HCTL_SNDTOG1 : HCTL_SNDTOG0);
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	789b      	ldrb	r3, [r3, #2]
 800fbea:	f003 0310 	and.w	r3, r3, #16
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d001      	beq.n	800fbf8 <xact_out+0x70>
 800fbf4:	2380      	movs	r3, #128	@ 0x80
 800fbf6:	e000      	b.n	800fbfa <xact_out+0x72>
 800fbf8:	2340      	movs	r3, #64	@ 0x40
 800fbfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    reg_write(rhport, HCTL_ADDR, hctl, in_isr);
 800fbfe:	797b      	ldrb	r3, [r7, #5]
 800fc00:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fc04:	79f8      	ldrb	r0, [r7, #7]
 800fc06:	21e8      	movs	r1, #232	@ 0xe8
 800fc08:	f7ff fc92 	bl	800f530 <tuh_max3421_reg_write>
  }

  // Only write to sndfifo and sdnbc register if it is not a NAKed retry
  if (!(ep->daddr == _hcd_data.sndfifo_owner.daddr && ep->hxfr == _hcd_data.sndfifo_owner.hxfr)) {
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	781a      	ldrb	r2, [r3, #0]
 800fc10:	4b34      	ldr	r3, [pc, #208]	@ (800fce4 <xact_out+0x15c>)
 800fc12:	7a1b      	ldrb	r3, [r3, #8]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d105      	bne.n	800fc24 <xact_out+0x9c>
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	785a      	ldrb	r2, [r3, #1]
 800fc1c:	4b31      	ldr	r3, [pc, #196]	@ (800fce4 <xact_out+0x15c>)
 800fc1e:	7a5b      	ldrb	r3, [r3, #9]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d041      	beq.n	800fca8 <xact_out+0x120>
    // skip SNDBAV IRQ check, overwrite sndfifo if needed
    const uint8_t xact_len = (uint8_t) tu_min16(ep->total_len - ep->xferred_len, ep->packet_size);
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	889a      	ldrh	r2, [r3, #4]
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	88db      	ldrh	r3, [r3, #6]
 800fc2c:	1ad3      	subs	r3, r2, r3
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	885b      	ldrh	r3, [r3, #2]
 800fc34:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	4613      	mov	r3, r2
 800fc3e:	82bb      	strh	r3, [r7, #20]
 800fc40:	460b      	mov	r3, r1
 800fc42:	827b      	strh	r3, [r7, #18]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800fc44:	8aba      	ldrh	r2, [r7, #20]
 800fc46:	8a7b      	ldrh	r3, [r7, #18]
 800fc48:	4293      	cmp	r3, r2
 800fc4a:	bf28      	it	cs
 800fc4c:	4613      	movcs	r3, r2
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    hwfifo_send(rhport, ep->buf, xact_len, in_isr);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	79fa      	ldrb	r2, [r7, #7]
 800fc5a:	f887 2022 	strb.w	r2, [r7, #34]	@ 0x22
 800fc5e:	61fb      	str	r3, [r7, #28]
 800fc60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fc64:	76fb      	strb	r3, [r7, #27]
 800fc66:	797b      	ldrb	r3, [r7, #5]
 800fc68:	76bb      	strb	r3, [r7, #26]
  if (len) {
 800fc6a:	7efb      	ldrb	r3, [r7, #27]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d009      	beq.n	800fc84 <xact_out+0xfc>
    hwfifo_write(rhport, SNDFIFO_ADDR, buffer, len, in_isr);
 800fc70:	7efa      	ldrb	r2, [r7, #27]
 800fc72:	f897 0022 	ldrb.w	r0, [r7, #34]	@ 0x22
 800fc76:	7ebb      	ldrb	r3, [r7, #26]
 800fc78:	9300      	str	r3, [sp, #0]
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	69fa      	ldr	r2, [r7, #28]
 800fc7e:	2110      	movs	r1, #16
 800fc80:	f7ff fc8e 	bl	800f5a0 <hwfifo_write>
 800fc84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800fc88:	767b      	strb	r3, [r7, #25]
 800fc8a:	7efb      	ldrb	r3, [r7, #27]
 800fc8c:	763b      	strb	r3, [r7, #24]
 800fc8e:	7ebb      	ldrb	r3, [r7, #26]
 800fc90:	75fb      	strb	r3, [r7, #23]
  _hcd_data.sndbc = data;
 800fc92:	4a14      	ldr	r2, [pc, #80]	@ (800fce4 <xact_out+0x15c>)
 800fc94:	7e3b      	ldrb	r3, [r7, #24]
 800fc96:	7093      	strb	r3, [r2, #2]
  reg_write(rhport, SNDBC_ADDR, data, in_isr);
 800fc98:	7dfb      	ldrb	r3, [r7, #23]
 800fc9a:	7e3a      	ldrb	r2, [r7, #24]
 800fc9c:	7e78      	ldrb	r0, [r7, #25]
 800fc9e:	2138      	movs	r1, #56	@ 0x38
 800fca0:	f7ff fc46 	bl	800f530 <tuh_max3421_reg_write>
}
 800fca4:	bf00      	nop
}
 800fca6:	bf00      	nop
  }
  _hcd_data.sndfifo_owner.daddr = ep->daddr;
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	781a      	ldrb	r2, [r3, #0]
 800fcac:	4b0d      	ldr	r3, [pc, #52]	@ (800fce4 <xact_out+0x15c>)
 800fcae:	721a      	strb	r2, [r3, #8]
  _hcd_data.sndfifo_owner.hxfr = ep->hxfr;
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	785a      	ldrb	r2, [r3, #1]
 800fcb4:	4b0b      	ldr	r3, [pc, #44]	@ (800fce4 <xact_out+0x15c>)
 800fcb6:	725a      	strb	r2, [r3, #9]

  hxfr_write(rhport, ep->hxfr, in_isr);
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	785a      	ldrb	r2, [r3, #1]
 800fcbc:	79fb      	ldrb	r3, [r7, #7]
 800fcbe:	747b      	strb	r3, [r7, #17]
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	743b      	strb	r3, [r7, #16]
 800fcc4:	797b      	ldrb	r3, [r7, #5]
 800fcc6:	73fb      	strb	r3, [r7, #15]
  _hcd_data.hxfr = data;
 800fcc8:	4a06      	ldr	r2, [pc, #24]	@ (800fce4 <xact_out+0x15c>)
 800fcca:	7c3b      	ldrb	r3, [r7, #16]
 800fccc:	71d3      	strb	r3, [r2, #7]
  reg_write(rhport, HXFR_ADDR, data, in_isr);
 800fcce:	7bfb      	ldrb	r3, [r7, #15]
 800fcd0:	7c3a      	ldrb	r2, [r7, #16]
 800fcd2:	7c78      	ldrb	r0, [r7, #17]
 800fcd4:	21f0      	movs	r1, #240	@ 0xf0
 800fcd6:	f7ff fc2b 	bl	800f530 <tuh_max3421_reg_write>
}
 800fcda:	bf00      	nop
}
 800fcdc:	bf00      	nop
 800fcde:	3728      	adds	r7, #40	@ 0x28
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	24001db4 	.word	0x24001db4

0800fce8 <xact_in>:

static void xact_in(uint8_t rhport, max3421_ep_t *ep, bool switch_ep, bool in_isr) {
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6039      	str	r1, [r7, #0]
 800fcf0:	4611      	mov	r1, r2
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	71fb      	strb	r3, [r7, #7]
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	71bb      	strb	r3, [r7, #6]
 800fcfc:	4613      	mov	r3, r2
 800fcfe:	717b      	strb	r3, [r7, #5]
  // Page 13: Programming BULK-IN Transfers
  if (switch_ep) {
 800fd00:	79bb      	ldrb	r3, [r7, #6]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d028      	beq.n	800fd58 <xact_in+0x70>
    peraddr_write(rhport, ep->daddr, in_isr);
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	781a      	ldrb	r2, [r3, #0]
 800fd0a:	79fb      	ldrb	r3, [r7, #7]
 800fd0c:	73bb      	strb	r3, [r7, #14]
 800fd0e:	4613      	mov	r3, r2
 800fd10:	737b      	strb	r3, [r7, #13]
 800fd12:	797b      	ldrb	r3, [r7, #5]
 800fd14:	733b      	strb	r3, [r7, #12]
  if ( _hcd_data.peraddr == data ) return; // no need to change address
 800fd16:	4b1b      	ldr	r3, [pc, #108]	@ (800fd84 <xact_in+0x9c>)
 800fd18:	799b      	ldrb	r3, [r3, #6]
 800fd1a:	7b7a      	ldrb	r2, [r7, #13]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d009      	beq.n	800fd34 <xact_in+0x4c>
  _hcd_data.peraddr = data;
 800fd20:	4a18      	ldr	r2, [pc, #96]	@ (800fd84 <xact_in+0x9c>)
 800fd22:	7b7b      	ldrb	r3, [r7, #13]
 800fd24:	7193      	strb	r3, [r2, #6]
  reg_write(rhport, PERADDR_ADDR, data, in_isr);
 800fd26:	7b3b      	ldrb	r3, [r7, #12]
 800fd28:	7b7a      	ldrb	r2, [r7, #13]
 800fd2a:	7bb8      	ldrb	r0, [r7, #14]
 800fd2c:	21e0      	movs	r1, #224	@ 0xe0
 800fd2e:	f7ff fbff 	bl	800f530 <tuh_max3421_reg_write>
 800fd32:	e000      	b.n	800fd36 <xact_in+0x4e>
  if ( _hcd_data.peraddr == data ) return; // no need to change address
 800fd34:	bf00      	nop

    uint8_t const hctl = (ep->data_toggle ? HCTL_RCVTOG1 : HCTL_RCVTOG0);
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	789b      	ldrb	r3, [r3, #2]
 800fd3a:	f003 0310 	and.w	r3, r3, #16
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d001      	beq.n	800fd48 <xact_in+0x60>
 800fd44:	2320      	movs	r3, #32
 800fd46:	e000      	b.n	800fd4a <xact_in+0x62>
 800fd48:	2310      	movs	r3, #16
 800fd4a:	73fb      	strb	r3, [r7, #15]
    reg_write(rhport, HCTL_ADDR, hctl, in_isr);
 800fd4c:	797b      	ldrb	r3, [r7, #5]
 800fd4e:	7bfa      	ldrb	r2, [r7, #15]
 800fd50:	79f8      	ldrb	r0, [r7, #7]
 800fd52:	21e8      	movs	r1, #232	@ 0xe8
 800fd54:	f7ff fbec 	bl	800f530 <tuh_max3421_reg_write>
  }

  hxfr_write(rhport, ep->hxfr, in_isr);
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	785a      	ldrb	r2, [r3, #1]
 800fd5c:	79fb      	ldrb	r3, [r7, #7]
 800fd5e:	72fb      	strb	r3, [r7, #11]
 800fd60:	4613      	mov	r3, r2
 800fd62:	72bb      	strb	r3, [r7, #10]
 800fd64:	797b      	ldrb	r3, [r7, #5]
 800fd66:	727b      	strb	r3, [r7, #9]
  _hcd_data.hxfr = data;
 800fd68:	4a06      	ldr	r2, [pc, #24]	@ (800fd84 <xact_in+0x9c>)
 800fd6a:	7abb      	ldrb	r3, [r7, #10]
 800fd6c:	71d3      	strb	r3, [r2, #7]
  reg_write(rhport, HXFR_ADDR, data, in_isr);
 800fd6e:	7a7b      	ldrb	r3, [r7, #9]
 800fd70:	7aba      	ldrb	r2, [r7, #10]
 800fd72:	7af8      	ldrb	r0, [r7, #11]
 800fd74:	21f0      	movs	r1, #240	@ 0xf0
 800fd76:	f7ff fbdb 	bl	800f530 <tuh_max3421_reg_write>
}
 800fd7a:	bf00      	nop
}
 800fd7c:	bf00      	nop
 800fd7e:	3710      	adds	r7, #16
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	24001db4 	.word	0x24001db4

0800fd88 <xact_setup>:

static void xact_setup(uint8_t rhport, max3421_ep_t *ep, bool in_isr) {
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b088      	sub	sp, #32
 800fd8c:	af02      	add	r7, sp, #8
 800fd8e:	4603      	mov	r3, r0
 800fd90:	6039      	str	r1, [r7, #0]
 800fd92:	71fb      	strb	r3, [r7, #7]
 800fd94:	4613      	mov	r3, r2
 800fd96:	71bb      	strb	r3, [r7, #6]
  peraddr_write(rhport, ep->daddr, in_isr);
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	781a      	ldrb	r2, [r3, #0]
 800fd9c:	79fb      	ldrb	r3, [r7, #7]
 800fd9e:	73bb      	strb	r3, [r7, #14]
 800fda0:	4613      	mov	r3, r2
 800fda2:	737b      	strb	r3, [r7, #13]
 800fda4:	79bb      	ldrb	r3, [r7, #6]
 800fda6:	733b      	strb	r3, [r7, #12]
  if ( _hcd_data.peraddr == data ) return; // no need to change address
 800fda8:	4b19      	ldr	r3, [pc, #100]	@ (800fe10 <xact_setup+0x88>)
 800fdaa:	799b      	ldrb	r3, [r3, #6]
 800fdac:	7b7a      	ldrb	r2, [r7, #13]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d009      	beq.n	800fdc6 <xact_setup+0x3e>
  _hcd_data.peraddr = data;
 800fdb2:	4a17      	ldr	r2, [pc, #92]	@ (800fe10 <xact_setup+0x88>)
 800fdb4:	7b7b      	ldrb	r3, [r7, #13]
 800fdb6:	7193      	strb	r3, [r2, #6]
  reg_write(rhport, PERADDR_ADDR, data, in_isr);
 800fdb8:	7b3b      	ldrb	r3, [r7, #12]
 800fdba:	7b7a      	ldrb	r2, [r7, #13]
 800fdbc:	7bb8      	ldrb	r0, [r7, #14]
 800fdbe:	21e0      	movs	r1, #224	@ 0xe0
 800fdc0:	f7ff fbb6 	bl	800f530 <tuh_max3421_reg_write>
 800fdc4:	e000      	b.n	800fdc8 <xact_setup+0x40>
  if ( _hcd_data.peraddr == data ) return; // no need to change address
 800fdc6:	bf00      	nop
  hwfifo_setup(rhport, ep->buf, in_isr);
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	689b      	ldr	r3, [r3, #8]
 800fdcc:	79fa      	ldrb	r2, [r7, #7]
 800fdce:	753a      	strb	r2, [r7, #20]
 800fdd0:	613b      	str	r3, [r7, #16]
 800fdd2:	79bb      	ldrb	r3, [r7, #6]
 800fdd4:	73fb      	strb	r3, [r7, #15]
  hwfifo_write(rhport, SUDFIFO_ADDR, buffer, 8, in_isr);
 800fdd6:	7d38      	ldrb	r0, [r7, #20]
 800fdd8:	7bfb      	ldrb	r3, [r7, #15]
 800fdda:	9300      	str	r3, [sp, #0]
 800fddc:	2308      	movs	r3, #8
 800fdde:	693a      	ldr	r2, [r7, #16]
 800fde0:	2120      	movs	r1, #32
 800fde2:	f7ff fbdd 	bl	800f5a0 <hwfifo_write>
}
 800fde6:	bf00      	nop
 800fde8:	79fb      	ldrb	r3, [r7, #7]
 800fdea:	75fb      	strb	r3, [r7, #23]
 800fdec:	2310      	movs	r3, #16
 800fdee:	75bb      	strb	r3, [r7, #22]
 800fdf0:	79bb      	ldrb	r3, [r7, #6]
 800fdf2:	757b      	strb	r3, [r7, #21]
  _hcd_data.hxfr = data;
 800fdf4:	4a06      	ldr	r2, [pc, #24]	@ (800fe10 <xact_setup+0x88>)
 800fdf6:	7dbb      	ldrb	r3, [r7, #22]
 800fdf8:	71d3      	strb	r3, [r2, #7]
  reg_write(rhport, HXFR_ADDR, data, in_isr);
 800fdfa:	7d7b      	ldrb	r3, [r7, #21]
 800fdfc:	7dba      	ldrb	r2, [r7, #22]
 800fdfe:	7df8      	ldrb	r0, [r7, #23]
 800fe00:	21f0      	movs	r1, #240	@ 0xf0
 800fe02:	f7ff fb95 	bl	800f530 <tuh_max3421_reg_write>
}
 800fe06:	bf00      	nop
  hxfr_write(rhport, HXFR_SETUP, in_isr);
}
 800fe08:	bf00      	nop
 800fe0a:	3718      	adds	r7, #24
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	24001db4 	.word	0x24001db4

0800fe14 <xact_generic>:

static void xact_generic(uint8_t rhport, max3421_ep_t *ep, bool switch_ep, bool in_isr) {
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6039      	str	r1, [r7, #0]
 800fe1c:	4611      	mov	r1, r2
 800fe1e:	461a      	mov	r2, r3
 800fe20:	4603      	mov	r3, r0
 800fe22:	71fb      	strb	r3, [r7, #7]
 800fe24:	460b      	mov	r3, r1
 800fe26:	71bb      	strb	r3, [r7, #6]
 800fe28:	4613      	mov	r3, r2
 800fe2a:	717b      	strb	r3, [r7, #5]
  if (ep->hxfr_bm.ep_num == 0 ) {
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	785b      	ldrb	r3, [r3, #1]
 800fe30:	f003 030f 	and.w	r3, r3, #15
 800fe34:	b2db      	uxtb	r3, r3
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d148      	bne.n	800fecc <xact_generic+0xb8>
    // setup
    if (ep->hxfr_bm.is_setup) {
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	785b      	ldrb	r3, [r3, #1]
 800fe3e:	f003 0310 	and.w	r3, r3, #16
 800fe42:	b2db      	uxtb	r3, r3
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d006      	beq.n	800fe56 <xact_generic+0x42>
      xact_setup(rhport, ep, in_isr);
 800fe48:	797a      	ldrb	r2, [r7, #5]
 800fe4a:	79fb      	ldrb	r3, [r7, #7]
 800fe4c:	6839      	ldr	r1, [r7, #0]
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7ff ff9a 	bl	800fd88 <xact_setup>
      return;
 800fe54:	e04e      	b.n	800fef4 <xact_generic+0xe0>
    }

    // status
    if (ep->buf == NULL || ep->total_len == 0) {
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d003      	beq.n	800fe66 <xact_generic+0x52>
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	889b      	ldrh	r3, [r3, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d132      	bne.n	800fecc <xact_generic+0xb8>
      const uint8_t hxfr = (uint8_t) (HXFR_HS | (ep->hxfr & HXFR_OUT_NIN));
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	785b      	ldrb	r3, [r3, #1]
 800fe6a:	b25b      	sxtb	r3, r3
 800fe6c:	f003 0320 	and.w	r3, r3, #32
 800fe70:	b25b      	sxtb	r3, r3
 800fe72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fe76:	b25b      	sxtb	r3, r3
 800fe78:	73fb      	strb	r3, [r7, #15]
      peraddr_write(rhport, ep->daddr, in_isr);
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	781a      	ldrb	r2, [r3, #0]
 800fe7e:	79fb      	ldrb	r3, [r7, #7]
 800fe80:	72fb      	strb	r3, [r7, #11]
 800fe82:	4613      	mov	r3, r2
 800fe84:	72bb      	strb	r3, [r7, #10]
 800fe86:	797b      	ldrb	r3, [r7, #5]
 800fe88:	727b      	strb	r3, [r7, #9]
  if ( _hcd_data.peraddr == data ) return; // no need to change address
 800fe8a:	4b1c      	ldr	r3, [pc, #112]	@ (800fefc <xact_generic+0xe8>)
 800fe8c:	799b      	ldrb	r3, [r3, #6]
 800fe8e:	7aba      	ldrb	r2, [r7, #10]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d009      	beq.n	800fea8 <xact_generic+0x94>
  _hcd_data.peraddr = data;
 800fe94:	4a19      	ldr	r2, [pc, #100]	@ (800fefc <xact_generic+0xe8>)
 800fe96:	7abb      	ldrb	r3, [r7, #10]
 800fe98:	7193      	strb	r3, [r2, #6]
  reg_write(rhport, PERADDR_ADDR, data, in_isr);
 800fe9a:	7a7b      	ldrb	r3, [r7, #9]
 800fe9c:	7aba      	ldrb	r2, [r7, #10]
 800fe9e:	7af8      	ldrb	r0, [r7, #11]
 800fea0:	21e0      	movs	r1, #224	@ 0xe0
 800fea2:	f7ff fb45 	bl	800f530 <tuh_max3421_reg_write>
 800fea6:	e000      	b.n	800feaa <xact_generic+0x96>
  if ( _hcd_data.peraddr == data ) return; // no need to change address
 800fea8:	bf00      	nop
 800feaa:	79fb      	ldrb	r3, [r7, #7]
 800feac:	73bb      	strb	r3, [r7, #14]
 800feae:	7bfb      	ldrb	r3, [r7, #15]
 800feb0:	737b      	strb	r3, [r7, #13]
 800feb2:	797b      	ldrb	r3, [r7, #5]
 800feb4:	733b      	strb	r3, [r7, #12]
  _hcd_data.hxfr = data;
 800feb6:	4a11      	ldr	r2, [pc, #68]	@ (800fefc <xact_generic+0xe8>)
 800feb8:	7b7b      	ldrb	r3, [r7, #13]
 800feba:	71d3      	strb	r3, [r2, #7]
  reg_write(rhport, HXFR_ADDR, data, in_isr);
 800febc:	7b3b      	ldrb	r3, [r7, #12]
 800febe:	7b7a      	ldrb	r2, [r7, #13]
 800fec0:	7bb8      	ldrb	r0, [r7, #14]
 800fec2:	21f0      	movs	r1, #240	@ 0xf0
 800fec4:	f7ff fb34 	bl	800f530 <tuh_max3421_reg_write>
}
 800fec8:	bf00      	nop
      hxfr_write(rhport, hxfr, in_isr);
      return;
 800feca:	e013      	b.n	800fef4 <xact_generic+0xe0>
    }
  }

  if (ep->hxfr_bm.is_out) {
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	785b      	ldrb	r3, [r3, #1]
 800fed0:	f003 0320 	and.w	r3, r3, #32
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d006      	beq.n	800fee8 <xact_generic+0xd4>
    xact_out(rhport, ep, switch_ep, in_isr);
 800feda:	797b      	ldrb	r3, [r7, #5]
 800fedc:	79ba      	ldrb	r2, [r7, #6]
 800fede:	79f8      	ldrb	r0, [r7, #7]
 800fee0:	6839      	ldr	r1, [r7, #0]
 800fee2:	f7ff fe51 	bl	800fb88 <xact_out>
 800fee6:	e005      	b.n	800fef4 <xact_generic+0xe0>
  }else {
    xact_in(rhport, ep, switch_ep, in_isr);
 800fee8:	797b      	ldrb	r3, [r7, #5]
 800feea:	79ba      	ldrb	r2, [r7, #6]
 800feec:	79f8      	ldrb	r0, [r7, #7]
 800feee:	6839      	ldr	r1, [r7, #0]
 800fef0:	f7ff fefa 	bl	800fce8 <xact_in>
  }
}
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop
 800fefc:	24001db4 	.word	0x24001db4

0800ff00 <hcd_edpt_xfer>:

// Submit a transfer, when complete hcd_event_xfer_complete() must be invoked
bool hcd_edpt_xfer(uint8_t rhport, uint8_t daddr, uint8_t ep_addr, uint8_t * buffer, uint16_t buflen) {
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b086      	sub	sp, #24
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	603b      	str	r3, [r7, #0]
 800ff08:	4603      	mov	r3, r0
 800ff0a:	71fb      	strb	r3, [r7, #7]
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	71bb      	strb	r3, [r7, #6]
 800ff10:	4613      	mov	r3, r2
 800ff12:	717b      	strb	r3, [r7, #5]
 800ff14:	797b      	ldrb	r3, [r7, #5]
 800ff16:	72fb      	strb	r3, [r7, #11]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800ff18:	7afb      	ldrb	r3, [r7, #11]
 800ff1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff1e:	b2db      	uxtb	r3, r3
  uint8_t const ep_num = tu_edpt_number(ep_addr);
 800ff20:	75fb      	strb	r3, [r7, #23]
 800ff22:	797b      	ldrb	r3, [r7, #5]
 800ff24:	733b      	strb	r3, [r7, #12]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800ff26:	7b3b      	ldrb	r3, [r7, #12]
 800ff28:	09db      	lsrs	r3, r3, #7
 800ff2a:	b2db      	uxtb	r3, r3
  uint8_t const ep_dir = (uint8_t) tu_edpt_dir(ep_addr);
 800ff2c:	75bb      	strb	r3, [r7, #22]
 800ff2e:	79bb      	ldrb	r3, [r7, #6]
 800ff30:	73fb      	strb	r3, [r7, #15]
 800ff32:	7dfb      	ldrb	r3, [r7, #23]
 800ff34:	73bb      	strb	r3, [r7, #14]
 800ff36:	7dbb      	ldrb	r3, [r7, #22]
 800ff38:	737b      	strb	r3, [r7, #13]
  if (daddr == 0 && ep_num == 0) {
 800ff3a:	7bfb      	ldrb	r3, [r7, #15]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d104      	bne.n	800ff4a <hcd_edpt_xfer+0x4a>
 800ff40:	7bbb      	ldrb	r3, [r7, #14]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d101      	bne.n	800ff4a <hcd_edpt_xfer+0x4a>
    return &_hcd_data.ep[0];
 800ff46:	4b2a      	ldr	r3, [pc, #168]	@ (800fff0 <hcd_edpt_xfer+0xf0>)
 800ff48:	e006      	b.n	800ff58 <hcd_edpt_xfer+0x58>
    return find_ep_not_addr0(daddr, ep_num, ep_dir);
 800ff4a:	7b7a      	ldrb	r2, [r7, #13]
 800ff4c:	7bb9      	ldrb	r1, [r7, #14]
 800ff4e:	7bfb      	ldrb	r3, [r7, #15]
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7ff fb89 	bl	800f668 <find_ep_not_addr0>
 800ff56:	4603      	mov	r3, r0
  max3421_ep_t* ep = find_opened_ep(daddr, ep_num, ep_dir);
 800ff58:	613b      	str	r3, [r7, #16]
  TU_VERIFY(ep);
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d101      	bne.n	800ff64 <hcd_edpt_xfer+0x64>
 800ff60:	2300      	movs	r3, #0
 800ff62:	e040      	b.n	800ffe6 <hcd_edpt_xfer+0xe6>

  if (ep_num == 0) {
 800ff64:	7dfb      	ldrb	r3, [r7, #23]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d114      	bne.n	800ff94 <hcd_edpt_xfer+0x94>
    // control transfer can switch direction
    ep->hxfr_bm.is_out = ep_dir ? 0 : 1;
 800ff6a:	7dbb      	ldrb	r3, [r7, #22]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	bf0c      	ite	eq
 800ff70:	2301      	moveq	r3, #1
 800ff72:	2300      	movne	r3, #0
 800ff74:	b2d9      	uxtb	r1, r3
 800ff76:	693a      	ldr	r2, [r7, #16]
 800ff78:	7853      	ldrb	r3, [r2, #1]
 800ff7a:	f361 1345 	bfi	r3, r1, #5, #1
 800ff7e:	7053      	strb	r3, [r2, #1]
    ep->hxfr_bm.is_setup = 0;
 800ff80:	693a      	ldr	r2, [r7, #16]
 800ff82:	7853      	ldrb	r3, [r2, #1]
 800ff84:	f023 0310 	bic.w	r3, r3, #16
 800ff88:	7053      	strb	r3, [r2, #1]
    ep->data_toggle = 1;
 800ff8a:	693a      	ldr	r2, [r7, #16]
 800ff8c:	7893      	ldrb	r3, [r2, #2]
 800ff8e:	f043 0310 	orr.w	r3, r3, #16
 800ff92:	7093      	strb	r3, [r2, #2]
  }

  ep->buf = buffer;
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	683a      	ldr	r2, [r7, #0]
 800ff98:	609a      	str	r2, [r3, #8]
  ep->total_len = buflen;
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	8c3a      	ldrh	r2, [r7, #32]
 800ff9e:	809a      	strh	r2, [r3, #4]
  ep->xferred_len = 0;
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	80da      	strh	r2, [r3, #6]
  ep->state = EP_STATE_ATTEMPT_1;
 800ffa6:	693a      	ldr	r2, [r7, #16]
 800ffa8:	7893      	ldrb	r3, [r2, #2]
 800ffaa:	2103      	movs	r1, #3
 800ffac:	f361 0303 	bfi	r3, r1, #0, #4
 800ffb0:	7093      	strb	r3, [r2, #2]

  // carry out transfer if not busy
  if (!atomic_flag_test_and_set(&_hcd_data.busy)) {
 800ffb2:	4b10      	ldr	r3, [pc, #64]	@ (800fff4 <hcd_edpt_xfer+0xf4>)
 800ffb4:	2201      	movs	r2, #1
 800ffb6:	4611      	mov	r1, r2
 800ffb8:	f3bf 8f5b 	dmb	ish
 800ffbc:	e8d3 2f4f 	ldrexb	r2, [r3]
 800ffc0:	e8c3 1f40 	strexb	r0, r1, [r3]
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	d1f9      	bne.n	800ffbc <hcd_edpt_xfer+0xbc>
 800ffc8:	f3bf 8f5b 	dmb	ish
 800ffcc:	b2d3      	uxtb	r3, r2
 800ffce:	f083 0301 	eor.w	r3, r3, #1
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d005      	beq.n	800ffe4 <hcd_edpt_xfer+0xe4>
    xact_generic(rhport, ep, true, false);
 800ffd8:	79f8      	ldrb	r0, [r7, #7]
 800ffda:	2300      	movs	r3, #0
 800ffdc:	2201      	movs	r2, #1
 800ffde:	6939      	ldr	r1, [r7, #16]
 800ffe0:	f7ff ff18 	bl	800fe14 <xact_generic>
  }

  return true;
 800ffe4:	2301      	movs	r3, #1
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3718      	adds	r7, #24
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	24001dc0 	.word	0x24001dc0
 800fff4:	24001dbe 	.word	0x24001dbe

0800fff8 <hcd_edpt_abort_xfer>:

bool hcd_edpt_abort_xfer(uint8_t rhport, uint8_t daddr, uint8_t ep_addr) {
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b086      	sub	sp, #24
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	4603      	mov	r3, r0
 8010000:	71fb      	strb	r3, [r7, #7]
 8010002:	460b      	mov	r3, r1
 8010004:	71bb      	strb	r3, [r7, #6]
 8010006:	4613      	mov	r3, r2
 8010008:	717b      	strb	r3, [r7, #5]
 801000a:	797b      	ldrb	r3, [r7, #5]
 801000c:	72fb      	strb	r3, [r7, #11]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801000e:	7afb      	ldrb	r3, [r7, #11]
 8010010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010014:	b2db      	uxtb	r3, r3
  uint8_t const ep_num = tu_edpt_number(ep_addr);
 8010016:	75fb      	strb	r3, [r7, #23]
 8010018:	797b      	ldrb	r3, [r7, #5]
 801001a:	733b      	strb	r3, [r7, #12]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801001c:	7b3b      	ldrb	r3, [r7, #12]
 801001e:	09db      	lsrs	r3, r3, #7
 8010020:	b2db      	uxtb	r3, r3
  uint8_t const ep_dir = (uint8_t) tu_edpt_dir(ep_addr);
 8010022:	75bb      	strb	r3, [r7, #22]
 8010024:	79bb      	ldrb	r3, [r7, #6]
 8010026:	73fb      	strb	r3, [r7, #15]
 8010028:	7dfb      	ldrb	r3, [r7, #23]
 801002a:	73bb      	strb	r3, [r7, #14]
 801002c:	7dbb      	ldrb	r3, [r7, #22]
 801002e:	737b      	strb	r3, [r7, #13]
  if (daddr == 0 && ep_num == 0) {
 8010030:	7bfb      	ldrb	r3, [r7, #15]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d104      	bne.n	8010040 <hcd_edpt_abort_xfer+0x48>
 8010036:	7bbb      	ldrb	r3, [r7, #14]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d101      	bne.n	8010040 <hcd_edpt_abort_xfer+0x48>
    return &_hcd_data.ep[0];
 801003c:	4b17      	ldr	r3, [pc, #92]	@ (801009c <hcd_edpt_abort_xfer+0xa4>)
 801003e:	e006      	b.n	801004e <hcd_edpt_abort_xfer+0x56>
    return find_ep_not_addr0(daddr, ep_num, ep_dir);
 8010040:	7b7a      	ldrb	r2, [r7, #13]
 8010042:	7bb9      	ldrb	r1, [r7, #14]
 8010044:	7bfb      	ldrb	r3, [r7, #15]
 8010046:	4618      	mov	r0, r3
 8010048:	f7ff fb0e 	bl	800f668 <find_ep_not_addr0>
 801004c:	4603      	mov	r3, r0
  max3421_ep_t* ep = find_opened_ep(daddr, ep_num, ep_dir);
 801004e:	613b      	str	r3, [r7, #16]
  TU_VERIFY(ep);
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d101      	bne.n	801005a <hcd_edpt_abort_xfer+0x62>
 8010056:	2300      	movs	r3, #0
 8010058:	e01c      	b.n	8010094 <hcd_edpt_abort_xfer+0x9c>

  if (EP_STATE_ATTEMPT_1 <= ep->state && ep->state < EP_STATE_ATTEMPT_MAX) {
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	789b      	ldrb	r3, [r3, #2]
 801005e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010062:	b2db      	uxtb	r3, r3
 8010064:	2b02      	cmp	r3, #2
 8010066:	d914      	bls.n	8010092 <hcd_edpt_abort_xfer+0x9a>
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	789b      	ldrb	r3, [r3, #2]
 801006c:	f003 030f 	and.w	r3, r3, #15
 8010070:	b2db      	uxtb	r3, r3
 8010072:	2b0f      	cmp	r3, #15
 8010074:	d00d      	beq.n	8010092 <hcd_edpt_abort_xfer+0x9a>
    hcd_int_disable(rhport);
 8010076:	79fb      	ldrb	r3, [r7, #7]
 8010078:	4618      	mov	r0, r3
 801007a:	f7ff fcab 	bl	800f9d4 <hcd_int_disable>
    ep->state = EP_STATE_ABORTING;
 801007e:	693a      	ldr	r2, [r7, #16]
 8010080:	7893      	ldrb	r3, [r2, #2]
 8010082:	2102      	movs	r1, #2
 8010084:	f361 0303 	bfi	r3, r1, #0, #4
 8010088:	7093      	strb	r3, [r2, #2]
    hcd_int_enable(rhport);
 801008a:	79fb      	ldrb	r3, [r7, #7]
 801008c:	4618      	mov	r0, r3
 801008e:	f7ff fc93 	bl	800f9b8 <hcd_int_enable>
  }

  return true;
 8010092:	2301      	movs	r3, #1
}
 8010094:	4618      	mov	r0, r3
 8010096:	3718      	adds	r7, #24
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	24001dc0 	.word	0x24001dc0

080100a0 <hcd_setup_send>:

// Submit a special transfer to send 8-byte Setup Packet, when complete hcd_event_xfer_complete() must be invoked
bool hcd_setup_send(uint8_t rhport, uint8_t daddr, uint8_t const setup_packet[8]) {
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b086      	sub	sp, #24
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	4603      	mov	r3, r0
 80100a8:	603a      	str	r2, [r7, #0]
 80100aa:	71fb      	strb	r3, [r7, #7]
 80100ac:	460b      	mov	r3, r1
 80100ae:	71bb      	strb	r3, [r7, #6]
 80100b0:	79bb      	ldrb	r3, [r7, #6]
 80100b2:	73fb      	strb	r3, [r7, #15]
 80100b4:	2300      	movs	r3, #0
 80100b6:	73bb      	strb	r3, [r7, #14]
 80100b8:	2300      	movs	r3, #0
 80100ba:	737b      	strb	r3, [r7, #13]
  if (daddr == 0 && ep_num == 0) {
 80100bc:	7bfb      	ldrb	r3, [r7, #15]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d104      	bne.n	80100cc <hcd_setup_send+0x2c>
 80100c2:	7bbb      	ldrb	r3, [r7, #14]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d101      	bne.n	80100cc <hcd_setup_send+0x2c>
    return &_hcd_data.ep[0];
 80100c8:	4b27      	ldr	r3, [pc, #156]	@ (8010168 <hcd_setup_send+0xc8>)
 80100ca:	e006      	b.n	80100da <hcd_setup_send+0x3a>
    return find_ep_not_addr0(daddr, ep_num, ep_dir);
 80100cc:	7b7a      	ldrb	r2, [r7, #13]
 80100ce:	7bb9      	ldrb	r1, [r7, #14]
 80100d0:	7bfb      	ldrb	r3, [r7, #15]
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7ff fac8 	bl	800f668 <find_ep_not_addr0>
 80100d8:	4603      	mov	r3, r0
  (void) rhport;

  max3421_ep_t* ep = find_opened_ep(daddr, 0, 0);
 80100da:	617b      	str	r3, [r7, #20]
  TU_ASSERT(ep);
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d10a      	bne.n	80100f8 <hcd_setup_send+0x58>
 80100e2:	4b22      	ldr	r3, [pc, #136]	@ (801016c <hcd_setup_send+0xcc>)
 80100e4:	613b      	str	r3, [r7, #16]
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f003 0301 	and.w	r3, r3, #1
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d000      	beq.n	80100f4 <hcd_setup_send+0x54>
 80100f2:	be00      	bkpt	0x0000
 80100f4:	2300      	movs	r3, #0
 80100f6:	e032      	b.n	801015e <hcd_setup_send+0xbe>

  ep->hxfr_bm.is_out = 1;
 80100f8:	697a      	ldr	r2, [r7, #20]
 80100fa:	7853      	ldrb	r3, [r2, #1]
 80100fc:	f043 0320 	orr.w	r3, r3, #32
 8010100:	7053      	strb	r3, [r2, #1]
  ep->hxfr_bm.is_setup = 1;
 8010102:	697a      	ldr	r2, [r7, #20]
 8010104:	7853      	ldrb	r3, [r2, #1]
 8010106:	f043 0310 	orr.w	r3, r3, #16
 801010a:	7053      	strb	r3, [r2, #1]
  ep->buf = (uint8_t*)(uintptr_t) setup_packet;
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	683a      	ldr	r2, [r7, #0]
 8010110:	609a      	str	r2, [r3, #8]
  ep->total_len = 8;
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	2208      	movs	r2, #8
 8010116:	809a      	strh	r2, [r3, #4]
  ep->xferred_len = 0;
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	2200      	movs	r2, #0
 801011c:	80da      	strh	r2, [r3, #6]
  ep->state = EP_STATE_ATTEMPT_1;
 801011e:	697a      	ldr	r2, [r7, #20]
 8010120:	7893      	ldrb	r3, [r2, #2]
 8010122:	2103      	movs	r1, #3
 8010124:	f361 0303 	bfi	r3, r1, #0, #4
 8010128:	7093      	strb	r3, [r2, #2]

  // carry out transfer if not busy
  if (!atomic_flag_test_and_set(&_hcd_data.busy)) {
 801012a:	4b11      	ldr	r3, [pc, #68]	@ (8010170 <hcd_setup_send+0xd0>)
 801012c:	2201      	movs	r2, #1
 801012e:	4611      	mov	r1, r2
 8010130:	f3bf 8f5b 	dmb	ish
 8010134:	e8d3 2f4f 	ldrexb	r2, [r3]
 8010138:	e8c3 1f40 	strexb	r0, r1, [r3]
 801013c:	2800      	cmp	r0, #0
 801013e:	d1f9      	bne.n	8010134 <hcd_setup_send+0x94>
 8010140:	f3bf 8f5b 	dmb	ish
 8010144:	b2d3      	uxtb	r3, r2
 8010146:	f083 0301 	eor.w	r3, r3, #1
 801014a:	b2db      	uxtb	r3, r3
 801014c:	2b00      	cmp	r3, #0
 801014e:	d005      	beq.n	801015c <hcd_setup_send+0xbc>
    xact_setup(rhport, ep, false);
 8010150:	79fb      	ldrb	r3, [r7, #7]
 8010152:	2200      	movs	r2, #0
 8010154:	6979      	ldr	r1, [r7, #20]
 8010156:	4618      	mov	r0, r3
 8010158:	f7ff fe16 	bl	800fd88 <xact_setup>
  }

  return true;
 801015c:	2301      	movs	r3, #1
}
 801015e:	4618      	mov	r0, r3
 8010160:	3718      	adds	r7, #24
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	24001dc0 	.word	0x24001dc0
 801016c:	e000edf0 	.word	0xe000edf0
 8010170:	24001dbe 	.word	0x24001dbe

08010174 <handle_connect_irq>:

//--------------------------------------------------------------------+
// Interrupt Handler
//--------------------------------------------------------------------+

static void handle_connect_irq(uint8_t rhport, bool in_isr) {
 8010174:	b580      	push	{r7, lr}
 8010176:	b08c      	sub	sp, #48	@ 0x30
 8010178:	af00      	add	r7, sp, #0
 801017a:	4603      	mov	r3, r0
 801017c:	460a      	mov	r2, r1
 801017e:	71fb      	strb	r3, [r7, #7]
 8010180:	4613      	mov	r3, r2
 8010182:	71bb      	strb	r3, [r7, #6]
  uint8_t const hrsl = reg_read(rhport, HRSL_ADDR, in_isr);
 8010184:	79ba      	ldrb	r2, [r7, #6]
 8010186:	79fb      	ldrb	r3, [r7, #7]
 8010188:	21f8      	movs	r1, #248	@ 0xf8
 801018a:	4618      	mov	r0, r3
 801018c:	f7ff f99c 	bl	800f4c8 <tuh_max3421_reg_read>
 8010190:	4603      	mov	r3, r0
 8010192:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t const jk = hrsl & (HRSL_JSTATUS | HRSL_KSTATUS);
 8010196:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801019a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801019e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

  uint8_t new_mode = MODE_DPPULLDN | MODE_DMPULLDN | MODE_HOST;
 80101a2:	23c1      	movs	r3, #193	@ 0xc1
 80101a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  TU_LOG2_HEX(jk);

  switch(jk) {
 80101a8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d001      	beq.n	80101b4 <handle_connect_irq+0x40>
 80101b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80101b2:	d13c      	bne.n	801022e <handle_connect_irq+0xba>
 80101b4:	79fb      	ldrb	r3, [r7, #7]
 80101b6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80101ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80101be:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80101c2:	79bb      	ldrb	r3, [r7, #6]
 80101c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  _hcd_data.mode = data;
 80101c8:	4a46      	ldr	r2, [pc, #280]	@ (80102e4 <handle_connect_irq+0x170>)
 80101ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80101ce:	7153      	strb	r3, [r2, #5]
  reg_write(rhport, MODE_ADDR, data, in_isr);
 80101d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101d4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80101d8:	f897 0029 	ldrb.w	r0, [r7, #41]	@ 0x29
 80101dc:	21d8      	movs	r1, #216	@ 0xd8
 80101de:	f7ff f9a7 	bl	800f530 <tuh_max3421_reg_write>
}
 80101e2:	bf00      	nop
    case 0x00:                          // SEO is disconnected
    case (HRSL_JSTATUS | HRSL_KSTATUS): // SE1 is illegal
      mode_write(rhport, new_mode, in_isr);

      // port reset anyway, this will help to stable bus signal for next connection
      reg_write(rhport, HCTL_ADDR, HCTL_BUSRST, in_isr);
 80101e4:	79bb      	ldrb	r3, [r7, #6]
 80101e6:	79f8      	ldrb	r0, [r7, #7]
 80101e8:	2201      	movs	r2, #1
 80101ea:	21e8      	movs	r1, #232	@ 0xe8
 80101ec:	f7ff f9a0 	bl	800f530 <tuh_max3421_reg_write>
 80101f0:	79fb      	ldrb	r3, [r7, #7]
 80101f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101f6:	79bb      	ldrb	r3, [r7, #6]
 80101f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

// Helper to send device removal event
TU_ATTR_ALWAYS_INLINE static inline
void hcd_event_device_remove(uint8_t rhport, bool in_isr) {
  hcd_event_t event;
  event.rhport              = rhport;
 80101fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010200:	753b      	strb	r3, [r7, #20]
  event.event_id            = HCD_EVENT_DEVICE_REMOVE;
 8010202:	2301      	movs	r3, #1
 8010204:	757b      	strb	r3, [r7, #21]
  event.connection.hub_addr = 0;
 8010206:	2300      	movs	r3, #0
 8010208:	763b      	strb	r3, [r7, #24]
  event.connection.hub_port = 0;
 801020a:	2300      	movs	r3, #0
 801020c:	767b      	strb	r3, [r7, #25]

  hcd_event_handler(&event, in_isr);
 801020e:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8010212:	f107 0314 	add.w	r3, r7, #20
 8010216:	4611      	mov	r1, r2
 8010218:	4618      	mov	r0, r3
 801021a:	f7fe fa7f 	bl	800e71c <hcd_event_handler>
}
 801021e:	bf00      	nop
      hcd_event_device_remove(rhport, in_isr);
      reg_write(rhport, HCTL_ADDR, 0, in_isr);
 8010220:	79bb      	ldrb	r3, [r7, #6]
 8010222:	79f8      	ldrb	r0, [r7, #7]
 8010224:	2200      	movs	r2, #0
 8010226:	21e8      	movs	r1, #232	@ 0xe8
 8010228:	f7ff f982 	bl	800f530 <tuh_max3421_reg_write>
      break;
 801022c:	e055      	b.n	80102da <handle_connect_irq+0x166>

    default: {
      // Bus Reset also cause CONDET IRQ, skip if we are already connected and doing bus reset
      if ((_hcd_data.hirq & HIRQ_BUSEVENT_IRQ) && (_hcd_data.mode & MODE_SOFKAENAB)) {
 801022e:	4b2d      	ldr	r3, [pc, #180]	@ (80102e4 <handle_connect_irq+0x170>)
 8010230:	78db      	ldrb	r3, [r3, #3]
 8010232:	f003 0301 	and.w	r3, r3, #1
 8010236:	2b00      	cmp	r3, #0
 8010238:	d005      	beq.n	8010246 <handle_connect_irq+0xd2>
 801023a:	4b2a      	ldr	r3, [pc, #168]	@ (80102e4 <handle_connect_irq+0x170>)
 801023c:	795b      	ldrb	r3, [r3, #5]
 801023e:	f003 0308 	and.w	r3, r3, #8
 8010242:	2b00      	cmp	r3, #0
 8010244:	d148      	bne.n	80102d8 <handle_connect_irq+0x164>
        break;
      }

      // Low speed if (LS = 1 and J-state) or (LS = 0 and K-State)
      // However, since we are always in full speed mode, we can just check J-state
      if (jk == HRSL_KSTATUS) {
 8010246:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801024a:	2b40      	cmp	r3, #64	@ 0x40
 801024c:	d105      	bne.n	801025a <handle_connect_irq+0xe6>
        new_mode |= MODE_LOWSPEED;
 801024e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010252:	f043 0302 	orr.w	r3, r3, #2
 8010256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        TU_LOG3("Low speed\r\n");
      }else {
        TU_LOG3("Full speed\r\n");
      }
      new_mode |= MODE_SOFKAENAB;
 801025a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801025e:	f043 0308 	orr.w	r3, r3, #8
 8010262:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010266:	79fb      	ldrb	r3, [r7, #7]
 8010268:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 801026c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010270:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010274:	79bb      	ldrb	r3, [r7, #6]
 8010276:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  _hcd_data.mode = data;
 801027a:	4a1a      	ldr	r2, [pc, #104]	@ (80102e4 <handle_connect_irq+0x170>)
 801027c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010280:	7153      	strb	r3, [r2, #5]
  reg_write(rhport, MODE_ADDR, data, in_isr);
 8010282:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010286:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 801028a:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 801028e:	21d8      	movs	r1, #216	@ 0xd8
 8010290:	f7ff f94e 	bl	800f530 <tuh_max3421_reg_write>
}
 8010294:	bf00      	nop
      mode_write(rhport, new_mode, in_isr);

      // FIXME multiple MAX3421 rootdevice address is not 1
      uint8_t const daddr = 1;
 8010296:	2301      	movs	r3, #1
 8010298:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
      free_ep(daddr);
 801029c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7ff fa27 	bl	800f6f4 <free_ep>
 80102a6:	79fb      	ldrb	r3, [r7, #7]
 80102a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80102ac:	79bb      	ldrb	r3, [r7, #6]
 80102ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  event.rhport              = rhport;
 80102b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80102b6:	723b      	strb	r3, [r7, #8]
  event.event_id            = HCD_EVENT_DEVICE_ATTACH;
 80102b8:	2300      	movs	r3, #0
 80102ba:	727b      	strb	r3, [r7, #9]
  event.connection.hub_addr = 0;
 80102bc:	2300      	movs	r3, #0
 80102be:	733b      	strb	r3, [r7, #12]
  event.connection.hub_port = 0;
 80102c0:	2300      	movs	r3, #0
 80102c2:	737b      	strb	r3, [r7, #13]
  hcd_event_handler(&event, in_isr);
 80102c4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80102c8:	f107 0308 	add.w	r3, r7, #8
 80102cc:	4611      	mov	r1, r2
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fe fa24 	bl	800e71c <hcd_event_handler>
}
 80102d4:	bf00      	nop

      hcd_event_device_attach(rhport, in_isr);
      break;
 80102d6:	e000      	b.n	80102da <handle_connect_irq+0x166>
        break;
 80102d8:	bf00      	nop
    }
  }
}
 80102da:	bf00      	nop
 80102dc:	3730      	adds	r7, #48	@ 0x30
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	24001db4 	.word	0x24001db4

080102e8 <xfer_complete_isr>:

static void xfer_complete_isr(uint8_t rhport, max3421_ep_t *ep, xfer_result_t result, uint8_t hrsl, bool in_isr) {
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b08a      	sub	sp, #40	@ 0x28
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6039      	str	r1, [r7, #0]
 80102f0:	4611      	mov	r1, r2
 80102f2:	461a      	mov	r2, r3
 80102f4:	4603      	mov	r3, r0
 80102f6:	71fb      	strb	r3, [r7, #7]
 80102f8:	460b      	mov	r3, r1
 80102fa:	71bb      	strb	r3, [r7, #6]
 80102fc:	4613      	mov	r3, r2
 80102fe:	717b      	strb	r3, [r7, #5]
  uint8_t const ep_dir = 1-ep->hxfr_bm.is_out;
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	785b      	ldrb	r3, [r3, #1]
 8010304:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010308:	b2db      	uxtb	r3, r3
 801030a:	f1c3 0301 	rsb	r3, r3, #1
 801030e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t const ep_addr = tu_edpt_addr(ep->hxfr_bm.ep_num, ep_dir);
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	785b      	ldrb	r3, [r3, #1]
 8010316:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801031a:	b2db      	uxtb	r3, r3
 801031c:	77fb      	strb	r3, [r7, #31]
 801031e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010322:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8010324:	7fbb      	ldrb	r3, [r7, #30]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d002      	beq.n	8010330 <xfer_complete_isr+0x48>
 801032a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 801032e:	e000      	b.n	8010332 <xfer_complete_isr+0x4a>
 8010330:	2300      	movs	r3, #0
 8010332:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8010336:	4313      	orrs	r3, r2
 8010338:	b25b      	sxtb	r3, r3
 801033a:	b2db      	uxtb	r3, r3
 801033c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  // save data toggle
  if (ep_dir) {
 8010340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010344:	2b00      	cmp	r3, #0
 8010346:	d00a      	beq.n	801035e <xfer_complete_isr+0x76>
    ep->data_toggle = (hrsl & HRSL_RCVTOGRD) ? 1u : 0u;
 8010348:	797b      	ldrb	r3, [r7, #5]
 801034a:	111b      	asrs	r3, r3, #4
 801034c:	f003 0301 	and.w	r3, r3, #1
 8010350:	b2d9      	uxtb	r1, r3
 8010352:	683a      	ldr	r2, [r7, #0]
 8010354:	7893      	ldrb	r3, [r2, #2]
 8010356:	f361 1304 	bfi	r3, r1, #4, #1
 801035a:	7093      	strb	r3, [r2, #2]
 801035c:	e009      	b.n	8010372 <xfer_complete_isr+0x8a>
  }else {
    ep->data_toggle = (hrsl & HRSL_SNDTOGRD) ? 1u : 0u;
 801035e:	797b      	ldrb	r3, [r7, #5]
 8010360:	115b      	asrs	r3, r3, #5
 8010362:	f003 0301 	and.w	r3, r3, #1
 8010366:	b2d9      	uxtb	r1, r3
 8010368:	683a      	ldr	r2, [r7, #0]
 801036a:	7893      	ldrb	r3, [r2, #2]
 801036c:	f361 1304 	bfi	r3, r1, #4, #1
 8010370:	7093      	strb	r3, [r2, #2]
  }

  ep->state = EP_STATE_IDLE;
 8010372:	683a      	ldr	r2, [r7, #0]
 8010374:	7893      	ldrb	r3, [r2, #2]
 8010376:	f023 030f 	bic.w	r3, r3, #15
 801037a:	7093      	strb	r3, [r2, #2]
  hcd_event_xfer_complete(ep->daddr, ep_addr, ep->xferred_len, result, in_isr);
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	7819      	ldrb	r1, [r3, #0]
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	88db      	ldrh	r3, [r3, #6]
 8010384:	461a      	mov	r2, r3
 8010386:	460b      	mov	r3, r1
 8010388:	777b      	strb	r3, [r7, #29]
 801038a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801038e:	773b      	strb	r3, [r7, #28]
 8010390:	61ba      	str	r2, [r7, #24]
 8010392:	79bb      	ldrb	r3, [r7, #6]
 8010394:	75fb      	strb	r3, [r7, #23]
 8010396:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801039a:	75bb      	strb	r3, [r7, #22]

// Helper to send USB transfer event
TU_ATTR_ALWAYS_INLINE static inline
void hcd_event_xfer_complete(uint8_t dev_addr, uint8_t ep_addr, uint32_t xferred_bytes, xfer_result_t result, bool in_isr) {
  hcd_event_t event = {
 801039c:	f107 0308 	add.w	r3, r7, #8
 80103a0:	2200      	movs	r2, #0
 80103a2:	601a      	str	r2, [r3, #0]
 80103a4:	605a      	str	r2, [r3, #4]
 80103a6:	609a      	str	r2, [r3, #8]
 80103a8:	2302      	movs	r3, #2
 80103aa:	727b      	strb	r3, [r7, #9]
 80103ac:	7f7b      	ldrb	r3, [r7, #29]
 80103ae:	72bb      	strb	r3, [r7, #10]
    .rhport   = 0, // TODO correct rhport
    .event_id = HCD_EVENT_XFER_COMPLETE,
    .dev_addr = dev_addr,
  };
  event.xfer_complete.ep_addr = ep_addr;
 80103b0:	7f3b      	ldrb	r3, [r7, #28]
 80103b2:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.result = result;
 80103b4:	7dfb      	ldrb	r3, [r7, #23]
 80103b6:	737b      	strb	r3, [r7, #13]
  event.xfer_complete.len = xferred_bytes;
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	613b      	str	r3, [r7, #16]

  hcd_event_handler(&event, in_isr);
 80103bc:	7dba      	ldrb	r2, [r7, #22]
 80103be:	f107 0308 	add.w	r3, r7, #8
 80103c2:	4611      	mov	r1, r2
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7fe f9a9 	bl	800e71c <hcd_event_handler>
}
 80103ca:	bf00      	nop

  // Find next pending endpoint
  max3421_ep_t * next_ep = find_next_pending_ep(ep);
 80103cc:	6838      	ldr	r0, [r7, #0]
 80103ce:	f7ff f9bb 	bl	800f748 <find_next_pending_ep>
 80103d2:	6238      	str	r0, [r7, #32]
  if (next_ep) {
 80103d4:	6a3b      	ldr	r3, [r7, #32]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d007      	beq.n	80103ea <xfer_complete_isr+0x102>
    xact_generic(rhport, next_ep, true, in_isr);
 80103da:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80103de:	79f8      	ldrb	r0, [r7, #7]
 80103e0:	2201      	movs	r2, #1
 80103e2:	6a39      	ldr	r1, [r7, #32]
 80103e4:	f7ff fd16 	bl	800fe14 <xact_generic>
  }else {
    // no more pending
    atomic_flag_clear(&_hcd_data.busy);
  }
}
 80103e8:	e006      	b.n	80103f8 <xfer_complete_isr+0x110>
    atomic_flag_clear(&_hcd_data.busy);
 80103ea:	4b05      	ldr	r3, [pc, #20]	@ (8010400 <xfer_complete_isr+0x118>)
 80103ec:	f3bf 8f5b 	dmb	ish
 80103f0:	2200      	movs	r2, #0
 80103f2:	701a      	strb	r2, [r3, #0]
 80103f4:	f3bf 8f5b 	dmb	ish
}
 80103f8:	bf00      	nop
 80103fa:	3728      	adds	r7, #40	@ 0x28
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	24001dbe 	.word	0x24001dbe

08010404 <handle_xfer_done>:

static void handle_xfer_done(uint8_t rhport, bool in_isr) {
 8010404:	b580      	push	{r7, lr}
 8010406:	b08c      	sub	sp, #48	@ 0x30
 8010408:	af02      	add	r7, sp, #8
 801040a:	4603      	mov	r3, r0
 801040c:	460a      	mov	r2, r1
 801040e:	71fb      	strb	r3, [r7, #7]
 8010410:	4613      	mov	r3, r2
 8010412:	71bb      	strb	r3, [r7, #6]
  const uint8_t hrsl = reg_read(rhport, HRSL_ADDR, in_isr);
 8010414:	79ba      	ldrb	r2, [r7, #6]
 8010416:	79fb      	ldrb	r3, [r7, #7]
 8010418:	21f8      	movs	r1, #248	@ 0xf8
 801041a:	4618      	mov	r0, r3
 801041c:	f7ff f854 	bl	800f4c8 <tuh_max3421_reg_read>
 8010420:	4603      	mov	r3, r0
 8010422:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  const uint8_t hresult = hrsl & HRSL_RESULT_MASK;
 8010426:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801042a:	f003 030f 	and.w	r3, r3, #15
 801042e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  const uint8_t ep_num = _hcd_data.hxfr_bm.ep_num;
 8010432:	4bae      	ldr	r3, [pc, #696]	@ (80106ec <handle_xfer_done+0x2e8>)
 8010434:	79db      	ldrb	r3, [r3, #7]
 8010436:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801043a:	b2db      	uxtb	r3, r3
 801043c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t hxfr_type = _hcd_data.hxfr & 0xf0;
 8010440:	4baa      	ldr	r3, [pc, #680]	@ (80106ec <handle_xfer_done+0x2e8>)
 8010442:	79db      	ldrb	r3, [r3, #7]
 8010444:	f023 030f 	bic.w	r3, r3, #15
 8010448:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  const uint8_t ep_dir = ((hxfr_type & HXFR_SETUP) || (hxfr_type & HXFR_OUT_NIN)) ? 0 : 1;
 801044c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010450:	f003 0310 	and.w	r3, r3, #16
 8010454:	2b00      	cmp	r3, #0
 8010456:	d107      	bne.n	8010468 <handle_xfer_done+0x64>
 8010458:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801045c:	f003 0320 	and.w	r3, r3, #32
 8010460:	2b00      	cmp	r3, #0
 8010462:	d101      	bne.n	8010468 <handle_xfer_done+0x64>
 8010464:	2301      	movs	r3, #1
 8010466:	e000      	b.n	801046a <handle_xfer_done+0x66>
 8010468:	2300      	movs	r3, #0
 801046a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  max3421_ep_t *ep = find_opened_ep(_hcd_data.peraddr, ep_num, ep_dir);
 801046e:	4b9f      	ldr	r3, [pc, #636]	@ (80106ec <handle_xfer_done+0x2e8>)
 8010470:	799b      	ldrb	r3, [r3, #6]
 8010472:	75fb      	strb	r3, [r7, #23]
 8010474:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010478:	75bb      	strb	r3, [r7, #22]
 801047a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801047e:	757b      	strb	r3, [r7, #21]
  if (daddr == 0 && ep_num == 0) {
 8010480:	7dfb      	ldrb	r3, [r7, #23]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d104      	bne.n	8010490 <handle_xfer_done+0x8c>
 8010486:	7dbb      	ldrb	r3, [r7, #22]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d101      	bne.n	8010490 <handle_xfer_done+0x8c>
    return &_hcd_data.ep[0];
 801048c:	4b98      	ldr	r3, [pc, #608]	@ (80106f0 <handle_xfer_done+0x2ec>)
 801048e:	e006      	b.n	801049e <handle_xfer_done+0x9a>
    return find_ep_not_addr0(daddr, ep_num, ep_dir);
 8010490:	7d7a      	ldrb	r2, [r7, #21]
 8010492:	7db9      	ldrb	r1, [r7, #22]
 8010494:	7dfb      	ldrb	r3, [r7, #23]
 8010496:	4618      	mov	r0, r3
 8010498:	f7ff f8e6 	bl	800f668 <find_ep_not_addr0>
 801049c:	4603      	mov	r3, r0
  max3421_ep_t *ep = find_opened_ep(_hcd_data.peraddr, ep_num, ep_dir);
 801049e:	61fb      	str	r3, [r7, #28]
  TU_VERIFY(ep, );
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f000 811f 	beq.w	80106e6 <handle_xfer_done+0x2e2>

  xfer_result_t xfer_result;
  switch(hresult) {
 80104a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80104ac:	2b05      	cmp	r3, #5
 80104ae:	f200 8084 	bhi.w	80105ba <handle_xfer_done+0x1b6>
 80104b2:	a201      	add	r2, pc, #4	@ (adr r2, 80104b8 <handle_xfer_done+0xb4>)
 80104b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104b8:	080105ab 	.word	0x080105ab
 80104bc:	080105bb 	.word	0x080105bb
 80104c0:	080106e5 	.word	0x080106e5
 80104c4:	080105bb 	.word	0x080105bb
 80104c8:	080104d1 	.word	0x080104d1
 80104cc:	080105b3 	.word	0x080105b3
    case HRSL_NAK:
      if (ep->state == EP_STATE_ABORTING) {
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	789b      	ldrb	r3, [r3, #2]
 80104d4:	f003 030f 	and.w	r3, r3, #15
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	2b02      	cmp	r3, #2
 80104dc:	d105      	bne.n	80104ea <handle_xfer_done+0xe6>
        ep->state = EP_STATE_IDLE;
 80104de:	69fa      	ldr	r2, [r7, #28]
 80104e0:	7893      	ldrb	r3, [r2, #2]
 80104e2:	f023 030f 	bic.w	r3, r3, #15
 80104e6:	7093      	strb	r3, [r2, #2]
 80104e8:	e032      	b.n	8010550 <handle_xfer_done+0x14c>
      } else {
        if (ep_num == 0) {
 80104ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d112      	bne.n	8010518 <handle_xfer_done+0x114>
          // control endpoint -> retry immediately and return
          hxfr_write(rhport, _hcd_data.hxfr, in_isr);
 80104f2:	4b7e      	ldr	r3, [pc, #504]	@ (80106ec <handle_xfer_done+0x2e8>)
 80104f4:	79da      	ldrb	r2, [r3, #7]
 80104f6:	79fb      	ldrb	r3, [r7, #7]
 80104f8:	753b      	strb	r3, [r7, #20]
 80104fa:	4613      	mov	r3, r2
 80104fc:	74fb      	strb	r3, [r7, #19]
 80104fe:	79bb      	ldrb	r3, [r7, #6]
 8010500:	74bb      	strb	r3, [r7, #18]
  _hcd_data.hxfr = data;
 8010502:	4a7a      	ldr	r2, [pc, #488]	@ (80106ec <handle_xfer_done+0x2e8>)
 8010504:	7cfb      	ldrb	r3, [r7, #19]
 8010506:	71d3      	strb	r3, [r2, #7]
  reg_write(rhport, HXFR_ADDR, data, in_isr);
 8010508:	7cbb      	ldrb	r3, [r7, #18]
 801050a:	7cfa      	ldrb	r2, [r7, #19]
 801050c:	7d38      	ldrb	r0, [r7, #20]
 801050e:	21f0      	movs	r1, #240	@ 0xf0
 8010510:	f7ff f80e 	bl	800f530 <tuh_max3421_reg_write>
}
 8010514:	bf00      	nop
          return;
 8010516:	e0e6      	b.n	80106e6 <handle_xfer_done+0x2e2>
        }
        if (EP_STATE_ATTEMPT_1 <= ep->state && ep->state < EP_STATE_ATTEMPT_MAX) {
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	789b      	ldrb	r3, [r3, #2]
 801051c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010520:	b2db      	uxtb	r3, r3
 8010522:	2b02      	cmp	r3, #2
 8010524:	d914      	bls.n	8010550 <handle_xfer_done+0x14c>
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	789b      	ldrb	r3, [r3, #2]
 801052a:	f003 030f 	and.w	r3, r3, #15
 801052e:	b2db      	uxtb	r3, r3
 8010530:	2b0f      	cmp	r3, #15
 8010532:	d00d      	beq.n	8010550 <handle_xfer_done+0x14c>
          ep->state++;
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	789b      	ldrb	r3, [r3, #2]
 8010538:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801053c:	b2db      	uxtb	r3, r3
 801053e:	3301      	adds	r3, #1
 8010540:	f003 030f 	and.w	r3, r3, #15
 8010544:	b2d9      	uxtb	r1, r3
 8010546:	69fa      	ldr	r2, [r7, #28]
 8010548:	7893      	ldrb	r3, [r2, #2]
 801054a:	f361 0303 	bfi	r3, r1, #0, #4
 801054e:	7093      	strb	r3, [r2, #2]
        }
      }

      max3421_ep_t * next_ep = find_next_pending_ep(ep);
 8010550:	69f8      	ldr	r0, [r7, #28]
 8010552:	f7ff f8f9 	bl	800f748 <find_next_pending_ep>
 8010556:	61b8      	str	r0, [r7, #24]
      if (ep == next_ep) {
 8010558:	69fa      	ldr	r2, [r7, #28]
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	429a      	cmp	r2, r3
 801055e:	d112      	bne.n	8010586 <handle_xfer_done+0x182>
        // this endpoint is only one pending -> retry immediately
        hxfr_write(rhport, _hcd_data.hxfr, in_isr);
 8010560:	4b62      	ldr	r3, [pc, #392]	@ (80106ec <handle_xfer_done+0x2e8>)
 8010562:	79da      	ldrb	r2, [r3, #7]
 8010564:	79fb      	ldrb	r3, [r7, #7]
 8010566:	747b      	strb	r3, [r7, #17]
 8010568:	4613      	mov	r3, r2
 801056a:	743b      	strb	r3, [r7, #16]
 801056c:	79bb      	ldrb	r3, [r7, #6]
 801056e:	73fb      	strb	r3, [r7, #15]
  _hcd_data.hxfr = data;
 8010570:	4a5e      	ldr	r2, [pc, #376]	@ (80106ec <handle_xfer_done+0x2e8>)
 8010572:	7c3b      	ldrb	r3, [r7, #16]
 8010574:	71d3      	strb	r3, [r2, #7]
  reg_write(rhport, HXFR_ADDR, data, in_isr);
 8010576:	7bfb      	ldrb	r3, [r7, #15]
 8010578:	7c3a      	ldrb	r2, [r7, #16]
 801057a:	7c78      	ldrb	r0, [r7, #17]
 801057c:	21f0      	movs	r1, #240	@ 0xf0
 801057e:	f7fe ffd7 	bl	800f530 <tuh_max3421_reg_write>
}
 8010582:	bf00      	nop
        xact_generic(rhport, next_ep, true, in_isr);
      } else {
        // no more pending in this frame -> clear busy
        atomic_flag_clear(&_hcd_data.busy);
      }
      return;
 8010584:	e0af      	b.n	80106e6 <handle_xfer_done+0x2e2>
      } else if (next_ep) {
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d006      	beq.n	801059a <handle_xfer_done+0x196>
        xact_generic(rhport, next_ep, true, in_isr);
 801058c:	79bb      	ldrb	r3, [r7, #6]
 801058e:	79f8      	ldrb	r0, [r7, #7]
 8010590:	2201      	movs	r2, #1
 8010592:	69b9      	ldr	r1, [r7, #24]
 8010594:	f7ff fc3e 	bl	800fe14 <xact_generic>
      return;
 8010598:	e0a5      	b.n	80106e6 <handle_xfer_done+0x2e2>
        atomic_flag_clear(&_hcd_data.busy);
 801059a:	4b56      	ldr	r3, [pc, #344]	@ (80106f4 <handle_xfer_done+0x2f0>)
 801059c:	f3bf 8f5b 	dmb	ish
 80105a0:	2200      	movs	r2, #0
 80105a2:	701a      	strb	r2, [r3, #0]
 80105a4:	f3bf 8f5b 	dmb	ish
      return;
 80105a8:	e09d      	b.n	80106e6 <handle_xfer_done+0x2e2>
    case HRSL_BAD_REQ:
      // occurred when initialized without any pending transfer. Skip for now
      return;

    case HRSL_SUCCESS:
      xfer_result = XFER_RESULT_SUCCESS;
 80105aa:	2300      	movs	r3, #0
 80105ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80105b0:	e007      	b.n	80105c2 <handle_xfer_done+0x1be>

    case HRSL_STALL:
      xfer_result = XFER_RESULT_STALLED;
 80105b2:	2302      	movs	r3, #2
 80105b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80105b8:	e003      	b.n	80105c2 <handle_xfer_done+0x1be>

    default:
      TU_LOG3("HRSL: %02X\r\n", hrsl);
      xfer_result = XFER_RESULT_FAILED;
 80105ba:	2301      	movs	r3, #1
 80105bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80105c0:	bf00      	nop
  }

  if (xfer_result != XFER_RESULT_SUCCESS) {
 80105c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d00b      	beq.n	80105e2 <handle_xfer_done+0x1de>
    xfer_complete_isr(rhport, ep, xfer_result, hrsl, in_isr);
 80105ca:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80105ce:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80105d2:	79f8      	ldrb	r0, [r7, #7]
 80105d4:	79bb      	ldrb	r3, [r7, #6]
 80105d6:	9300      	str	r3, [sp, #0]
 80105d8:	460b      	mov	r3, r1
 80105da:	69f9      	ldr	r1, [r7, #28]
 80105dc:	f7ff fe84 	bl	80102e8 <xfer_complete_isr>
    return;
 80105e0:	e081      	b.n	80106e6 <handle_xfer_done+0x2e2>
  }

  if (ep_dir) {
 80105e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d02e      	beq.n	8010648 <handle_xfer_done+0x244>
    // IN transfer: fifo data is already received in RCVDAV IRQ

    // mark control handshake as complete
    if (hxfr_type & HXFR_HS) {
 80105ea:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	da05      	bge.n	80105fe <handle_xfer_done+0x1fa>
      ep->state = EP_STATE_COMPLETE;
 80105f2:	69fa      	ldr	r2, [r7, #28]
 80105f4:	7893      	ldrb	r3, [r2, #2]
 80105f6:	2101      	movs	r1, #1
 80105f8:	f361 0303 	bfi	r3, r1, #0, #4
 80105fc:	7093      	strb	r3, [r2, #2]
    }

    // short packet or all bytes transferred
    if (ep->state == EP_STATE_COMPLETE) {
 80105fe:	69fb      	ldr	r3, [r7, #28]
 8010600:	789b      	ldrb	r3, [r3, #2]
 8010602:	f003 030f 	and.w	r3, r3, #15
 8010606:	b2db      	uxtb	r3, r3
 8010608:	2b01      	cmp	r3, #1
 801060a:	d10b      	bne.n	8010624 <handle_xfer_done+0x220>
      xfer_complete_isr(rhport, ep, xfer_result, hrsl, in_isr);
 801060c:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8010610:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010614:	79f8      	ldrb	r0, [r7, #7]
 8010616:	79bb      	ldrb	r3, [r7, #6]
 8010618:	9300      	str	r3, [sp, #0]
 801061a:	460b      	mov	r3, r1
 801061c:	69f9      	ldr	r1, [r7, #28]
 801061e:	f7ff fe63 	bl	80102e8 <xfer_complete_isr>
 8010622:	e060      	b.n	80106e6 <handle_xfer_done+0x2e2>
    }else {
      hxfr_write(rhport, _hcd_data.hxfr, in_isr); // more to transfer
 8010624:	4b31      	ldr	r3, [pc, #196]	@ (80106ec <handle_xfer_done+0x2e8>)
 8010626:	79da      	ldrb	r2, [r3, #7]
 8010628:	79fb      	ldrb	r3, [r7, #7]
 801062a:	73bb      	strb	r3, [r7, #14]
 801062c:	4613      	mov	r3, r2
 801062e:	737b      	strb	r3, [r7, #13]
 8010630:	79bb      	ldrb	r3, [r7, #6]
 8010632:	733b      	strb	r3, [r7, #12]
  _hcd_data.hxfr = data;
 8010634:	4a2d      	ldr	r2, [pc, #180]	@ (80106ec <handle_xfer_done+0x2e8>)
 8010636:	7b7b      	ldrb	r3, [r7, #13]
 8010638:	71d3      	strb	r3, [r2, #7]
  reg_write(rhport, HXFR_ADDR, data, in_isr);
 801063a:	7b3b      	ldrb	r3, [r7, #12]
 801063c:	7b7a      	ldrb	r2, [r7, #13]
 801063e:	7bb8      	ldrb	r0, [r7, #14]
 8010640:	21f0      	movs	r1, #240	@ 0xf0
 8010642:	f7fe ff75 	bl	800f530 <tuh_max3421_reg_write>
}
 8010646:	e04e      	b.n	80106e6 <handle_xfer_done+0x2e2>
    }
  } else {
    // SETUP or OUT transfer

    // clear sndfifo owner since data is sent
    _hcd_data.sndfifo_owner.daddr = 0xff;
 8010648:	4b28      	ldr	r3, [pc, #160]	@ (80106ec <handle_xfer_done+0x2e8>)
 801064a:	22ff      	movs	r2, #255	@ 0xff
 801064c:	721a      	strb	r2, [r3, #8]
    _hcd_data.sndfifo_owner.hxfr = 0xff;
 801064e:	4b27      	ldr	r3, [pc, #156]	@ (80106ec <handle_xfer_done+0x2e8>)
 8010650:	22ff      	movs	r2, #255	@ 0xff
 8010652:	725a      	strb	r2, [r3, #9]

    uint8_t xact_len;

    if (hxfr_type & HXFR_SETUP) {
 8010654:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010658:	f003 0310 	and.w	r3, r3, #16
 801065c:	2b00      	cmp	r3, #0
 801065e:	d003      	beq.n	8010668 <handle_xfer_done+0x264>
      xact_len = 8;
 8010660:	2308      	movs	r3, #8
 8010662:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010666:	e00b      	b.n	8010680 <handle_xfer_done+0x27c>
    } else if (hxfr_type & HXFR_HS) {
 8010668:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 801066c:	2b00      	cmp	r3, #0
 801066e:	da03      	bge.n	8010678 <handle_xfer_done+0x274>
      xact_len = 0;
 8010670:	2300      	movs	r3, #0
 8010672:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010676:	e003      	b.n	8010680 <handle_xfer_done+0x27c>
    } else {
      xact_len = _hcd_data.sndbc;
 8010678:	4b1c      	ldr	r3, [pc, #112]	@ (80106ec <handle_xfer_done+0x2e8>)
 801067a:	789b      	ldrb	r3, [r3, #2]
 801067c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }

    ep->xferred_len += xact_len;
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	88da      	ldrh	r2, [r3, #6]
 8010684:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010688:	b29b      	uxth	r3, r3
 801068a:	4413      	add	r3, r2
 801068c:	b29a      	uxth	r2, r3
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	80da      	strh	r2, [r3, #6]
    ep->buf += xact_len;
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	689a      	ldr	r2, [r3, #8]
 8010696:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801069a:	441a      	add	r2, r3
 801069c:	69fb      	ldr	r3, [r7, #28]
 801069e:	609a      	str	r2, [r3, #8]

    if (xact_len < ep->packet_size || ep->xferred_len >= ep->total_len) {
 80106a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80106a4:	69fa      	ldr	r2, [r7, #28]
 80106a6:	8852      	ldrh	r2, [r2, #2]
 80106a8:	f3c2 124a 	ubfx	r2, r2, #5, #11
 80106ac:	b292      	uxth	r2, r2
 80106ae:	4293      	cmp	r3, r2
 80106b0:	db05      	blt.n	80106be <handle_xfer_done+0x2ba>
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	88da      	ldrh	r2, [r3, #6]
 80106b6:	69fb      	ldr	r3, [r7, #28]
 80106b8:	889b      	ldrh	r3, [r3, #4]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d30b      	bcc.n	80106d6 <handle_xfer_done+0x2d2>
      xfer_complete_isr(rhport, ep, xfer_result, hrsl, in_isr);
 80106be:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80106c2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80106c6:	79f8      	ldrb	r0, [r7, #7]
 80106c8:	79bb      	ldrb	r3, [r7, #6]
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	460b      	mov	r3, r1
 80106ce:	69f9      	ldr	r1, [r7, #28]
 80106d0:	f7ff fe0a 	bl	80102e8 <xfer_complete_isr>
 80106d4:	e007      	b.n	80106e6 <handle_xfer_done+0x2e2>
    } else {
      xact_out(rhport, ep, false, in_isr); // more to transfer
 80106d6:	79bb      	ldrb	r3, [r7, #6]
 80106d8:	79f8      	ldrb	r0, [r7, #7]
 80106da:	2200      	movs	r2, #0
 80106dc:	69f9      	ldr	r1, [r7, #28]
 80106de:	f7ff fa53 	bl	800fb88 <xact_out>
 80106e2:	e000      	b.n	80106e6 <handle_xfer_done+0x2e2>
      return;
 80106e4:	bf00      	nop
    }
  }
}
 80106e6:	3728      	adds	r7, #40	@ 0x28
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	24001db4 	.word	0x24001db4
 80106f0:	24001dc0 	.word	0x24001dc0
 80106f4:	24001dbe 	.word	0x24001dbe

080106f8 <hcd_int_handler>:
#else
  #define print_hirq(hirq)
#endif

// Interrupt handler
void hcd_int_handler(uint8_t rhport, bool in_isr) {
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b08e      	sub	sp, #56	@ 0x38
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	4603      	mov	r3, r0
 8010700:	460a      	mov	r2, r1
 8010702:	71fb      	strb	r3, [r7, #7]
 8010704:	4613      	mov	r3, r2
 8010706:	71bb      	strb	r3, [r7, #6]
  uint8_t hirq = reg_read(rhport, HIRQ_ADDR, in_isr) & _hcd_data.hien;
 8010708:	79ba      	ldrb	r2, [r7, #6]
 801070a:	79fb      	ldrb	r3, [r7, #7]
 801070c:	21c8      	movs	r1, #200	@ 0xc8
 801070e:	4618      	mov	r0, r3
 8010710:	f7fe feda 	bl	800f4c8 <tuh_max3421_reg_read>
 8010714:	4603      	mov	r3, r0
 8010716:	461a      	mov	r2, r3
 8010718:	4baf      	ldr	r3, [pc, #700]	@ (80109d8 <hcd_int_handler+0x2e0>)
 801071a:	791b      	ldrb	r3, [r3, #4]
 801071c:	4013      	ands	r3, r2
 801071e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (!hirq) return;
 8010722:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010726:	2b00      	cmp	r3, #0
 8010728:	f000 8152 	beq.w	80109d0 <hcd_int_handler+0x2d8>
//  print_hirq(hirq);

  if (hirq & HIRQ_FRAME_IRQ) {
 801072c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010734:	2b00      	cmp	r3, #0
 8010736:	d050      	beq.n	80107da <hcd_int_handler+0xe2>
    _hcd_data.frame_count++;
 8010738:	4ba7      	ldr	r3, [pc, #668]	@ (80109d8 <hcd_int_handler+0x2e0>)
 801073a:	881b      	ldrh	r3, [r3, #0]
 801073c:	b29b      	uxth	r3, r3
 801073e:	3301      	adds	r3, #1
 8010740:	b29a      	uxth	r2, r3
 8010742:	4ba5      	ldr	r3, [pc, #660]	@ (80109d8 <hcd_int_handler+0x2e0>)
 8010744:	801a      	strh	r2, [r3, #0]

    // reset all endpoints nak counter, retry with 1st pending ep.
    max3421_ep_t* ep_retry = NULL;
 8010746:	2300      	movs	r3, #0
 8010748:	633b      	str	r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < CFG_TUH_MAX3421_ENDPOINT_TOTAL; i++) {
 801074a:	2300      	movs	r3, #0
 801074c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801074e:	e025      	b.n	801079c <hcd_int_handler+0xa4>
      max3421_ep_t* ep = &_hcd_data.ep[i];
 8010750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010752:	4613      	mov	r3, r2
 8010754:	005b      	lsls	r3, r3, #1
 8010756:	4413      	add	r3, r2
 8010758:	009b      	lsls	r3, r3, #2
 801075a:	3308      	adds	r3, #8
 801075c:	4a9e      	ldr	r2, [pc, #632]	@ (80109d8 <hcd_int_handler+0x2e0>)
 801075e:	4413      	add	r3, r2
 8010760:	3304      	adds	r3, #4
 8010762:	627b      	str	r3, [r7, #36]	@ 0x24
      if (ep->packet_size && ep->state > EP_STATE_ATTEMPT_1) {
 8010764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010766:	885b      	ldrh	r3, [r3, #2]
 8010768:	f023 031f 	bic.w	r3, r3, #31
 801076c:	b29b      	uxth	r3, r3
 801076e:	2b00      	cmp	r3, #0
 8010770:	d011      	beq.n	8010796 <hcd_int_handler+0x9e>
 8010772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010774:	789b      	ldrb	r3, [r3, #2]
 8010776:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801077a:	b2db      	uxtb	r3, r3
 801077c:	2b03      	cmp	r3, #3
 801077e:	d90a      	bls.n	8010796 <hcd_int_handler+0x9e>
        ep->state = EP_STATE_ATTEMPT_1;
 8010780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010782:	7893      	ldrb	r3, [r2, #2]
 8010784:	2103      	movs	r1, #3
 8010786:	f361 0303 	bfi	r3, r1, #0, #4
 801078a:	7093      	strb	r3, [r2, #2]

        if (ep_retry == NULL) {
 801078c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801078e:	2b00      	cmp	r3, #0
 8010790:	d101      	bne.n	8010796 <hcd_int_handler+0x9e>
          ep_retry = ep;
 8010792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010794:	633b      	str	r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < CFG_TUH_MAX3421_ENDPOINT_TOTAL; i++) {
 8010796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010798:	3301      	adds	r3, #1
 801079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801079c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801079e:	2b07      	cmp	r3, #7
 80107a0:	d9d6      	bls.n	8010750 <hcd_int_handler+0x58>
        }
      }
    }

    // start usb transfer if not busy
    if (ep_retry != NULL && !atomic_flag_test_and_set(&_hcd_data.busy)) {
 80107a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d018      	beq.n	80107da <hcd_int_handler+0xe2>
 80107a8:	4b8c      	ldr	r3, [pc, #560]	@ (80109dc <hcd_int_handler+0x2e4>)
 80107aa:	2201      	movs	r2, #1
 80107ac:	4611      	mov	r1, r2
 80107ae:	f3bf 8f5b 	dmb	ish
 80107b2:	e8d3 2f4f 	ldrexb	r2, [r3]
 80107b6:	e8c3 1f40 	strexb	r0, r1, [r3]
 80107ba:	2800      	cmp	r0, #0
 80107bc:	d1f9      	bne.n	80107b2 <hcd_int_handler+0xba>
 80107be:	f3bf 8f5b 	dmb	ish
 80107c2:	b2d3      	uxtb	r3, r2
 80107c4:	f083 0301 	eor.w	r3, r3, #1
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d005      	beq.n	80107da <hcd_int_handler+0xe2>
      xact_generic(rhport, ep_retry, true, in_isr);
 80107ce:	79bb      	ldrb	r3, [r7, #6]
 80107d0:	79f8      	ldrb	r0, [r7, #7]
 80107d2:	2201      	movs	r2, #1
 80107d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80107d6:	f7ff fb1d 	bl	800fe14 <xact_generic>
    }
  }

  if (hirq & HIRQ_CONDET_IRQ) {
 80107da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80107de:	f003 0320 	and.w	r3, r3, #32
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	f000 80cc 	beq.w	8010980 <hcd_int_handler+0x288>
    handle_connect_irq(rhport, in_isr);
 80107e8:	79ba      	ldrb	r2, [r7, #6]
 80107ea:	79fb      	ldrb	r3, [r7, #7]
 80107ec:	4611      	mov	r1, r2
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7ff fcc0 	bl	8010174 <handle_connect_irq>
  }

  // queue more transfer in handle_xfer_done() can cause hirq to be set again while external IRQ may not catch and/or
  // not call this handler again. So we need to loop until all IRQ are cleared
  while (hirq & (HIRQ_RCVDAV_IRQ | HIRQ_HXFRDN_IRQ)) {
 80107f4:	e0c4      	b.n	8010980 <hcd_int_handler+0x288>
    if (hirq & HIRQ_RCVDAV_IRQ) {
 80107f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80107fa:	f003 0304 	and.w	r3, r3, #4
 80107fe:	2b00      	cmp	r3, #0
 8010800:	f000 8095 	beq.w	801092e <hcd_int_handler+0x236>
      const uint8_t ep_num = _hcd_data.hxfr_bm.ep_num;
 8010804:	4b74      	ldr	r3, [pc, #464]	@ (80109d8 <hcd_int_handler+0x2e0>)
 8010806:	79db      	ldrb	r3, [r3, #7]
 8010808:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801080c:	b2db      	uxtb	r3, r3
 801080e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      max3421_ep_t* ep = find_opened_ep(_hcd_data.peraddr, ep_num, 1);
 8010812:	4b71      	ldr	r3, [pc, #452]	@ (80109d8 <hcd_int_handler+0x2e0>)
 8010814:	799b      	ldrb	r3, [r3, #6]
 8010816:	76bb      	strb	r3, [r7, #26]
 8010818:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801081c:	767b      	strb	r3, [r7, #25]
 801081e:	2301      	movs	r3, #1
 8010820:	763b      	strb	r3, [r7, #24]
  if (daddr == 0 && ep_num == 0) {
 8010822:	7ebb      	ldrb	r3, [r7, #26]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d104      	bne.n	8010832 <hcd_int_handler+0x13a>
 8010828:	7e7b      	ldrb	r3, [r7, #25]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d101      	bne.n	8010832 <hcd_int_handler+0x13a>
    return &_hcd_data.ep[0];
 801082e:	4b6c      	ldr	r3, [pc, #432]	@ (80109e0 <hcd_int_handler+0x2e8>)
 8010830:	e006      	b.n	8010840 <hcd_int_handler+0x148>
    return find_ep_not_addr0(daddr, ep_num, ep_dir);
 8010832:	7e3a      	ldrb	r2, [r7, #24]
 8010834:	7e79      	ldrb	r1, [r7, #25]
 8010836:	7ebb      	ldrb	r3, [r7, #26]
 8010838:	4618      	mov	r0, r3
 801083a:	f7fe ff15 	bl	800f668 <find_ep_not_addr0>
 801083e:	4603      	mov	r3, r0
      max3421_ep_t* ep = find_opened_ep(_hcd_data.peraddr, ep_num, 1);
 8010840:	61fb      	str	r3, [r7, #28]
      uint8_t xact_len = 0;
 8010842:	2300      	movs	r3, #0
 8010844:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

      // RCVDAV_IRQ can trigger 2 times (dual buffered)
      while (hirq & HIRQ_RCVDAV_IRQ) {
 8010848:	e056      	b.n	80108f8 <hcd_int_handler+0x200>
        const uint8_t rcvbc = reg_read(rhport, RCVBC_ADDR, in_isr);
 801084a:	79ba      	ldrb	r2, [r7, #6]
 801084c:	79fb      	ldrb	r3, [r7, #7]
 801084e:	2130      	movs	r1, #48	@ 0x30
 8010850:	4618      	mov	r0, r3
 8010852:	f7fe fe39 	bl	800f4c8 <tuh_max3421_reg_read>
 8010856:	4603      	mov	r3, r0
 8010858:	76fb      	strb	r3, [r7, #27]
        xact_len = (uint8_t) tu_min16(rcvbc, ep->total_len - ep->xferred_len);
 801085a:	7efb      	ldrb	r3, [r7, #27]
 801085c:	b299      	uxth	r1, r3
 801085e:	69fb      	ldr	r3, [r7, #28]
 8010860:	889a      	ldrh	r2, [r3, #4]
 8010862:	69fb      	ldr	r3, [r7, #28]
 8010864:	88db      	ldrh	r3, [r3, #6]
 8010866:	1ad3      	subs	r3, r2, r3
 8010868:	b29b      	uxth	r3, r3
 801086a:	460a      	mov	r2, r1
 801086c:	82fa      	strh	r2, [r7, #22]
 801086e:	82bb      	strh	r3, [r7, #20]
 8010870:	8afa      	ldrh	r2, [r7, #22]
 8010872:	8abb      	ldrh	r3, [r7, #20]
 8010874:	4293      	cmp	r3, r2
 8010876:	bf28      	it	cs
 8010878:	4613      	movcs	r3, r2
 801087a:	b29b      	uxth	r3, r3
 801087c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        if (xact_len) {
 8010880:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010884:	2b00      	cmp	r3, #0
 8010886:	d018      	beq.n	80108ba <hcd_int_handler+0x1c2>
          hwfifo_receive(rhport, ep->buf, xact_len, in_isr);
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	6899      	ldr	r1, [r3, #8]
 801088c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010890:	b29a      	uxth	r2, r3
 8010892:	79bb      	ldrb	r3, [r7, #6]
 8010894:	79f8      	ldrb	r0, [r7, #7]
 8010896:	f7fe feb5 	bl	800f604 <hwfifo_receive>
          ep->buf += xact_len;
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	689a      	ldr	r2, [r3, #8]
 801089e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80108a2:	441a      	add	r2, r3
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	609a      	str	r2, [r3, #8]
          ep->xferred_len += xact_len;
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	88da      	ldrh	r2, [r3, #6]
 80108ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	4413      	add	r3, r2
 80108b4:	b29a      	uxth	r2, r3
 80108b6:	69fb      	ldr	r3, [r7, #28]
 80108b8:	80da      	strh	r2, [r3, #6]
 80108ba:	79fb      	ldrb	r3, [r7, #7]
 80108bc:	74fb      	strb	r3, [r7, #19]
 80108be:	2304      	movs	r3, #4
 80108c0:	74bb      	strb	r3, [r7, #18]
 80108c2:	79bb      	ldrb	r3, [r7, #6]
 80108c4:	747b      	strb	r3, [r7, #17]
  reg_write(rhport, HIRQ_ADDR, data, in_isr);
 80108c6:	7c7b      	ldrb	r3, [r7, #17]
 80108c8:	7cba      	ldrb	r2, [r7, #18]
 80108ca:	7cf8      	ldrb	r0, [r7, #19]
 80108cc:	21c8      	movs	r1, #200	@ 0xc8
 80108ce:	f7fe fe2f 	bl	800f530 <tuh_max3421_reg_write>
  _hcd_data.hirq &= (uint8_t) ~data;
 80108d2:	4b41      	ldr	r3, [pc, #260]	@ (80109d8 <hcd_int_handler+0x2e0>)
 80108d4:	78da      	ldrb	r2, [r3, #3]
 80108d6:	7cbb      	ldrb	r3, [r7, #18]
 80108d8:	43db      	mvns	r3, r3
 80108da:	b2db      	uxtb	r3, r3
 80108dc:	4013      	ands	r3, r2
 80108de:	b2da      	uxtb	r2, r3
 80108e0:	4b3d      	ldr	r3, [pc, #244]	@ (80109d8 <hcd_int_handler+0x2e0>)
 80108e2:	70da      	strb	r2, [r3, #3]
}
 80108e4:	bf00      	nop
        }

        // ack RCVDVAV IRQ
        hirq_write(rhport, HIRQ_RCVDAV_IRQ, in_isr);
        hirq = reg_read(rhport, HIRQ_ADDR, in_isr);
 80108e6:	79ba      	ldrb	r2, [r7, #6]
 80108e8:	79fb      	ldrb	r3, [r7, #7]
 80108ea:	21c8      	movs	r1, #200	@ 0xc8
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7fe fdeb 	bl	800f4c8 <tuh_max3421_reg_read>
 80108f2:	4603      	mov	r3, r0
 80108f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      while (hirq & HIRQ_RCVDAV_IRQ) {
 80108f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108fc:	f003 0304 	and.w	r3, r3, #4
 8010900:	2b00      	cmp	r3, #0
 8010902:	d1a2      	bne.n	801084a <hcd_int_handler+0x152>
      }

      if (xact_len < ep->packet_size || ep->xferred_len >= ep->total_len) {
 8010904:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010908:	69fa      	ldr	r2, [r7, #28]
 801090a:	8852      	ldrh	r2, [r2, #2]
 801090c:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8010910:	b292      	uxth	r2, r2
 8010912:	4293      	cmp	r3, r2
 8010914:	db05      	blt.n	8010922 <hcd_int_handler+0x22a>
 8010916:	69fb      	ldr	r3, [r7, #28]
 8010918:	88da      	ldrh	r2, [r3, #6]
 801091a:	69fb      	ldr	r3, [r7, #28]
 801091c:	889b      	ldrh	r3, [r3, #4]
 801091e:	429a      	cmp	r2, r3
 8010920:	d305      	bcc.n	801092e <hcd_int_handler+0x236>
        ep->state = EP_STATE_COMPLETE;
 8010922:	69fa      	ldr	r2, [r7, #28]
 8010924:	7893      	ldrb	r3, [r2, #2]
 8010926:	2101      	movs	r1, #1
 8010928:	f361 0303 	bfi	r3, r1, #0, #4
 801092c:	7093      	strb	r3, [r2, #2]
      }
    }

    if (hirq & HIRQ_HXFRDN_IRQ) {
 801092e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8010932:	2b00      	cmp	r3, #0
 8010934:	da1b      	bge.n	801096e <hcd_int_handler+0x276>
 8010936:	79fb      	ldrb	r3, [r7, #7]
 8010938:	743b      	strb	r3, [r7, #16]
 801093a:	2380      	movs	r3, #128	@ 0x80
 801093c:	73fb      	strb	r3, [r7, #15]
 801093e:	79bb      	ldrb	r3, [r7, #6]
 8010940:	73bb      	strb	r3, [r7, #14]
  reg_write(rhport, HIRQ_ADDR, data, in_isr);
 8010942:	7bbb      	ldrb	r3, [r7, #14]
 8010944:	7bfa      	ldrb	r2, [r7, #15]
 8010946:	7c38      	ldrb	r0, [r7, #16]
 8010948:	21c8      	movs	r1, #200	@ 0xc8
 801094a:	f7fe fdf1 	bl	800f530 <tuh_max3421_reg_write>
  _hcd_data.hirq &= (uint8_t) ~data;
 801094e:	4b22      	ldr	r3, [pc, #136]	@ (80109d8 <hcd_int_handler+0x2e0>)
 8010950:	78da      	ldrb	r2, [r3, #3]
 8010952:	7bfb      	ldrb	r3, [r7, #15]
 8010954:	43db      	mvns	r3, r3
 8010956:	b2db      	uxtb	r3, r3
 8010958:	4013      	ands	r3, r2
 801095a:	b2da      	uxtb	r2, r3
 801095c:	4b1e      	ldr	r3, [pc, #120]	@ (80109d8 <hcd_int_handler+0x2e0>)
 801095e:	70da      	strb	r2, [r3, #3]
}
 8010960:	bf00      	nop
      hirq_write(rhport, HIRQ_HXFRDN_IRQ, in_isr);
      handle_xfer_done(rhport, in_isr);
 8010962:	79ba      	ldrb	r2, [r7, #6]
 8010964:	79fb      	ldrb	r3, [r7, #7]
 8010966:	4611      	mov	r1, r2
 8010968:	4618      	mov	r0, r3
 801096a:	f7ff fd4b 	bl	8010404 <handle_xfer_done>
    }

    hirq = reg_read(rhport, HIRQ_ADDR, in_isr);
 801096e:	79ba      	ldrb	r2, [r7, #6]
 8010970:	79fb      	ldrb	r3, [r7, #7]
 8010972:	21c8      	movs	r1, #200	@ 0xc8
 8010974:	4618      	mov	r0, r3
 8010976:	f7fe fda7 	bl	800f4c8 <tuh_max3421_reg_read>
 801097a:	4603      	mov	r3, r0
 801097c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  while (hirq & (HIRQ_RCVDAV_IRQ | HIRQ_HXFRDN_IRQ)) {
 8010980:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010984:	f003 0384 	and.w	r3, r3, #132	@ 0x84
 8010988:	2b00      	cmp	r3, #0
 801098a:	f47f af34 	bne.w	80107f6 <hcd_int_handler+0xfe>
  }

  // clear all interrupt except SNDBAV_IRQ (never clear by us). Note RCVDAV_IRQ, HXFRDN_IRQ already clear while processing
  hirq &= (uint8_t) ~HIRQ_SNDBAV_IRQ;
 801098e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010992:	f023 0308 	bic.w	r3, r3, #8
 8010996:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (hirq) {
 801099a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d017      	beq.n	80109d2 <hcd_int_handler+0x2da>
 80109a2:	79fb      	ldrb	r3, [r7, #7]
 80109a4:	737b      	strb	r3, [r7, #13]
 80109a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80109aa:	733b      	strb	r3, [r7, #12]
 80109ac:	79bb      	ldrb	r3, [r7, #6]
 80109ae:	72fb      	strb	r3, [r7, #11]
  reg_write(rhport, HIRQ_ADDR, data, in_isr);
 80109b0:	7afb      	ldrb	r3, [r7, #11]
 80109b2:	7b3a      	ldrb	r2, [r7, #12]
 80109b4:	7b78      	ldrb	r0, [r7, #13]
 80109b6:	21c8      	movs	r1, #200	@ 0xc8
 80109b8:	f7fe fdba 	bl	800f530 <tuh_max3421_reg_write>
  _hcd_data.hirq &= (uint8_t) ~data;
 80109bc:	4b06      	ldr	r3, [pc, #24]	@ (80109d8 <hcd_int_handler+0x2e0>)
 80109be:	78da      	ldrb	r2, [r3, #3]
 80109c0:	7b3b      	ldrb	r3, [r7, #12]
 80109c2:	43db      	mvns	r3, r3
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	4013      	ands	r3, r2
 80109c8:	b2da      	uxtb	r2, r3
 80109ca:	4b03      	ldr	r3, [pc, #12]	@ (80109d8 <hcd_int_handler+0x2e0>)
 80109cc:	70da      	strb	r2, [r3, #3]
}
 80109ce:	e000      	b.n	80109d2 <hcd_int_handler+0x2da>
  if (!hirq) return;
 80109d0:	bf00      	nop
    hirq_write(rhport, hirq, in_isr);
  }
}
 80109d2:	3738      	adds	r7, #56	@ 0x38
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	24001db4 	.word	0x24001db4
 80109dc:	24001dbe 	.word	0x24001dbe
 80109e0:	24001dc0 	.word	0x24001dc0

080109e4 <tusb_time_delay_ms_api>:

//--------------------------------------------------------------------
// Weak/Default API, can be overwritten by Application
//--------------------------------------------------------------------

TU_ATTR_WEAK void tusb_time_delay_ms_api(uint32_t ms) {
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
#if CFG_TUSB_OS != OPT_OS_NONE
  osal_task_delay(ms);
#else
  // delay using millis() (if implemented) and/or frame number if possible
  const uint32_t time_ms = tusb_time_millis_api();
 80109ec:	f7f0 f9ea 	bl	8000dc4 <tusb_time_millis_api>
 80109f0:	60f8      	str	r0, [r7, #12]
  while ((tusb_time_millis_api() - time_ms) < ms) {}
 80109f2:	bf00      	nop
 80109f4:	f7f0 f9e6 	bl	8000dc4 <tusb_time_millis_api>
 80109f8:	4602      	mov	r2, r0
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	1ad3      	subs	r3, r2, r3
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d8f7      	bhi.n	80109f4 <tusb_time_delay_ms_api+0x10>
#endif
}
 8010a04:	bf00      	nop
 8010a06:	bf00      	nop
 8010a08:	3710      	adds	r7, #16
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
	...

08010a10 <tusb_rhport_init>:

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b086      	sub	sp, #24
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	4603      	mov	r3, r0
 8010a18:	6039      	str	r1, [r7, #0]
 8010a1a:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d11f      	bne.n	8010a62 <tusb_rhport_init+0x52>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
    #endif

    #if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
    // init host stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t host_init = {
 8010a22:	2302      	movs	r3, #2
 8010a24:	723b      	strb	r3, [r7, #8]
 8010a26:	2300      	movs	r3, #0
 8010a28:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_HOST,
      .speed = TUH_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
 8010a2a:	f107 0308 	add.w	r3, r7, #8
 8010a2e:	4619      	mov	r1, r3
 8010a30:	2001      	movs	r0, #1
 8010a32:	f7fc ffad 	bl	800d990 <tuh_rhport_init>
 8010a36:	4603      	mov	r3, r0
 8010a38:	f083 0301 	eor.w	r3, r3, #1
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d00a      	beq.n	8010a58 <tusb_rhport_init+0x48>
 8010a42:	4b23      	ldr	r3, [pc, #140]	@ (8010ad0 <tusb_rhport_init+0xc0>)
 8010a44:	60fb      	str	r3, [r7, #12]
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	f003 0301 	and.w	r3, r3, #1
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d000      	beq.n	8010a54 <tusb_rhport_init+0x44>
 8010a52:	be00      	bkpt	0x0000
 8010a54:	2300      	movs	r3, #0
 8010a56:	e036      	b.n	8010ac6 <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
 8010a58:	4b1e      	ldr	r3, [pc, #120]	@ (8010ad4 <tusb_rhport_init+0xc4>)
 8010a5a:	2202      	movs	r2, #2
 8010a5c:	705a      	strb	r2, [r3, #1]
    #endif

    return true;
 8010a5e:	2301      	movs	r3, #1
 8010a60:	e031      	b.n	8010ac6 <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 8010a62:	79fb      	ldrb	r3, [r7, #7]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d803      	bhi.n	8010a70 <tusb_rhport_init+0x60>
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d10a      	bne.n	8010a86 <tusb_rhport_init+0x76>
 8010a70:	4b17      	ldr	r3, [pc, #92]	@ (8010ad0 <tusb_rhport_init+0xc0>)
 8010a72:	613b      	str	r3, [r7, #16]
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f003 0301 	and.w	r3, r3, #1
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d000      	beq.n	8010a82 <tusb_rhport_init+0x72>
 8010a80:	be00      	bkpt	0x0000
 8010a82:	2300      	movs	r3, #0
 8010a84:	e01f      	b.n	8010ac6 <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 8010a86:	79fb      	ldrb	r3, [r7, #7]
 8010a88:	683a      	ldr	r2, [r7, #0]
 8010a8a:	7811      	ldrb	r1, [r2, #0]
 8010a8c:	4a11      	ldr	r2, [pc, #68]	@ (8010ad4 <tusb_rhport_init+0xc4>)
 8010a8e:	54d1      	strb	r1, [r2, r3]
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
  }
  #endif

  #if CFG_TUH_ENABLED
  if (rh_init->role == TUSB_ROLE_HOST) {
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	2b02      	cmp	r3, #2
 8010a96:	d115      	bne.n	8010ac4 <tusb_rhport_init+0xb4>
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
 8010a98:	79fb      	ldrb	r3, [r7, #7]
 8010a9a:	6839      	ldr	r1, [r7, #0]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7fc ff77 	bl	800d990 <tuh_rhport_init>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	f083 0301 	eor.w	r3, r3, #1
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00a      	beq.n	8010ac4 <tusb_rhport_init+0xb4>
 8010aae:	4b08      	ldr	r3, [pc, #32]	@ (8010ad0 <tusb_rhport_init+0xc0>)
 8010ab0:	617b      	str	r3, [r7, #20]
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	f003 0301 	and.w	r3, r3, #1
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d000      	beq.n	8010ac0 <tusb_rhport_init+0xb0>
 8010abe:	be00      	bkpt	0x0000
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	e000      	b.n	8010ac6 <tusb_rhport_init+0xb6>
  }
  #endif

  return true;
 8010ac4:	2301      	movs	r3, #1
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3718      	adds	r7, #24
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	e000edf0 	.word	0xe000edf0
 8010ad4:	24001e20 	.word	0x24001e20

08010ad8 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8010ad8:	b480      	push	{r7}
 8010ada:	b085      	sub	sp, #20
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d106      	bne.n	8010afe <tu_edpt_claim+0x26>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010af8:	b2db      	uxtb	r3, r3
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d001      	beq.n	8010b02 <tu_edpt_claim+0x2a>
 8010afe:	2300      	movs	r3, #0
 8010b00:	e01e      	b.n	8010b40 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010b0a:	b2db      	uxtb	r3, r3
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d108      	bne.n	8010b22 <tu_edpt_claim+0x4a>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	781b      	ldrb	r3, [r3, #0]
 8010b14:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010b18:	b2db      	uxtb	r3, r3
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d101      	bne.n	8010b22 <tu_edpt_claim+0x4a>
 8010b1e:	2301      	movs	r3, #1
 8010b20:	e000      	b.n	8010b24 <tu_edpt_claim+0x4c>
 8010b22:	2300      	movs	r3, #0
 8010b24:	73fb      	strb	r3, [r7, #15]
 8010b26:	7bfb      	ldrb	r3, [r7, #15]
 8010b28:	f003 0301 	and.w	r3, r3, #1
 8010b2c:	73fb      	strb	r3, [r7, #15]
  if (available) {
 8010b2e:	7bfb      	ldrb	r3, [r7, #15]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d004      	beq.n	8010b3e <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	7813      	ldrb	r3, [r2, #0]
 8010b38:	f043 0304 	orr.w	r3, r3, #4
 8010b3c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 8010b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3714      	adds	r7, #20
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	d108      	bne.n	8010b76 <tu_edpt_release+0x2a>
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	781b      	ldrb	r3, [r3, #0]
 8010b68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010b6c:	b2db      	uxtb	r3, r3
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d101      	bne.n	8010b76 <tu_edpt_release+0x2a>
 8010b72:	2301      	movs	r3, #1
 8010b74:	e000      	b.n	8010b78 <tu_edpt_release+0x2c>
 8010b76:	2300      	movs	r3, #0
 8010b78:	73fb      	strb	r3, [r7, #15]
 8010b7a:	7bfb      	ldrb	r3, [r7, #15]
 8010b7c:	f003 0301 	and.w	r3, r3, #1
 8010b80:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 8010b82:	7bfb      	ldrb	r3, [r7, #15]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d004      	beq.n	8010b92 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	7813      	ldrb	r3, [r2, #0]
 8010b8c:	f023 0304 	bic.w	r3, r3, #4
 8010b90:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 8010b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3714      	adds	r7, #20
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed) {
 8010ba0:	b480      	push	{r7}
 8010ba2:	b08b      	sub	sp, #44	@ 0x2c
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	460b      	mov	r3, r1
 8010baa:	70fb      	strb	r3, [r7, #3]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	889b      	ldrh	r3, [r3, #4]
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010bba:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8010bbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	78db      	ldrb	r3, [r3, #3]
 8010bc2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	2b03      	cmp	r3, #3
 8010bca:	d03e      	beq.n	8010c4a <tu_edpt_validate+0xaa>
 8010bcc:	2b03      	cmp	r3, #3
 8010bce:	dc53      	bgt.n	8010c78 <tu_edpt_validate+0xd8>
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d002      	beq.n	8010bda <tu_edpt_validate+0x3a>
 8010bd4:	2b02      	cmp	r3, #2
 8010bd6:	d018      	beq.n	8010c0a <tu_edpt_validate+0x6a>
 8010bd8:	e04e      	b.n	8010c78 <tu_edpt_validate+0xd8>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8010bda:	78fb      	ldrb	r3, [r7, #3]
 8010bdc:	2b02      	cmp	r3, #2
 8010bde:	d102      	bne.n	8010be6 <tu_edpt_validate+0x46>
 8010be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010be4:	e001      	b.n	8010bea <tu_edpt_validate+0x4a>
 8010be6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8010bea:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 8010bec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010bee:	8afb      	ldrh	r3, [r7, #22]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d943      	bls.n	8010c7c <tu_edpt_validate+0xdc>
 8010bf4:	4b27      	ldr	r3, [pc, #156]	@ (8010c94 <tu_edpt_validate+0xf4>)
 8010bf6:	613b      	str	r3, [r7, #16]
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	f003 0301 	and.w	r3, r3, #1
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d000      	beq.n	8010c06 <tu_edpt_validate+0x66>
 8010c04:	be00      	bkpt	0x0000
 8010c06:	2300      	movs	r3, #0
 8010c08:	e03e      	b.n	8010c88 <tu_edpt_validate+0xe8>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 8010c0a:	78fb      	ldrb	r3, [r7, #3]
 8010c0c:	2b02      	cmp	r3, #2
 8010c0e:	d10e      	bne.n	8010c2e <tu_edpt_validate+0x8e>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8010c10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010c12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c16:	d033      	beq.n	8010c80 <tu_edpt_validate+0xe0>
 8010c18:	4b1e      	ldr	r3, [pc, #120]	@ (8010c94 <tu_edpt_validate+0xf4>)
 8010c1a:	61bb      	str	r3, [r7, #24]
 8010c1c:	69bb      	ldr	r3, [r7, #24]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f003 0301 	and.w	r3, r3, #1
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d000      	beq.n	8010c2a <tu_edpt_validate+0x8a>
 8010c28:	be00      	bkpt	0x0000
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	e02c      	b.n	8010c88 <tu_edpt_validate+0xe8>
      } else {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8010c2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010c30:	2b40      	cmp	r3, #64	@ 0x40
 8010c32:	d925      	bls.n	8010c80 <tu_edpt_validate+0xe0>
 8010c34:	4b17      	ldr	r3, [pc, #92]	@ (8010c94 <tu_edpt_validate+0xf4>)
 8010c36:	61fb      	str	r3, [r7, #28]
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	f003 0301 	and.w	r3, r3, #1
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d000      	beq.n	8010c46 <tu_edpt_validate+0xa6>
 8010c44:	be00      	bkpt	0x0000
 8010c46:	2300      	movs	r3, #0
 8010c48:	e01e      	b.n	8010c88 <tu_edpt_validate+0xe8>
      }
      break;

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8010c4a:	78fb      	ldrb	r3, [r7, #3]
 8010c4c:	2b02      	cmp	r3, #2
 8010c4e:	d102      	bne.n	8010c56 <tu_edpt_validate+0xb6>
 8010c50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c54:	e000      	b.n	8010c58 <tu_edpt_validate+0xb8>
 8010c56:	2340      	movs	r3, #64	@ 0x40
 8010c58:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8010c5a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010c5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d910      	bls.n	8010c84 <tu_edpt_validate+0xe4>
 8010c62:	4b0c      	ldr	r3, [pc, #48]	@ (8010c94 <tu_edpt_validate+0xf4>)
 8010c64:	623b      	str	r3, [r7, #32]
 8010c66:	6a3b      	ldr	r3, [r7, #32]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	f003 0301 	and.w	r3, r3, #1
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d000      	beq.n	8010c74 <tu_edpt_validate+0xd4>
 8010c72:	be00      	bkpt	0x0000
 8010c74:	2300      	movs	r3, #0
 8010c76:	e007      	b.n	8010c88 <tu_edpt_validate+0xe8>
      break;
    }

    default:
      return false;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	e005      	b.n	8010c88 <tu_edpt_validate+0xe8>
      break;
 8010c7c:	bf00      	nop
 8010c7e:	e002      	b.n	8010c86 <tu_edpt_validate+0xe6>
      break;
 8010c80:	bf00      	nop
 8010c82:	e000      	b.n	8010c86 <tu_edpt_validate+0xe6>
      break;
 8010c84:	bf00      	nop
  }

  return true;
 8010c86:	2301      	movs	r3, #1
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	372c      	adds	r7, #44	@ 0x2c
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c92:	4770      	bx	lr
 8010c94:	e000edf0 	.word	0xe000edf0

08010c98 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 8010c98:	b480      	push	{r7}
 8010c9a:	b08d      	sub	sp, #52	@ 0x34
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	4611      	mov	r1, r2
 8010ca4:	461a      	mov	r2, r3
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	80fb      	strh	r3, [r7, #6]
 8010caa:	4613      	mov	r3, r2
 8010cac:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 8010cb2:	88fb      	ldrh	r3, [r7, #6]
 8010cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cb6:	4413      	add	r3, r2
 8010cb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 8010cba:	e027      	b.n	8010d0c <tu_edpt_bind_driver+0x74>
 8010cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cbe:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8010cc0:	6a3b      	ldr	r3, [r7, #32]
 8010cc2:	3301      	adds	r3, #1
 8010cc4:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8010cc6:	2b05      	cmp	r3, #5
 8010cc8:	d116      	bne.n	8010cf8 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8010cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ccc:	789b      	ldrb	r3, [r3, #2]
 8010cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cd6:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8010cd8:	7fbb      	ldrb	r3, [r7, #30]
 8010cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010cde:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8010ce0:	005b      	lsls	r3, r3, #1
 8010ce2:	68fa      	ldr	r2, [r7, #12]
 8010ce4:	4413      	add	r3, r2
 8010ce6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010cea:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8010cec:	7ffa      	ldrb	r2, [r7, #31]
 8010cee:	09d2      	lsrs	r2, r2, #7
 8010cf0:	b2d2      	uxtb	r2, r2
 8010cf2:	4611      	mov	r1, r2
 8010cf4:	797a      	ldrb	r2, [r7, #5]
 8010cf6:	545a      	strb	r2, [r3, r1]
 8010cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfa:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8010cfc:	69bb      	ldr	r3, [r7, #24]
 8010cfe:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	461a      	mov	r2, r3
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 8010d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 8010d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d3d3      	bcc.n	8010cbc <tu_edpt_bind_driver+0x24>
  }
}
 8010d14:	bf00      	nop
 8010d16:	bf00      	nop
 8010d18:	3734      	adds	r7, #52	@ 0x34
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr

08010d22 <tu_desc_get_interface_total_len>:

uint16_t tu_desc_get_interface_total_len(tusb_desc_interface_t const* desc_itf, uint8_t itf_count, uint16_t max_len) {
 8010d22:	b480      	push	{r7}
 8010d24:	b08f      	sub	sp, #60	@ 0x3c
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	70fb      	strb	r3, [r7, #3]
 8010d2e:	4613      	mov	r3, r2
 8010d30:	803b      	strh	r3, [r7, #0]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t len = 0;
 8010d36:	2300      	movs	r3, #0
 8010d38:	867b      	strh	r3, [r7, #50]	@ 0x32

  while (itf_count--) {
 8010d3a:	e046      	b.n	8010dca <tu_desc_get_interface_total_len+0xa8>
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	627b      	str	r3, [r7, #36]	@ 0x24
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8010d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d42:	781b      	ldrb	r3, [r3, #0]
    // Next on interface desc
    len += tu_desc_len(desc_itf);
 8010d44:	461a      	mov	r2, r3
 8010d46:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010d48:	4413      	add	r3, r2
 8010d4a:	867b      	strh	r3, [r7, #50]	@ 0x32
 8010d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc8 = (uint8_t const*) desc;
 8010d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  return desc8 + desc8[DESC_OFFSET_LEN];
 8010d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	461a      	mov	r2, r3
 8010d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d5c:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8010d5e:	637b      	str	r3, [r7, #52]	@ 0x34

    while (len < max_len) {
 8010d60:	e02b      	b.n	8010dba <tu_desc_get_interface_total_len+0x98>
 8010d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d64:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8010d66:	6a3b      	ldr	r3, [r7, #32]
 8010d68:	781b      	ldrb	r3, [r3, #0]
      if (tu_desc_len(p_desc) == 0) {
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d02a      	beq.n	8010dc4 <tu_desc_get_interface_total_len+0xa2>
 8010d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d70:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8010d72:	69fb      	ldr	r3, [r7, #28]
 8010d74:	3301      	adds	r3, #1
 8010d76:	781b      	ldrb	r3, [r3, #0]
        // Escape infinite loop
        break;
      }
      // return on IAD regardless of itf count
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE_ASSOCIATION) {
 8010d78:	2b0b      	cmp	r3, #11
 8010d7a:	d101      	bne.n	8010d80 <tu_desc_get_interface_total_len+0x5e>
        return len;
 8010d7c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010d7e:	e02a      	b.n	8010dd6 <tu_desc_get_interface_total_len+0xb4>
 8010d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d82:	61bb      	str	r3, [r7, #24]
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	3301      	adds	r3, #1
 8010d88:	781b      	ldrb	r3, [r3, #0]
      }
      if ((tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) &&
 8010d8a:	2b04      	cmp	r3, #4
 8010d8c:	d103      	bne.n	8010d96 <tu_desc_get_interface_total_len+0x74>
          ((tusb_desc_interface_t const*) p_desc)->bAlternateSetting == 0) {
 8010d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d90:	78db      	ldrb	r3, [r3, #3]
      if ((tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) &&
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d018      	beq.n	8010dc8 <tu_desc_get_interface_total_len+0xa6>
 8010d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d98:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	781b      	ldrb	r3, [r3, #0]
        break;
      }

      len += tu_desc_len(p_desc);
 8010d9e:	461a      	mov	r2, r3
 8010da0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010da2:	4413      	add	r3, r2
 8010da4:	867b      	strh	r3, [r7, #50]	@ 0x32
 8010da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010da8:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	781b      	ldrb	r3, [r3, #0]
 8010db2:	461a      	mov	r2, r3
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	4413      	add	r3, r2
      p_desc = tu_desc_next(p_desc);
 8010db8:	637b      	str	r3, [r7, #52]	@ 0x34
    while (len < max_len) {
 8010dba:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8010dbc:	883b      	ldrh	r3, [r7, #0]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d3cf      	bcc.n	8010d62 <tu_desc_get_interface_total_len+0x40>
 8010dc2:	e002      	b.n	8010dca <tu_desc_get_interface_total_len+0xa8>
        break;
 8010dc4:	bf00      	nop
 8010dc6:	e000      	b.n	8010dca <tu_desc_get_interface_total_len+0xa8>
        break;
 8010dc8:	bf00      	nop
  while (itf_count--) {
 8010dca:	78fb      	ldrb	r3, [r7, #3]
 8010dcc:	1e5a      	subs	r2, r3, #1
 8010dce:	70fa      	strb	r2, [r7, #3]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d1b3      	bne.n	8010d3c <tu_desc_get_interface_total_len+0x1a>
    }
  }

  return len;
 8010dd4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	373c      	adds	r7, #60	@ 0x3c
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr

08010de2 <memcmp>:
 8010de2:	b510      	push	{r4, lr}
 8010de4:	3901      	subs	r1, #1
 8010de6:	4402      	add	r2, r0
 8010de8:	4290      	cmp	r0, r2
 8010dea:	d101      	bne.n	8010df0 <memcmp+0xe>
 8010dec:	2000      	movs	r0, #0
 8010dee:	e005      	b.n	8010dfc <memcmp+0x1a>
 8010df0:	7803      	ldrb	r3, [r0, #0]
 8010df2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010df6:	42a3      	cmp	r3, r4
 8010df8:	d001      	beq.n	8010dfe <memcmp+0x1c>
 8010dfa:	1b18      	subs	r0, r3, r4
 8010dfc:	bd10      	pop	{r4, pc}
 8010dfe:	3001      	adds	r0, #1
 8010e00:	e7f2      	b.n	8010de8 <memcmp+0x6>

08010e02 <memset>:
 8010e02:	4402      	add	r2, r0
 8010e04:	4603      	mov	r3, r0
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d100      	bne.n	8010e0c <memset+0xa>
 8010e0a:	4770      	bx	lr
 8010e0c:	f803 1b01 	strb.w	r1, [r3], #1
 8010e10:	e7f9      	b.n	8010e06 <memset+0x4>

08010e12 <strchr>:
 8010e12:	b2c9      	uxtb	r1, r1
 8010e14:	4603      	mov	r3, r0
 8010e16:	4618      	mov	r0, r3
 8010e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e1c:	b112      	cbz	r2, 8010e24 <strchr+0x12>
 8010e1e:	428a      	cmp	r2, r1
 8010e20:	d1f9      	bne.n	8010e16 <strchr+0x4>
 8010e22:	4770      	bx	lr
 8010e24:	2900      	cmp	r1, #0
 8010e26:	bf18      	it	ne
 8010e28:	2000      	movne	r0, #0
 8010e2a:	4770      	bx	lr

08010e2c <__libc_init_array>:
 8010e2c:	b570      	push	{r4, r5, r6, lr}
 8010e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8010e64 <__libc_init_array+0x38>)
 8010e30:	4c0d      	ldr	r4, [pc, #52]	@ (8010e68 <__libc_init_array+0x3c>)
 8010e32:	1b64      	subs	r4, r4, r5
 8010e34:	10a4      	asrs	r4, r4, #2
 8010e36:	2600      	movs	r6, #0
 8010e38:	42a6      	cmp	r6, r4
 8010e3a:	d109      	bne.n	8010e50 <__libc_init_array+0x24>
 8010e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8010e6c <__libc_init_array+0x40>)
 8010e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8010e70 <__libc_init_array+0x44>)
 8010e40:	f000 f826 	bl	8010e90 <_init>
 8010e44:	1b64      	subs	r4, r4, r5
 8010e46:	10a4      	asrs	r4, r4, #2
 8010e48:	2600      	movs	r6, #0
 8010e4a:	42a6      	cmp	r6, r4
 8010e4c:	d105      	bne.n	8010e5a <__libc_init_array+0x2e>
 8010e4e:	bd70      	pop	{r4, r5, r6, pc}
 8010e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e54:	4798      	blx	r3
 8010e56:	3601      	adds	r6, #1
 8010e58:	e7ee      	b.n	8010e38 <__libc_init_array+0xc>
 8010e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e5e:	4798      	blx	r3
 8010e60:	3601      	adds	r6, #1
 8010e62:	e7f2      	b.n	8010e4a <__libc_init_array+0x1e>
 8010e64:	08011764 	.word	0x08011764
 8010e68:	08011764 	.word	0x08011764
 8010e6c:	08011764 	.word	0x08011764
 8010e70:	08011768 	.word	0x08011768

08010e74 <memcpy>:
 8010e74:	440a      	add	r2, r1
 8010e76:	4291      	cmp	r1, r2
 8010e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e7c:	d100      	bne.n	8010e80 <memcpy+0xc>
 8010e7e:	4770      	bx	lr
 8010e80:	b510      	push	{r4, lr}
 8010e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e8a:	4291      	cmp	r1, r2
 8010e8c:	d1f9      	bne.n	8010e82 <memcpy+0xe>
 8010e8e:	bd10      	pop	{r4, pc}

08010e90 <_init>:
 8010e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e92:	bf00      	nop
 8010e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e96:	bc08      	pop	{r3}
 8010e98:	469e      	mov	lr, r3
 8010e9a:	4770      	bx	lr

08010e9c <_fini>:
 8010e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e9e:	bf00      	nop
 8010ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ea2:	bc08      	pop	{r3}
 8010ea4:	469e      	mov	lr, r3
 8010ea6:	4770      	bx	lr
